
servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005878  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005988  08005988  00006988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a44  08005a44  00007028  2**0
                  CONTENTS
  4 .ARM          00000000  08005a44  08005a44  00007028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a44  08005a44  00007028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a44  08005a44  00006a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a48  08005a48  00006a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08005a4c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a48  20000028  08005a74  00007028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a70  08005a74  00007a70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ca3  00000000  00000000  00007051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a50  00000000  00000000  0001dcf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00021748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f4f  00000000  00000000  00022b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019830  00000000  00000000  00023a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ef2  00000000  00000000  0003d2a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a62  00000000  00000000  00057199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eabfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e8  00000000  00000000  000eac40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000efd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000028 	.word	0x20000028
 800012c:	00000000 	.word	0x00000000
 8000130:	08005970 	.word	0x08005970

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000002c 	.word	0x2000002c
 800014c:	08005970 	.word	0x08005970

08000150 <DCMotor_Start>:
/****************************/

/*APIs Implementation*/

DCMotorErrorStatus_t DCMotor_Start(uint32_t Copy_u32DCMotor)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 8000158:	2300      	movs	r3, #0
 800015a:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2b01      	cmp	r3, #1
 8000160:	d902      	bls.n	8000168 <DCMotor_Start+0x18>
    {
    	Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000162:	2301      	movs	r3, #1
 8000164:	73fb      	strb	r3, [r7, #15]
 8000166:	e05a      	b.n	800021e <DCMotor_Start+0xce>
    }
    else
    {
    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 8000168:	492f      	ldr	r1, [pc, #188]	@ (8000228 <DCMotor_Start+0xd8>)
 800016a:	687a      	ldr	r2, [r7, #4]
 800016c:	4613      	mov	r3, r2
 800016e:	009b      	lsls	r3, r3, #2
 8000170:	4413      	add	r3, r2
 8000172:	009b      	lsls	r3, r3, #2
 8000174:	440b      	add	r3, r1
 8000176:	3310      	adds	r3, #16
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	2b02      	cmp	r3, #2
 800017c:	d14d      	bne.n	800021a <DCMotor_Start+0xca>
    		case Timer_2:
    		    __HAL_TIM_SET_COMPARE(&htim2,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    			HAL_TIM_PWM_Start(&htim2, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		case Timer_3:
    		    __HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 800017e:	492a      	ldr	r1, [pc, #168]	@ (8000228 <DCMotor_Start+0xd8>)
 8000180:	687a      	ldr	r2, [r7, #4]
 8000182:	4613      	mov	r3, r2
 8000184:	009b      	lsls	r3, r3, #2
 8000186:	4413      	add	r3, r2
 8000188:	009b      	lsls	r3, r3, #2
 800018a:	440b      	add	r3, r1
 800018c:	3311      	adds	r3, #17
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d107      	bne.n	80001a4 <DCMotor_Start+0x54>
 8000194:	4b25      	ldr	r3, [pc, #148]	@ (800022c <DCMotor_Start+0xdc>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4925      	ldr	r1, [pc, #148]	@ (8000230 <DCMotor_Start+0xe0>)
 800019a:	687a      	ldr	r2, [r7, #4]
 800019c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80001a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80001a2:	e02c      	b.n	80001fe <DCMotor_Start+0xae>
 80001a4:	4920      	ldr	r1, [pc, #128]	@ (8000228 <DCMotor_Start+0xd8>)
 80001a6:	687a      	ldr	r2, [r7, #4]
 80001a8:	4613      	mov	r3, r2
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	4413      	add	r3, r2
 80001ae:	009b      	lsls	r3, r3, #2
 80001b0:	440b      	add	r3, r1
 80001b2:	3311      	adds	r3, #17
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	2b04      	cmp	r3, #4
 80001b8:	d107      	bne.n	80001ca <DCMotor_Start+0x7a>
 80001ba:	4b1c      	ldr	r3, [pc, #112]	@ (800022c <DCMotor_Start+0xdc>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	491c      	ldr	r1, [pc, #112]	@ (8000230 <DCMotor_Start+0xe0>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001c6:	6393      	str	r3, [r2, #56]	@ 0x38
 80001c8:	e019      	b.n	80001fe <DCMotor_Start+0xae>
 80001ca:	4917      	ldr	r1, [pc, #92]	@ (8000228 <DCMotor_Start+0xd8>)
 80001cc:	687a      	ldr	r2, [r7, #4]
 80001ce:	4613      	mov	r3, r2
 80001d0:	009b      	lsls	r3, r3, #2
 80001d2:	4413      	add	r3, r2
 80001d4:	009b      	lsls	r3, r3, #2
 80001d6:	440b      	add	r3, r1
 80001d8:	3311      	adds	r3, #17
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	2b08      	cmp	r3, #8
 80001de:	d107      	bne.n	80001f0 <DCMotor_Start+0xa0>
 80001e0:	4b12      	ldr	r3, [pc, #72]	@ (800022c <DCMotor_Start+0xdc>)
 80001e2:	681a      	ldr	r2, [r3, #0]
 80001e4:	4912      	ldr	r1, [pc, #72]	@ (8000230 <DCMotor_Start+0xe0>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ec:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80001ee:	e006      	b.n	80001fe <DCMotor_Start+0xae>
 80001f0:	4b0e      	ldr	r3, [pc, #56]	@ (800022c <DCMotor_Start+0xdc>)
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	490e      	ldr	r1, [pc, #56]	@ (8000230 <DCMotor_Start+0xe0>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fc:	6413      	str	r3, [r2, #64]	@ 0x40
    		    HAL_TIM_PWM_Start(&htim3, DCMotors[Copy_u32DCMotor].Enable_Channel);
 80001fe:	490a      	ldr	r1, [pc, #40]	@ (8000228 <DCMotor_Start+0xd8>)
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	4613      	mov	r3, r2
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	4413      	add	r3, r2
 8000208:	009b      	lsls	r3, r3, #2
 800020a:	440b      	add	r3, r1
 800020c:	3311      	adds	r3, #17
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	4619      	mov	r1, r3
 8000212:	4806      	ldr	r0, [pc, #24]	@ (800022c <DCMotor_Start+0xdc>)
 8000214:	f001 fdb6 	bl	8001d84 <HAL_TIM_PWM_Start>
    		    break;
 8000218:	e001      	b.n	800021e <DCMotor_Start+0xce>
    		/*case Timer_4:
    		    __HAL_TIM_SET_COMPARE(&htim4,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    HAL_TIM_PWM_Start(&htim4, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 800021a:	2301      	movs	r3, #1
 800021c:	73fb      	strb	r3, [r7, #15]
    	}
    }
    return Ret_ErrorStatus;
 800021e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000220:	4618      	mov	r0, r3
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	080059cc 	.word	0x080059cc
 800022c:	20000094 	.word	0x20000094
 8000230:	20000000 	.word	0x20000000

08000234 <DCMotor_Stop>:



DCMotorErrorStatus_t DCMotor_Stop(uint32_t Copy_u32DCMotor)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 800023c:	2300      	movs	r3, #0
 800023e:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2b01      	cmp	r3, #1
 8000244:	d902      	bls.n	800024c <DCMotor_Stop+0x18>
    {
      	Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000246:	2301      	movs	r3, #1
 8000248:	73fb      	strb	r3, [r7, #15]
 800024a:	e01a      	b.n	8000282 <DCMotor_Stop+0x4e>
    }
    else
    {
    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 800024c:	490f      	ldr	r1, [pc, #60]	@ (800028c <DCMotor_Stop+0x58>)
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	4613      	mov	r3, r2
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	4413      	add	r3, r2
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	440b      	add	r3, r1
 800025a:	3310      	adds	r3, #16
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b02      	cmp	r3, #2
 8000260:	d10d      	bne.n	800027e <DCMotor_Stop+0x4a>
    			break;
    		case Timer_2:
    			HAL_TIM_PWM_Stop(&htim2, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		case Timer_3:
    			HAL_TIM_PWM_Stop(&htim3, DCMotors[Copy_u32DCMotor].Enable_Channel);
 8000262:	490a      	ldr	r1, [pc, #40]	@ (800028c <DCMotor_Stop+0x58>)
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	4613      	mov	r3, r2
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	4413      	add	r3, r2
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	440b      	add	r3, r1
 8000270:	3311      	adds	r3, #17
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	4619      	mov	r1, r3
 8000276:	4806      	ldr	r0, [pc, #24]	@ (8000290 <DCMotor_Stop+0x5c>)
 8000278:	f001 fe26 	bl	8001ec8 <HAL_TIM_PWM_Stop>
    		    break;
 800027c:	e001      	b.n	8000282 <DCMotor_Stop+0x4e>
    		/*case Timer_4:
    			HAL_TIM_PWM_Stop(&htim4, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 800027e:	2301      	movs	r3, #1
 8000280:	73fb      	strb	r3, [r7, #15]
    	}

    }
    return Ret_ErrorStatus;
 8000282:	7bfb      	ldrb	r3, [r7, #15]
}
 8000284:	4618      	mov	r0, r3
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	080059cc 	.word	0x080059cc
 8000290:	20000094 	.word	0x20000094

08000294 <DCMotor_StartReverse>:
	    }
	    return Ret_ErrorStatus;
}

DCMotorErrorStatus_t DCMotor_StartReverse(uint32_t Copy_u32DCMotor)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 800029c:	2300      	movs	r3, #0
 800029e:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d902      	bls.n	80002ac <DCMotor_StartReverse+0x18>
    {
        Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 80002a6:	2301      	movs	r3, #1
 80002a8:	73fb      	strb	r3, [r7, #15]
 80002aa:	e087      	b.n	80003bc <DCMotor_StartReverse+0x128>
    }
    else
    {
    	HAL_GPIO_WritePin((GPIO_TypeDef *)DCMotors[Copy_u32DCMotor].Input_1.Port, DCMotors[Copy_u32DCMotor].Input_1.Pin, GPIO_PIN_RESET);
 80002ac:	4946      	ldr	r1, [pc, #280]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	4613      	mov	r3, r2
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	4413      	add	r3, r2
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	440b      	add	r3, r1
 80002ba:	3304      	adds	r3, #4
 80002bc:	6818      	ldr	r0, [r3, #0]
 80002be:	4942      	ldr	r1, [pc, #264]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	4613      	mov	r3, r2
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	4413      	add	r3, r2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	440b      	add	r3, r1
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	b29b      	uxth	r3, r3
 80002d0:	2200      	movs	r2, #0
 80002d2:	4619      	mov	r1, r3
 80002d4:	f001 f804 	bl	80012e0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin((GPIO_TypeDef *)DCMotors[Copy_u32DCMotor].Input_2.Port, DCMotors[Copy_u32DCMotor].Input_2.Pin, GPIO_PIN_SET);
 80002d8:	493b      	ldr	r1, [pc, #236]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	4613      	mov	r3, r2
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	4413      	add	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	440b      	add	r3, r1
 80002e6:	330c      	adds	r3, #12
 80002e8:	6818      	ldr	r0, [r3, #0]
 80002ea:	4937      	ldr	r1, [pc, #220]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	4613      	mov	r3, r2
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	4413      	add	r3, r2
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	440b      	add	r3, r1
 80002f8:	3308      	adds	r3, #8
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	2201      	movs	r2, #1
 8000300:	4619      	mov	r1, r3
 8000302:	f000 ffed 	bl	80012e0 <HAL_GPIO_WritePin>


    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 8000306:	4930      	ldr	r1, [pc, #192]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	4613      	mov	r3, r2
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	4413      	add	r3, r2
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	440b      	add	r3, r1
 8000314:	3310      	adds	r3, #16
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b02      	cmp	r3, #2
 800031a:	d14d      	bne.n	80003b8 <DCMotor_StartReverse+0x124>
    		case Timer_2:
    		    __HAL_TIM_SET_COMPARE(&htim2,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    			HAL_TIM_PWM_Start(&htim2, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		case Timer_3:
    		    __HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 800031c:	492a      	ldr	r1, [pc, #168]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	4613      	mov	r3, r2
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	4413      	add	r3, r2
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	440b      	add	r3, r1
 800032a:	3311      	adds	r3, #17
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d107      	bne.n	8000342 <DCMotor_StartReverse+0xae>
 8000332:	4b26      	ldr	r3, [pc, #152]	@ (80003cc <DCMotor_StartReverse+0x138>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4926      	ldr	r1, [pc, #152]	@ (80003d0 <DCMotor_StartReverse+0x13c>)
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800033e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000340:	e02c      	b.n	800039c <DCMotor_StartReverse+0x108>
 8000342:	4921      	ldr	r1, [pc, #132]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	4613      	mov	r3, r2
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	4413      	add	r3, r2
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	440b      	add	r3, r1
 8000350:	3311      	adds	r3, #17
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b04      	cmp	r3, #4
 8000356:	d107      	bne.n	8000368 <DCMotor_StartReverse+0xd4>
 8000358:	4b1c      	ldr	r3, [pc, #112]	@ (80003cc <DCMotor_StartReverse+0x138>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	491c      	ldr	r1, [pc, #112]	@ (80003d0 <DCMotor_StartReverse+0x13c>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000364:	6393      	str	r3, [r2, #56]	@ 0x38
 8000366:	e019      	b.n	800039c <DCMotor_StartReverse+0x108>
 8000368:	4917      	ldr	r1, [pc, #92]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	4613      	mov	r3, r2
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	4413      	add	r3, r2
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	440b      	add	r3, r1
 8000376:	3311      	adds	r3, #17
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b08      	cmp	r3, #8
 800037c:	d107      	bne.n	800038e <DCMotor_StartReverse+0xfa>
 800037e:	4b13      	ldr	r3, [pc, #76]	@ (80003cc <DCMotor_StartReverse+0x138>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	4913      	ldr	r1, [pc, #76]	@ (80003d0 <DCMotor_StartReverse+0x13c>)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800038a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800038c:	e006      	b.n	800039c <DCMotor_StartReverse+0x108>
 800038e:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <DCMotor_StartReverse+0x138>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	490f      	ldr	r1, [pc, #60]	@ (80003d0 <DCMotor_StartReverse+0x13c>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800039a:	6413      	str	r3, [r2, #64]	@ 0x40
    		    HAL_TIM_PWM_Start(&htim3, DCMotors[Copy_u32DCMotor].Enable_Channel);
 800039c:	490a      	ldr	r1, [pc, #40]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	4613      	mov	r3, r2
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	4413      	add	r3, r2
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	440b      	add	r3, r1
 80003aa:	3311      	adds	r3, #17
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	4619      	mov	r1, r3
 80003b0:	4806      	ldr	r0, [pc, #24]	@ (80003cc <DCMotor_StartReverse+0x138>)
 80003b2:	f001 fce7 	bl	8001d84 <HAL_TIM_PWM_Start>
    		    break;
 80003b6:	e001      	b.n	80003bc <DCMotor_StartReverse+0x128>
    		/*case Timer_4:
    		    __HAL_TIM_SET_COMPARE(&htim4,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    HAL_TIM_PWM_Start(&htim4, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 80003b8:	2301      	movs	r3, #1
 80003ba:	73fb      	strb	r3, [r7, #15]
    	}

    }
    return Ret_ErrorStatus;
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3710      	adds	r7, #16
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	080059cc 	.word	0x080059cc
 80003cc:	20000094 	.word	0x20000094
 80003d0:	20000000 	.word	0x20000000

080003d4 <DCMotor_SetSpeed>:


DCMotorErrorStatus_t DCMotor_SetSpeed(uint32_t Copy_u32DCMotor, uint32_t Copy_u32SpeedPercentage)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 80003de:	2300      	movs	r3, #0
 80003e0:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d902      	bls.n	80003ee <DCMotor_SetSpeed+0x1a>
    {
        Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 80003e8:	2301      	movs	r3, #1
 80003ea:	73fb      	strb	r3, [r7, #15]
 80003ec:	e05a      	b.n	80004a4 <DCMotor_SetSpeed+0xd0>
    }
    else
    {
    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 80003ee:	4930      	ldr	r1, [pc, #192]	@ (80004b0 <DCMotor_SetSpeed+0xdc>)
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	4613      	mov	r3, r2
 80003f4:	009b      	lsls	r3, r3, #2
 80003f6:	4413      	add	r3, r2
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	440b      	add	r3, r1
 80003fc:	3310      	adds	r3, #16
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b02      	cmp	r3, #2
 8000402:	d14d      	bne.n	80004a0 <DCMotor_SetSpeed+0xcc>
    		case Timer_2:
    			Motor_Speed[Copy_u32DCMotor] = (MAX_SPEED*Copy_u32SpeedPercentage)/100;
    			__HAL_TIM_SET_COMPARE(&htim2,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    break;*/
    		case Timer_3:
    			Motor_Speed[Copy_u32DCMotor] = (MAX_SPEED*Copy_u32SpeedPercentage)/100;
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	f242 7210 	movw	r2, #10000	@ 0x2710
 800040a:	fb02 f303 	mul.w	r3, r2, r3
 800040e:	4a29      	ldr	r2, [pc, #164]	@ (80004b4 <DCMotor_SetSpeed+0xe0>)
 8000410:	fba2 2303 	umull	r2, r3, r2, r3
 8000414:	095a      	lsrs	r2, r3, #5
 8000416:	4928      	ldr	r1, [pc, #160]	@ (80004b8 <DCMotor_SetSpeed+0xe4>)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 800041e:	4924      	ldr	r1, [pc, #144]	@ (80004b0 <DCMotor_SetSpeed+0xdc>)
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	4613      	mov	r3, r2
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	440b      	add	r3, r1
 800042c:	3311      	adds	r3, #17
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d107      	bne.n	8000444 <DCMotor_SetSpeed+0x70>
 8000434:	4b21      	ldr	r3, [pc, #132]	@ (80004bc <DCMotor_SetSpeed+0xe8>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	491f      	ldr	r1, [pc, #124]	@ (80004b8 <DCMotor_SetSpeed+0xe4>)
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000440:	635a      	str	r2, [r3, #52]	@ 0x34
    		    break;
 8000442:	e02f      	b.n	80004a4 <DCMotor_SetSpeed+0xd0>
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 8000444:	491a      	ldr	r1, [pc, #104]	@ (80004b0 <DCMotor_SetSpeed+0xdc>)
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	4613      	mov	r3, r2
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	4413      	add	r3, r2
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	440b      	add	r3, r1
 8000452:	3311      	adds	r3, #17
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b04      	cmp	r3, #4
 8000458:	d107      	bne.n	800046a <DCMotor_SetSpeed+0x96>
 800045a:	4b18      	ldr	r3, [pc, #96]	@ (80004bc <DCMotor_SetSpeed+0xe8>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	4916      	ldr	r1, [pc, #88]	@ (80004b8 <DCMotor_SetSpeed+0xe4>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000466:	6393      	str	r3, [r2, #56]	@ 0x38
    		    break;
 8000468:	e01c      	b.n	80004a4 <DCMotor_SetSpeed+0xd0>
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 800046a:	4911      	ldr	r1, [pc, #68]	@ (80004b0 <DCMotor_SetSpeed+0xdc>)
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	4613      	mov	r3, r2
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	4413      	add	r3, r2
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	440b      	add	r3, r1
 8000478:	3311      	adds	r3, #17
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b08      	cmp	r3, #8
 800047e:	d107      	bne.n	8000490 <DCMotor_SetSpeed+0xbc>
 8000480:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <DCMotor_SetSpeed+0xe8>)
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	490c      	ldr	r1, [pc, #48]	@ (80004b8 <DCMotor_SetSpeed+0xe4>)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800048c:	63d3      	str	r3, [r2, #60]	@ 0x3c
    		    break;
 800048e:	e009      	b.n	80004a4 <DCMotor_SetSpeed+0xd0>
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 8000490:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <DCMotor_SetSpeed+0xe8>)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	4908      	ldr	r1, [pc, #32]	@ (80004b8 <DCMotor_SetSpeed+0xe4>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800049c:	6413      	str	r3, [r2, #64]	@ 0x40
    		    break;
 800049e:	e001      	b.n	80004a4 <DCMotor_SetSpeed+0xd0>
    		/*case Timer_4:
    			Motor_Speed[Copy_u32DCMotor] = (MAX_SPEED*Copy_u32SpeedPercentage)/100;
    			__HAL_TIM_SET_COMPARE(&htim4,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 80004a0:	2301      	movs	r3, #1
 80004a2:	73fb      	strb	r3, [r7, #15]
    	}

    }
    return Ret_ErrorStatus;
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	080059cc 	.word	0x080059cc
 80004b4:	51eb851f 	.word	0x51eb851f
 80004b8:	20000000 	.word	0x20000000
 80004bc:	20000094 	.word	0x20000094

080004c0 <BL_ReadByteSync>:
#include "HAL/bluetooth.h"

volatile uint8_t Data[1] = {0};

uint8_t BL_ReadByteSync()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, Data, 1, 2);
 80004ca:	2302      	movs	r3, #2
 80004cc:	2201      	movs	r2, #1
 80004ce:	4914      	ldr	r1, [pc, #80]	@ (8000520 <BL_ReadByteSync+0x60>)
 80004d0:	4814      	ldr	r0, [pc, #80]	@ (8000524 <BL_ReadByteSync+0x64>)
 80004d2:	f002 fb77 	bl	8002bc4 <HAL_UART_Receive>
 80004d6:	4603      	mov	r3, r0
 80004d8:	71bb      	strb	r3, [r7, #6]
	    if (status == HAL_OK) {
 80004da:	79bb      	ldrb	r3, [r7, #6]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d102      	bne.n	80004e6 <BL_ReadByteSync+0x26>
	        temp = Data[0];
 80004e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <BL_ReadByteSync+0x60>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	71fb      	strb	r3, [r7, #7]
	    }

	if(temp == 'F')
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	2b46      	cmp	r3, #70	@ 0x46
 80004ea:	d105      	bne.n	80004f8 <BL_ReadByteSync+0x38>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004f2:	480d      	ldr	r0, [pc, #52]	@ (8000528 <BL_ReadByteSync+0x68>)
 80004f4:	f000 fef4 	bl	80012e0 <HAL_GPIO_WritePin>
	}

	if(Data[0] == 'B')
 80004f8:	4b09      	ldr	r3, [pc, #36]	@ (8000520 <BL_ReadByteSync+0x60>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	2b42      	cmp	r3, #66	@ 0x42
 8000500:	d105      	bne.n	800050e <BL_ReadByteSync+0x4e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000508:	4807      	ldr	r0, [pc, #28]	@ (8000528 <BL_ReadByteSync+0x68>)
 800050a:	f000 fee9 	bl	80012e0 <HAL_GPIO_WritePin>
	}

	Data[0] = 0;
 800050e:	4b04      	ldr	r3, [pc, #16]	@ (8000520 <BL_ReadByteSync+0x60>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
	return temp;
 8000514:	79fb      	ldrb	r3, [r7, #7]
}
 8000516:	4618      	mov	r0, r3
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000044 	.word	0x20000044
 8000524:	200000dc 	.word	0x200000dc
 8000528:	40011000 	.word	0x40011000

0800052c <get_data_task>:


struct CarState CarInfo = {0, forward, 0, idle};

void get_data_task(void * pvParameters)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	//uint8_t Data = 0;
	while(1)
	{
		CarInfo.DriverInput = BL_ReadByteSync();
 8000534:	f7ff ffc4 	bl	80004c0 <BL_ReadByteSync>
 8000538:	4603      	mov	r3, r0
 800053a:	461a      	mov	r2, r3
 800053c:	4b03      	ldr	r3, [pc, #12]	@ (800054c <get_data_task+0x20>)
 800053e:	701a      	strb	r2, [r3, #0]
		//HAL_USART_Receive(&husart1, &Data, 1, 1);
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		vTaskDelay(pdMS_TO_TICKS(10));
 8000540:	200a      	movs	r0, #10
 8000542:	f003 fd7f 	bl	8004044 <vTaskDelay>
		CarInfo.DriverInput = BL_ReadByteSync();
 8000546:	bf00      	nop
 8000548:	e7f4      	b.n	8000534 <get_data_task+0x8>
 800054a:	bf00      	nop
 800054c:	20000008 	.word	0x20000008

08000550 <drive_task>:
	}
}

void drive_task(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
	int steer_counter = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]

	//DCMotorInit();
	//DCMotor_Start(DRIVING_MOTOR);
	DCMotor_SetSpeed(STEERING_MOTOR, 50);
 800055a:	2132      	movs	r1, #50	@ 0x32
 800055c:	2001      	movs	r0, #1
 800055e:	f7ff ff39 	bl	80003d4 <DCMotor_SetSpeed>

	while(1)
	{
		switch(CarInfo.DriverInput)
 8000562:	4b6f      	ldr	r3, [pc, #444]	@ (8000720 <drive_task+0x1d0>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2bff      	cmp	r3, #255	@ 0xff
 8000568:	d075      	beq.n	8000656 <drive_task+0x106>
 800056a:	2bff      	cmp	r3, #255	@ 0xff
 800056c:	f300 80d0 	bgt.w	8000710 <drive_task+0x1c0>
 8000570:	2b39      	cmp	r3, #57	@ 0x39
 8000572:	dc6b      	bgt.n	800064c <drive_task+0xfc>
 8000574:	2b30      	cmp	r3, #48	@ 0x30
 8000576:	f280 80b2 	bge.w	80006de <drive_task+0x18e>
			DCMotor_Stop(DRIVING_MOTOR);
			DCMotor_Stop(STEERING_MOTOR);
			CarInfo.DriverInput=idle;
			break;

		default: break;
 800057a:	e0c9      	b.n	8000710 <drive_task+0x1c0>
		switch(CarInfo.DriverInput)
 800057c:	3b42      	subs	r3, #66	@ 0x42
 800057e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000580:	f200 80c6 	bhi.w	8000710 <drive_task+0x1c0>
 8000584:	a201      	add	r2, pc, #4	@ (adr r2, 800058c <drive_task+0x3c>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	0800068d 	.word	0x0800068d
 8000590:	08000711 	.word	0x08000711
 8000594:	08000711 	.word	0x08000711
 8000598:	08000711 	.word	0x08000711
 800059c:	08000669 	.word	0x08000669
 80005a0:	08000711 	.word	0x08000711
 80005a4:	08000711 	.word	0x08000711
 80005a8:	08000711 	.word	0x08000711
 80005ac:	08000711 	.word	0x08000711
 80005b0:	08000711 	.word	0x08000711
 80005b4:	080006c5 	.word	0x080006c5
 80005b8:	08000711 	.word	0x08000711
 80005bc:	08000711 	.word	0x08000711
 80005c0:	08000711 	.word	0x08000711
 80005c4:	08000711 	.word	0x08000711
 80005c8:	08000711 	.word	0x08000711
 80005cc:	080006b1 	.word	0x080006b1
 80005d0:	080006fd 	.word	0x080006fd
 80005d4:	08000711 	.word	0x08000711
 80005d8:	08000711 	.word	0x08000711
 80005dc:	08000711 	.word	0x08000711
 80005e0:	08000711 	.word	0x08000711
 80005e4:	08000711 	.word	0x08000711
 80005e8:	08000711 	.word	0x08000711
 80005ec:	08000711 	.word	0x08000711
 80005f0:	08000711 	.word	0x08000711
 80005f4:	08000711 	.word	0x08000711
 80005f8:	08000711 	.word	0x08000711
 80005fc:	08000711 	.word	0x08000711
 8000600:	08000711 	.word	0x08000711
 8000604:	08000711 	.word	0x08000711
 8000608:	08000711 	.word	0x08000711
 800060c:	08000711 	.word	0x08000711
 8000610:	08000711 	.word	0x08000711
 8000614:	08000711 	.word	0x08000711
 8000618:	08000711 	.word	0x08000711
 800061c:	08000711 	.word	0x08000711
 8000620:	08000711 	.word	0x08000711
 8000624:	08000711 	.word	0x08000711
 8000628:	08000711 	.word	0x08000711
 800062c:	08000711 	.word	0x08000711
 8000630:	08000711 	.word	0x08000711
 8000634:	08000711 	.word	0x08000711
 8000638:	08000711 	.word	0x08000711
 800063c:	08000711 	.word	0x08000711
 8000640:	08000711 	.word	0x08000711
 8000644:	08000711 	.word	0x08000711
 8000648:	080006d9 	.word	0x080006d9
 800064c:	2b71      	cmp	r3, #113	@ 0x71
 800064e:	dc5f      	bgt.n	8000710 <drive_task+0x1c0>
 8000650:	2b42      	cmp	r3, #66	@ 0x42
 8000652:	da93      	bge.n	800057c <drive_task+0x2c>
		default: break;
 8000654:	e05c      	b.n	8000710 <drive_task+0x1c0>
			if(steer_counter > 0)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	dd5b      	ble.n	8000714 <drive_task+0x1c4>
				steer_counter = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
				DCMotor_Stop(STEERING_MOTOR);
 8000660:	2001      	movs	r0, #1
 8000662:	f7ff fde7 	bl	8000234 <DCMotor_Stop>
			break;
 8000666:	e055      	b.n	8000714 <drive_task+0x1c4>
			if((CarInfo.last_state == steer_right) || (CarInfo.last_state == steer_left))
 8000668:	4b2d      	ldr	r3, [pc, #180]	@ (8000720 <drive_task+0x1d0>)
 800066a:	7b1b      	ldrb	r3, [r3, #12]
 800066c:	2b52      	cmp	r3, #82	@ 0x52
 800066e:	d003      	beq.n	8000678 <drive_task+0x128>
 8000670:	4b2b      	ldr	r3, [pc, #172]	@ (8000720 <drive_task+0x1d0>)
 8000672:	7b1b      	ldrb	r3, [r3, #12]
 8000674:	2b4c      	cmp	r3, #76	@ 0x4c
 8000676:	d102      	bne.n	800067e <drive_task+0x12e>
				DCMotor_Stop(STEERING_MOTOR);
 8000678:	2001      	movs	r0, #1
 800067a:	f7ff fddb 	bl	8000234 <DCMotor_Stop>
			DCMotor_Start(DRIVING_MOTOR);
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff fd66 	bl	8000150 <DCMotor_Start>
			CarInfo.DriverInput = idle;
 8000684:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <drive_task+0x1d0>)
 8000686:	22ff      	movs	r2, #255	@ 0xff
 8000688:	701a      	strb	r2, [r3, #0]
			break;
 800068a:	e044      	b.n	8000716 <drive_task+0x1c6>
			if((CarInfo.last_state == steer_right) || (CarInfo.last_state == steer_left))
 800068c:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <drive_task+0x1d0>)
 800068e:	7b1b      	ldrb	r3, [r3, #12]
 8000690:	2b52      	cmp	r3, #82	@ 0x52
 8000692:	d003      	beq.n	800069c <drive_task+0x14c>
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <drive_task+0x1d0>)
 8000696:	7b1b      	ldrb	r3, [r3, #12]
 8000698:	2b4c      	cmp	r3, #76	@ 0x4c
 800069a:	d102      	bne.n	80006a2 <drive_task+0x152>
				DCMotor_Stop(STEERING_MOTOR);
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff fdc9 	bl	8000234 <DCMotor_Stop>
			DCMotor_StartReverse(DRIVING_MOTOR);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff fdf6 	bl	8000294 <DCMotor_StartReverse>
			CarInfo.DriverInput = idle;
 80006a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <drive_task+0x1d0>)
 80006aa:	22ff      	movs	r2, #255	@ 0xff
 80006ac:	701a      	strb	r2, [r3, #0]
			break;
 80006ae:	e032      	b.n	8000716 <drive_task+0x1c6>
			DCMotor_StartReverse(STEERING_MOTOR);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f7ff fdef 	bl	8000294 <DCMotor_StartReverse>
			steer_counter++;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3301      	adds	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
			CarInfo.DriverInput=idle;
 80006bc:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <drive_task+0x1d0>)
 80006be:	22ff      	movs	r2, #255	@ 0xff
 80006c0:	701a      	strb	r2, [r3, #0]
			break;
 80006c2:	e028      	b.n	8000716 <drive_task+0x1c6>
			DCMotor_Start(STEERING_MOTOR);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff fd43 	bl	8000150 <DCMotor_Start>
			steer_counter++;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3301      	adds	r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
			CarInfo.DriverInput=idle;
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <drive_task+0x1d0>)
 80006d2:	22ff      	movs	r2, #255	@ 0xff
 80006d4:	701a      	strb	r2, [r3, #0]
			break;
 80006d6:	e01e      	b.n	8000716 <drive_task+0x1c6>
		case speed_100: CarInfo.DriverInput = 100;
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <drive_task+0x1d0>)
 80006da:	2264      	movs	r2, #100	@ 0x64
 80006dc:	701a      	strb	r2, [r3, #0]
			DCMotor_SetSpeed(DRIVING_MOTOR, CarInfo.DriverInput);
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <drive_task+0x1d0>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	4619      	mov	r1, r3
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff fe75 	bl	80003d4 <DCMotor_SetSpeed>
			CarInfo.speed = CarInfo.DriverInput;
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <drive_task+0x1d0>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <drive_task+0x1d0>)
 80006f2:	609a      	str	r2, [r3, #8]
			CarInfo.DriverInput=idle;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <drive_task+0x1d0>)
 80006f6:	22ff      	movs	r2, #255	@ 0xff
 80006f8:	701a      	strb	r2, [r3, #0]
			break;
 80006fa:	e00c      	b.n	8000716 <drive_task+0x1c6>
			DCMotor_Stop(DRIVING_MOTOR);
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff fd99 	bl	8000234 <DCMotor_Stop>
			DCMotor_Stop(STEERING_MOTOR);
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff fd96 	bl	8000234 <DCMotor_Stop>
			CarInfo.DriverInput=idle;
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <drive_task+0x1d0>)
 800070a:	22ff      	movs	r2, #255	@ 0xff
 800070c:	701a      	strb	r2, [r3, #0]
			break;
 800070e:	e002      	b.n	8000716 <drive_task+0x1c6>
		default: break;
 8000710:	bf00      	nop
 8000712:	e000      	b.n	8000716 <drive_task+0x1c6>
			break;
 8000714:	bf00      	nop
		}

		vTaskDelay(pdMS_TO_TICKS(2));
 8000716:	2002      	movs	r0, #2
 8000718:	f003 fc94 	bl	8004044 <vTaskDelay>
		switch(CarInfo.DriverInput)
 800071c:	e721      	b.n	8000562 <drive_task+0x12>
 800071e:	bf00      	nop
 8000720:	20000008 	.word	0x20000008

08000724 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000728:	4a04      	ldr	r2, [pc, #16]	@ (800073c <MX_FREERTOS_Init+0x18>)
 800072a:	2100      	movs	r1, #0
 800072c:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_FREERTOS_Init+0x1c>)
 800072e:	f002 fc3d 	bl	8002fac <osThreadNew>
 8000732:	4603      	mov	r3, r0
 8000734:	4a03      	ldr	r2, [pc, #12]	@ (8000744 <MX_FREERTOS_Init+0x20>)
 8000736:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	080059f4 	.word	0x080059f4
 8000740:	08000749 	.word	0x08000749
 8000744:	20000048 	.word	0x20000048

08000748 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f002 fcd5 	bl	8003100 <osDelay>
 8000756:	e7fb      	b.n	8000750 <StartDefaultTask+0x8>

08000758 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076c:	4b21      	ldr	r3, [pc, #132]	@ (80007f4 <MX_GPIO_Init+0x9c>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a20      	ldr	r2, [pc, #128]	@ (80007f4 <MX_GPIO_Init+0x9c>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b1e      	ldr	r3, [pc, #120]	@ (80007f4 <MX_GPIO_Init+0x9c>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0310 	and.w	r3, r3, #16
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000784:	4b1b      	ldr	r3, [pc, #108]	@ (80007f4 <MX_GPIO_Init+0x9c>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a1a      	ldr	r2, [pc, #104]	@ (80007f4 <MX_GPIO_Init+0x9c>)
 800078a:	f043 0304 	orr.w	r3, r3, #4
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <MX_GPIO_Init+0x9c>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a2:	4815      	ldr	r0, [pc, #84]	@ (80007f8 <MX_GPIO_Init+0xa0>)
 80007a4:	f000 fd9c 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	211e      	movs	r1, #30
 80007ac:	4813      	ldr	r0, [pc, #76]	@ (80007fc <MX_GPIO_Init+0xa4>)
 80007ae:	f000 fd97 	bl	80012e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2302      	movs	r3, #2
 80007c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	4619      	mov	r1, r3
 80007ca:	480b      	ldr	r0, [pc, #44]	@ (80007f8 <MX_GPIO_Init+0xa0>)
 80007cc:	f000 fc04 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80007d0:	231e      	movs	r3, #30
 80007d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2302      	movs	r3, #2
 80007de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	4619      	mov	r1, r3
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_GPIO_Init+0xa4>)
 80007e8:	f000 fbf6 	bl	8000fd8 <HAL_GPIO_Init>

}
 80007ec:	bf00      	nop
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40011000 	.word	0x40011000
 80007fc:	40010800 	.word	0x40010800

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000806:	f000 fad5 	bl	8000db4 <HAL_Init>

  /* USER CODE BEGIN Init */
  xTaskCreate(drive_task, "Driving Task", 100, ( void * ) 1, 3, NULL);
 800080a:	2300      	movs	r3, #0
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	2303      	movs	r3, #3
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2301      	movs	r3, #1
 8000814:	2264      	movs	r2, #100	@ 0x64
 8000816:	491e      	ldr	r1, [pc, #120]	@ (8000890 <main+0x90>)
 8000818:	481e      	ldr	r0, [pc, #120]	@ (8000894 <main+0x94>)
 800081a:	f003 fad6 	bl	8003dca <xTaskCreate>
  xTaskCreate(get_data_task, "Bluetooth Task", 100, ( void * ) 1, 2, NULL);
 800081e:	2300      	movs	r3, #0
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	2302      	movs	r3, #2
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2301      	movs	r3, #1
 8000828:	2264      	movs	r2, #100	@ 0x64
 800082a:	491b      	ldr	r1, [pc, #108]	@ (8000898 <main+0x98>)
 800082c:	481b      	ldr	r0, [pc, #108]	@ (800089c <main+0x9c>)
 800082e:	f003 facc 	bl	8003dca <xTaskCreate>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f835 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f7ff ff8f 	bl	8000758 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800083a:	f000 fa1f 	bl	8000c7c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800083e:	f000 f957 	bl	8000af0 <MX_TIM3_Init>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000842:	f002 fb4d 	bl	8002ee0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000846:	f7ff ff6d 	bl	8000724 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800084a:	f002 fb7b 	bl	8002f44 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TIM2->CCR2 = 5000;
 800084e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000856:	639a      	str	r2, [r3, #56]	@ 0x38
	  for(int i=0; i<30000; i++);
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	e002      	b.n	8000864 <main+0x64>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3301      	adds	r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f247 522f 	movw	r2, #29999	@ 0x752f
 800086a:	4293      	cmp	r3, r2
 800086c:	ddf7      	ble.n	800085e <main+0x5e>
	  TIM2->CCR2 = 10000;
 800086e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000872:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000876:	639a      	str	r2, [r3, #56]	@ 0x38
	  for(int i=0; i<30000; i++);
 8000878:	2300      	movs	r3, #0
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	e002      	b.n	8000884 <main+0x84>
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	f247 522f 	movw	r2, #29999	@ 0x752f
 800088a:	4293      	cmp	r3, r2
 800088c:	ddf7      	ble.n	800087e <main+0x7e>
	  TIM2->CCR2 = 5000;
 800088e:	e7de      	b.n	800084e <main+0x4e>
 8000890:	08005994 	.word	0x08005994
 8000894:	08000551 	.word	0x08000551
 8000898:	080059a4 	.word	0x080059a4
 800089c:	0800052d 	.word	0x0800052d

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b090      	sub	sp, #64	@ 0x40
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	2228      	movs	r2, #40	@ 0x28
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f005 f824 	bl	80058fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c6:	2301      	movs	r3, #1
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ca:	2310      	movs	r3, #16
 80008cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 0318 	add.w	r3, r7, #24
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fd1a 	bl	8001310 <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008e2:	f000 f82b 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	230f      	movs	r3, #15
 80008e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 ff88 	bl	8001814 <HAL_RCC_ClockConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800090a:	f000 f817 	bl	800093c <Error_Handler>
  }
}
 800090e:	bf00      	nop
 8000910:	3740      	adds	r7, #64	@ 0x40
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d101      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092a:	f000 fa59 	bl	8000de0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40012c00 	.word	0x40012c00

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <Error_Handler+0x8>

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800094e:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <HAL_MspInit+0x68>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a17      	ldr	r2, [pc, #92]	@ (80009b0 <HAL_MspInit+0x68>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <HAL_MspInit+0x68>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <HAL_MspInit+0x68>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	4a11      	ldr	r2, [pc, #68]	@ (80009b0 <HAL_MspInit+0x68>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000970:	61d3      	str	r3, [r2, #28]
 8000972:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <HAL_MspInit+0x68>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	210f      	movs	r1, #15
 8000982:	f06f 0001 	mvn.w	r0, #1
 8000986:	f000 fafc 	bl	8000f82 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800098a:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <HAL_MspInit+0x6c>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <HAL_MspInit+0x6c>)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40010000 	.word	0x40010000

080009b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	@ 0x30
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000a88 <HAL_InitTick+0xd0>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	4a2d      	ldr	r2, [pc, #180]	@ (8000a88 <HAL_InitTick+0xd0>)
 80009d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009d8:	6193      	str	r3, [r2, #24]
 80009da:	4b2b      	ldr	r3, [pc, #172]	@ (8000a88 <HAL_InitTick+0xd0>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e6:	f107 020c 	add.w	r2, r7, #12
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 f87f 	bl	8001af4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009f6:	f001 f869 	bl	8001acc <HAL_RCC_GetPCLK2Freq>
 80009fa:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009fe:	4a23      	ldr	r2, [pc, #140]	@ (8000a8c <HAL_InitTick+0xd4>)
 8000a00:	fba2 2303 	umull	r2, r3, r2, r3
 8000a04:	0c9b      	lsrs	r3, r3, #18
 8000a06:	3b01      	subs	r3, #1
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a0c:	4a21      	ldr	r2, [pc, #132]	@ (8000a94 <HAL_InitTick+0xdc>)
 8000a0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a12:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a16:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a18:	4a1d      	ldr	r2, [pc, #116]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a1c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a30:	4817      	ldr	r0, [pc, #92]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a32:	f001 f8ad 	bl	8001b90 <HAL_TIM_Base_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d11b      	bne.n	8000a7c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a44:	4812      	ldr	r0, [pc, #72]	@ (8000a90 <HAL_InitTick+0xd8>)
 8000a46:	f001 f8f3 	bl	8001c30 <HAL_TIM_Base_Start_IT>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d111      	bne.n	8000a7c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a58:	2019      	movs	r0, #25
 8000a5a:	f000 faae 	bl	8000fba <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d808      	bhi.n	8000a76 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	2019      	movs	r0, #25
 8000a6a:	f000 fa8a 	bl	8000f82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <HAL_InitTick+0xe0>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	e002      	b.n	8000a7c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3730      	adds	r7, #48	@ 0x30
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	431bde83 	.word	0x431bde83
 8000a90:	2000004c 	.word	0x2000004c
 8000a94:	40012c00 	.word	0x40012c00
 8000a98:	2000001c 	.word	0x2000001c

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ad4:	4802      	ldr	r0, [pc, #8]	@ (8000ae0 <TIM1_UP_IRQHandler+0x10>)
 8000ad6:	f001 fa5b 	bl	8001f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000004c 	.word	0x2000004c

08000ae4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08e      	sub	sp, #56	@ 0x38
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b04:	f107 0320 	add.w	r3, r7, #32
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b20:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd4 <MX_TIM3_Init+0xe4>)
 8000b22:	4a2d      	ldr	r2, [pc, #180]	@ (8000bd8 <MX_TIM3_Init+0xe8>)
 8000b24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000b26:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd4 <MX_TIM3_Init+0xe4>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2c:	4b29      	ldr	r3, [pc, #164]	@ (8000bd4 <MX_TIM3_Init+0xe4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000b32:	4b28      	ldr	r3, [pc, #160]	@ (8000bd4 <MX_TIM3_Init+0xe4>)
 8000b34:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000b38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3a:	4b26      	ldr	r3, [pc, #152]	@ (8000bd4 <MX_TIM3_Init+0xe4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b40:	4b24      	ldr	r3, [pc, #144]	@ (8000bd4 <MX_TIM3_Init+0xe4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b46:	4823      	ldr	r0, [pc, #140]	@ (8000bd4 <MX_TIM3_Init+0xe4>)
 8000b48:	f001 f822 	bl	8001b90 <HAL_TIM_Base_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b52:	f7ff fef3 	bl	800093c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b60:	4619      	mov	r1, r3
 8000b62:	481c      	ldr	r0, [pc, #112]	@ (8000bd4 <MX_TIM3_Init+0xe4>)
 8000b64:	f001 fbde 	bl	8002324 <HAL_TIM_ConfigClockSource>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b6e:	f7ff fee5 	bl	800093c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b72:	4818      	ldr	r0, [pc, #96]	@ (8000bd4 <MX_TIM3_Init+0xe4>)
 8000b74:	f001 f8ae 	bl	8001cd4 <HAL_TIM_PWM_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b7e:	f7ff fedd 	bl	800093c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b8a:	f107 0320 	add.w	r3, r7, #32
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4810      	ldr	r0, [pc, #64]	@ (8000bd4 <MX_TIM3_Init+0xe4>)
 8000b92:	f001 ff57 	bl	8002a44 <HAL_TIMEx_MasterConfigSynchronization>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b9c:	f7ff fece 	bl	800093c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba0:	2360      	movs	r3, #96	@ 0x60
 8000ba2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4807      	ldr	r0, [pc, #28]	@ (8000bd4 <MX_TIM3_Init+0xe4>)
 8000bb8:	f001 faf2 	bl	80021a0 <HAL_TIM_PWM_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000bc2:	f7ff febb 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bc6:	4803      	ldr	r0, [pc, #12]	@ (8000bd4 <MX_TIM3_Init+0xe4>)
 8000bc8:	f000 f826 	bl	8000c18 <HAL_TIM_MspPostInit>

}
 8000bcc:	bf00      	nop
 8000bce:	3738      	adds	r7, #56	@ 0x38
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000094 	.word	0x20000094
 8000bd8:	40000400 	.word	0x40000400

08000bdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a09      	ldr	r2, [pc, #36]	@ (8000c10 <HAL_TIM_Base_MspInit+0x34>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d10b      	bne.n	8000c06 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <HAL_TIM_Base_MspInit+0x38>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	4a08      	ldr	r2, [pc, #32]	@ (8000c14 <HAL_TIM_Base_MspInit+0x38>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	61d3      	str	r3, [r2, #28]
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_TIM_Base_MspInit+0x38>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	40000400 	.word	0x40000400
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a0f      	ldr	r2, [pc, #60]	@ (8000c70 <HAL_TIM_MspPostInit+0x58>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d117      	bne.n	8000c68 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c38:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <HAL_TIM_MspPostInit+0x5c>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c74 <HAL_TIM_MspPostInit+0x5c>)
 8000c3e:	f043 0304 	orr.w	r3, r3, #4
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <HAL_TIM_MspPostInit+0x5c>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c50:	2340      	movs	r3, #64	@ 0x40
 8000c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <HAL_TIM_MspPostInit+0x60>)
 8000c64:	f000 f9b8 	bl	8000fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40000400 	.word	0x40000400
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010800 	.word	0x40010800

08000c7c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c80:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	@ (8000ccc <MX_USART1_UART_Init+0x50>)
 8000c84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c86:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000c88:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000cb4:	f001 ff36 	bl	8002b24 <HAL_UART_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cbe:	f7ff fe3d 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200000dc 	.word	0x200000dc
 8000ccc:	40013800 	.word	0x40013800

08000cd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a1c      	ldr	r2, [pc, #112]	@ (8000d5c <HAL_UART_MspInit+0x8c>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d131      	bne.n	8000d54 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <HAL_UART_MspInit+0x90>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d60 <HAL_UART_MspInit+0x90>)
 8000cf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <HAL_UART_MspInit+0x90>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <HAL_UART_MspInit+0x90>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a14      	ldr	r2, [pc, #80]	@ (8000d60 <HAL_UART_MspInit+0x90>)
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <HAL_UART_MspInit+0x90>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0304 	and.w	r3, r3, #4
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	4619      	mov	r1, r3
 8000d34:	480b      	ldr	r0, [pc, #44]	@ (8000d64 <HAL_UART_MspInit+0x94>)
 8000d36:	f000 f94f 	bl	8000fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <HAL_UART_MspInit+0x94>)
 8000d50:	f000 f942 	bl	8000fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3720      	adds	r7, #32
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40013800 	.word	0x40013800
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010800 	.word	0x40010800

08000d68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d68:	f7ff febc 	bl	8000ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	480b      	ldr	r0, [pc, #44]	@ (8000d9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d6e:	490c      	ldr	r1, [pc, #48]	@ (8000da0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d70:	4a0c      	ldr	r2, [pc, #48]	@ (8000da4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a09      	ldr	r2, [pc, #36]	@ (8000da8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d84:	4c09      	ldr	r4, [pc, #36]	@ (8000dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f004 fdbb 	bl	800590c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d96:	f7ff fd33 	bl	8000800 <main>
  bx lr
 8000d9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000da4:	08005a4c 	.word	0x08005a4c
  ldr r2, =_sbss
 8000da8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000dac:	20001a70 	.word	0x20001a70

08000db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC1_2_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <HAL_Init+0x28>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	@ (8000ddc <HAL_Init+0x28>)
 8000dbe:	f043 0310 	orr.w	r3, r3, #16
 8000dc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f000 f8d1 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dca:	200f      	movs	r0, #15
 8000dcc:	f7ff fdf4 	bl	80009b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd0:	f7ff fdba 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40022000 	.word	0x40022000

08000de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <HAL_IncTick+0x1c>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <HAL_IncTick+0x20>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a03      	ldr	r2, [pc, #12]	@ (8000e00 <HAL_IncTick+0x20>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	20000020 	.word	0x20000020
 8000e00:	20000124 	.word	0x20000124

08000e04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b02      	ldr	r3, [pc, #8]	@ (8000e14 <HAL_GetTick+0x10>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	20000124 	.word	0x20000124

08000e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	@ (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	db0b      	blt.n	8000ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	f003 021f 	and.w	r2, r3, #31
 8000e94:	4906      	ldr	r1, [pc, #24]	@ (8000eb0 <__NVIC_EnableIRQ+0x34>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	095b      	lsrs	r3, r3, #5
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	@ (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	@ (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	@ 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
         );
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	@ 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff4f 	bl	8000e18 <__NVIC_SetPriorityGrouping>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f94:	f7ff ff64 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 8000f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff ffb2 	bl	8000f08 <NVIC_EncodePriority>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff81 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff57 	bl	8000e7c <__NVIC_EnableIRQ>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b08b      	sub	sp, #44	@ 0x2c
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fea:	e169      	b.n	80012c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fec:	2201      	movs	r2, #1
 8000fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 8158 	bne.w	80012ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	4a9a      	ldr	r2, [pc, #616]	@ (8001278 <HAL_GPIO_Init+0x2a0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d05e      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
 8001014:	4a98      	ldr	r2, [pc, #608]	@ (8001278 <HAL_GPIO_Init+0x2a0>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d875      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 800101a:	4a98      	ldr	r2, [pc, #608]	@ (800127c <HAL_GPIO_Init+0x2a4>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d058      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
 8001020:	4a96      	ldr	r2, [pc, #600]	@ (800127c <HAL_GPIO_Init+0x2a4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d86f      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 8001026:	4a96      	ldr	r2, [pc, #600]	@ (8001280 <HAL_GPIO_Init+0x2a8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d052      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
 800102c:	4a94      	ldr	r2, [pc, #592]	@ (8001280 <HAL_GPIO_Init+0x2a8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d869      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 8001032:	4a94      	ldr	r2, [pc, #592]	@ (8001284 <HAL_GPIO_Init+0x2ac>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d04c      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
 8001038:	4a92      	ldr	r2, [pc, #584]	@ (8001284 <HAL_GPIO_Init+0x2ac>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d863      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 800103e:	4a92      	ldr	r2, [pc, #584]	@ (8001288 <HAL_GPIO_Init+0x2b0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d046      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
 8001044:	4a90      	ldr	r2, [pc, #576]	@ (8001288 <HAL_GPIO_Init+0x2b0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d85d      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 800104a:	2b12      	cmp	r3, #18
 800104c:	d82a      	bhi.n	80010a4 <HAL_GPIO_Init+0xcc>
 800104e:	2b12      	cmp	r3, #18
 8001050:	d859      	bhi.n	8001106 <HAL_GPIO_Init+0x12e>
 8001052:	a201      	add	r2, pc, #4	@ (adr r2, 8001058 <HAL_GPIO_Init+0x80>)
 8001054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001058:	080010d3 	.word	0x080010d3
 800105c:	080010ad 	.word	0x080010ad
 8001060:	080010bf 	.word	0x080010bf
 8001064:	08001101 	.word	0x08001101
 8001068:	08001107 	.word	0x08001107
 800106c:	08001107 	.word	0x08001107
 8001070:	08001107 	.word	0x08001107
 8001074:	08001107 	.word	0x08001107
 8001078:	08001107 	.word	0x08001107
 800107c:	08001107 	.word	0x08001107
 8001080:	08001107 	.word	0x08001107
 8001084:	08001107 	.word	0x08001107
 8001088:	08001107 	.word	0x08001107
 800108c:	08001107 	.word	0x08001107
 8001090:	08001107 	.word	0x08001107
 8001094:	08001107 	.word	0x08001107
 8001098:	08001107 	.word	0x08001107
 800109c:	080010b5 	.word	0x080010b5
 80010a0:	080010c9 	.word	0x080010c9
 80010a4:	4a79      	ldr	r2, [pc, #484]	@ (800128c <HAL_GPIO_Init+0x2b4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010aa:	e02c      	b.n	8001106 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	623b      	str	r3, [r7, #32]
          break;
 80010b2:	e029      	b.n	8001108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	3304      	adds	r3, #4
 80010ba:	623b      	str	r3, [r7, #32]
          break;
 80010bc:	e024      	b.n	8001108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	3308      	adds	r3, #8
 80010c4:	623b      	str	r3, [r7, #32]
          break;
 80010c6:	e01f      	b.n	8001108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	330c      	adds	r3, #12
 80010ce:	623b      	str	r3, [r7, #32]
          break;
 80010d0:	e01a      	b.n	8001108 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d102      	bne.n	80010e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010da:	2304      	movs	r3, #4
 80010dc:	623b      	str	r3, [r7, #32]
          break;
 80010de:	e013      	b.n	8001108 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d105      	bne.n	80010f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010e8:	2308      	movs	r3, #8
 80010ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	611a      	str	r2, [r3, #16]
          break;
 80010f2:	e009      	b.n	8001108 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f4:	2308      	movs	r3, #8
 80010f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	615a      	str	r2, [r3, #20]
          break;
 80010fe:	e003      	b.n	8001108 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
          break;
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x130>
          break;
 8001106:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	2bff      	cmp	r3, #255	@ 0xff
 800110c:	d801      	bhi.n	8001112 <HAL_GPIO_Init+0x13a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	e001      	b.n	8001116 <HAL_GPIO_Init+0x13e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3304      	adds	r3, #4
 8001116:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	2bff      	cmp	r3, #255	@ 0xff
 800111c:	d802      	bhi.n	8001124 <HAL_GPIO_Init+0x14c>
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	e002      	b.n	800112a <HAL_GPIO_Init+0x152>
 8001124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001126:	3b08      	subs	r3, #8
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	210f      	movs	r1, #15
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	fa01 f303 	lsl.w	r3, r1, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	401a      	ands	r2, r3
 800113c:	6a39      	ldr	r1, [r7, #32]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	fa01 f303 	lsl.w	r3, r1, r3
 8001144:	431a      	orrs	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 80b1 	beq.w	80012ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001158:	4b4d      	ldr	r3, [pc, #308]	@ (8001290 <HAL_GPIO_Init+0x2b8>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a4c      	ldr	r2, [pc, #304]	@ (8001290 <HAL_GPIO_Init+0x2b8>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b4a      	ldr	r3, [pc, #296]	@ (8001290 <HAL_GPIO_Init+0x2b8>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001170:	4a48      	ldr	r2, [pc, #288]	@ (8001294 <HAL_GPIO_Init+0x2bc>)
 8001172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800117e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	4013      	ands	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a40      	ldr	r2, [pc, #256]	@ (8001298 <HAL_GPIO_Init+0x2c0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d013      	beq.n	80011c4 <HAL_GPIO_Init+0x1ec>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a3f      	ldr	r2, [pc, #252]	@ (800129c <HAL_GPIO_Init+0x2c4>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d00d      	beq.n	80011c0 <HAL_GPIO_Init+0x1e8>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a3e      	ldr	r2, [pc, #248]	@ (80012a0 <HAL_GPIO_Init+0x2c8>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d007      	beq.n	80011bc <HAL_GPIO_Init+0x1e4>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a3d      	ldr	r2, [pc, #244]	@ (80012a4 <HAL_GPIO_Init+0x2cc>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d101      	bne.n	80011b8 <HAL_GPIO_Init+0x1e0>
 80011b4:	2303      	movs	r3, #3
 80011b6:	e006      	b.n	80011c6 <HAL_GPIO_Init+0x1ee>
 80011b8:	2304      	movs	r3, #4
 80011ba:	e004      	b.n	80011c6 <HAL_GPIO_Init+0x1ee>
 80011bc:	2302      	movs	r3, #2
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_Init+0x1ee>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <HAL_GPIO_Init+0x1ee>
 80011c4:	2300      	movs	r3, #0
 80011c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011c8:	f002 0203 	and.w	r2, r2, #3
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	4093      	lsls	r3, r2
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011d6:	492f      	ldr	r1, [pc, #188]	@ (8001294 <HAL_GPIO_Init+0x2bc>)
 80011d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3302      	adds	r3, #2
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011f0:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <HAL_GPIO_Init+0x2d0>)
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	492c      	ldr	r1, [pc, #176]	@ (80012a8 <HAL_GPIO_Init+0x2d0>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	608b      	str	r3, [r1, #8]
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011fe:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	43db      	mvns	r3, r3
 8001206:	4928      	ldr	r1, [pc, #160]	@ (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001208:	4013      	ands	r3, r2
 800120a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d006      	beq.n	8001226 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001218:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <HAL_GPIO_Init+0x2d0>)
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	4922      	ldr	r1, [pc, #136]	@ (80012a8 <HAL_GPIO_Init+0x2d0>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	60cb      	str	r3, [r1, #12]
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001226:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	43db      	mvns	r3, r3
 800122e:	491e      	ldr	r1, [pc, #120]	@ (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001230:	4013      	ands	r3, r2
 8001232:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	4918      	ldr	r1, [pc, #96]	@ (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	604b      	str	r3, [r1, #4]
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	43db      	mvns	r3, r3
 8001256:	4914      	ldr	r1, [pc, #80]	@ (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001258:	4013      	ands	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d021      	beq.n	80012ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <HAL_GPIO_Init+0x2d0>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	490e      	ldr	r1, [pc, #56]	@ (80012a8 <HAL_GPIO_Init+0x2d0>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	600b      	str	r3, [r1, #0]
 8001274:	e021      	b.n	80012ba <HAL_GPIO_Init+0x2e2>
 8001276:	bf00      	nop
 8001278:	10320000 	.word	0x10320000
 800127c:	10310000 	.word	0x10310000
 8001280:	10220000 	.word	0x10220000
 8001284:	10210000 	.word	0x10210000
 8001288:	10120000 	.word	0x10120000
 800128c:	10110000 	.word	0x10110000
 8001290:	40021000 	.word	0x40021000
 8001294:	40010000 	.word	0x40010000
 8001298:	40010800 	.word	0x40010800
 800129c:	40010c00 	.word	0x40010c00
 80012a0:	40011000 	.word	0x40011000
 80012a4:	40011400 	.word	0x40011400
 80012a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012ac:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <HAL_GPIO_Init+0x304>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	4909      	ldr	r1, [pc, #36]	@ (80012dc <HAL_GPIO_Init+0x304>)
 80012b6:	4013      	ands	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012bc:	3301      	adds	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f47f ae8e 	bne.w	8000fec <HAL_GPIO_Init+0x14>
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	372c      	adds	r7, #44	@ 0x2c
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	40010400 	.word	0x40010400

080012e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
 80012ec:	4613      	mov	r3, r2
 80012ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012fc:	e003      	b.n	8001306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	041a      	lsls	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	611a      	str	r2, [r3, #16]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e272      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8087 	beq.w	800143e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001330:	4b92      	ldr	r3, [pc, #584]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b04      	cmp	r3, #4
 800133a:	d00c      	beq.n	8001356 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800133c:	4b8f      	ldr	r3, [pc, #572]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 030c 	and.w	r3, r3, #12
 8001344:	2b08      	cmp	r3, #8
 8001346:	d112      	bne.n	800136e <HAL_RCC_OscConfig+0x5e>
 8001348:	4b8c      	ldr	r3, [pc, #560]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001354:	d10b      	bne.n	800136e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001356:	4b89      	ldr	r3, [pc, #548]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d06c      	beq.n	800143c <HAL_RCC_OscConfig+0x12c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d168      	bne.n	800143c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e24c      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001376:	d106      	bne.n	8001386 <HAL_RCC_OscConfig+0x76>
 8001378:	4b80      	ldr	r3, [pc, #512]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a7f      	ldr	r2, [pc, #508]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 800137e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	e02e      	b.n	80013e4 <HAL_RCC_OscConfig+0xd4>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x98>
 800138e:	4b7b      	ldr	r3, [pc, #492]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a7a      	ldr	r2, [pc, #488]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 8001394:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b78      	ldr	r3, [pc, #480]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a77      	ldr	r2, [pc, #476]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 80013a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e01d      	b.n	80013e4 <HAL_RCC_OscConfig+0xd4>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0xbc>
 80013b2:	4b72      	ldr	r3, [pc, #456]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a71      	ldr	r2, [pc, #452]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 80013b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b6f      	ldr	r3, [pc, #444]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a6e      	ldr	r2, [pc, #440]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e00b      	b.n	80013e4 <HAL_RCC_OscConfig+0xd4>
 80013cc:	4b6b      	ldr	r3, [pc, #428]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a6a      	ldr	r2, [pc, #424]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 80013d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b68      	ldr	r3, [pc, #416]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a67      	ldr	r2, [pc, #412]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 80013de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d013      	beq.n	8001414 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fd0a 	bl	8000e04 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fd06 	bl	8000e04 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	@ 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e200      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	4b5d      	ldr	r3, [pc, #372]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0xe4>
 8001412:	e014      	b.n	800143e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fcf6 	bl	8000e04 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fcf2 	bl	8000e04 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	@ 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e1ec      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	4b53      	ldr	r3, [pc, #332]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x10c>
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d063      	beq.n	8001512 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800144a:	4b4c      	ldr	r3, [pc, #304]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00b      	beq.n	800146e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001456:	4b49      	ldr	r3, [pc, #292]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b08      	cmp	r3, #8
 8001460:	d11c      	bne.n	800149c <HAL_RCC_OscConfig+0x18c>
 8001462:	4b46      	ldr	r3, [pc, #280]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d116      	bne.n	800149c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146e:	4b43      	ldr	r3, [pc, #268]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <HAL_RCC_OscConfig+0x176>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d001      	beq.n	8001486 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e1c0      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001486:	4b3d      	ldr	r3, [pc, #244]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4939      	ldr	r1, [pc, #228]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149a:	e03a      	b.n	8001512 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d020      	beq.n	80014e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a4:	4b36      	ldr	r3, [pc, #216]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014aa:	f7ff fcab 	bl	8000e04 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b2:	f7ff fca7 	bl	8000e04 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e1a1      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	4b2d      	ldr	r3, [pc, #180]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d0:	4b2a      	ldr	r3, [pc, #168]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4927      	ldr	r1, [pc, #156]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	600b      	str	r3, [r1, #0]
 80014e4:	e015      	b.n	8001512 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e6:	4b26      	ldr	r3, [pc, #152]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fc8a 	bl	8000e04 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f4:	f7ff fc86 	bl	8000e04 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e180      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001506:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	d03a      	beq.n	8001594 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d019      	beq.n	800155a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001526:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <HAL_RCC_OscConfig+0x274>)
 8001528:	2201      	movs	r2, #1
 800152a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152c:	f7ff fc6a 	bl	8000e04 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001534:	f7ff fc66 	bl	8000e04 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e160      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001546:	4b0d      	ldr	r3, [pc, #52]	@ (800157c <HAL_RCC_OscConfig+0x26c>)
 8001548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001552:	2001      	movs	r0, #1
 8001554:	f000 fafe 	bl	8001b54 <RCC_Delay>
 8001558:	e01c      	b.n	8001594 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_RCC_OscConfig+0x274>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff fc50 	bl	8000e04 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001566:	e00f      	b.n	8001588 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff fc4c 	bl	8000e04 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d908      	bls.n	8001588 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e146      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000
 8001580:	42420000 	.word	0x42420000
 8001584:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001588:	4b92      	ldr	r3, [pc, #584]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1e9      	bne.n	8001568 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80a6 	beq.w	80016ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a6:	4b8b      	ldr	r3, [pc, #556]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10d      	bne.n	80015ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b88      	ldr	r3, [pc, #544]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a87      	ldr	r2, [pc, #540]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015bc:	61d3      	str	r3, [r2, #28]
 80015be:	4b85      	ldr	r3, [pc, #532]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ca:	2301      	movs	r3, #1
 80015cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ce:	4b82      	ldr	r3, [pc, #520]	@ (80017d8 <HAL_RCC_OscConfig+0x4c8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d118      	bne.n	800160c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015da:	4b7f      	ldr	r3, [pc, #508]	@ (80017d8 <HAL_RCC_OscConfig+0x4c8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a7e      	ldr	r2, [pc, #504]	@ (80017d8 <HAL_RCC_OscConfig+0x4c8>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fc0d 	bl	8000e04 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ee:	f7ff fc09 	bl	8000e04 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b64      	cmp	r3, #100	@ 0x64
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e103      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	4b75      	ldr	r3, [pc, #468]	@ (80017d8 <HAL_RCC_OscConfig+0x4c8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d106      	bne.n	8001622 <HAL_RCC_OscConfig+0x312>
 8001614:	4b6f      	ldr	r3, [pc, #444]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4a6e      	ldr	r2, [pc, #440]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6213      	str	r3, [r2, #32]
 8001620:	e02d      	b.n	800167e <HAL_RCC_OscConfig+0x36e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0x334>
 800162a:	4b6a      	ldr	r3, [pc, #424]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4a69      	ldr	r2, [pc, #420]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	6213      	str	r3, [r2, #32]
 8001636:	4b67      	ldr	r3, [pc, #412]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4a66      	ldr	r2, [pc, #408]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	f023 0304 	bic.w	r3, r3, #4
 8001640:	6213      	str	r3, [r2, #32]
 8001642:	e01c      	b.n	800167e <HAL_RCC_OscConfig+0x36e>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b05      	cmp	r3, #5
 800164a:	d10c      	bne.n	8001666 <HAL_RCC_OscConfig+0x356>
 800164c:	4b61      	ldr	r3, [pc, #388]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a60      	ldr	r2, [pc, #384]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	4b5e      	ldr	r3, [pc, #376]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a5d      	ldr	r2, [pc, #372]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6213      	str	r3, [r2, #32]
 8001664:	e00b      	b.n	800167e <HAL_RCC_OscConfig+0x36e>
 8001666:	4b5b      	ldr	r3, [pc, #364]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4a5a      	ldr	r2, [pc, #360]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	6213      	str	r3, [r2, #32]
 8001672:	4b58      	ldr	r3, [pc, #352]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	4a57      	ldr	r2, [pc, #348]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	f023 0304 	bic.w	r3, r3, #4
 800167c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d015      	beq.n	80016b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff fbbd 	bl	8000e04 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168c:	e00a      	b.n	80016a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7ff fbb9 	bl	8000e04 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e0b1      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a4:	4b4b      	ldr	r3, [pc, #300]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0ee      	beq.n	800168e <HAL_RCC_OscConfig+0x37e>
 80016b0:	e014      	b.n	80016dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b2:	f7ff fba7 	bl	8000e04 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b8:	e00a      	b.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ba:	f7ff fba3 	bl	8000e04 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e09b      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d0:	4b40      	ldr	r3, [pc, #256]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1ee      	bne.n	80016ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d105      	bne.n	80016ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e2:	4b3c      	ldr	r3, [pc, #240]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4a3b      	ldr	r2, [pc, #236]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8087 	beq.w	8001806 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f8:	4b36      	ldr	r3, [pc, #216]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 030c 	and.w	r3, r3, #12
 8001700:	2b08      	cmp	r3, #8
 8001702:	d061      	beq.n	80017c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d146      	bne.n	800179a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170c:	4b33      	ldr	r3, [pc, #204]	@ (80017dc <HAL_RCC_OscConfig+0x4cc>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001712:	f7ff fb77 	bl	8000e04 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171a:	f7ff fb73 	bl	8000e04 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e06d      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172c:	4b29      	ldr	r3, [pc, #164]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001740:	d108      	bne.n	8001754 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001742:	4b24      	ldr	r3, [pc, #144]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	4921      	ldr	r1, [pc, #132]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001754:	4b1f      	ldr	r3, [pc, #124]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a19      	ldr	r1, [r3, #32]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001764:	430b      	orrs	r3, r1
 8001766:	491b      	ldr	r1, [pc, #108]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800176c:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <HAL_RCC_OscConfig+0x4cc>)
 800176e:	2201      	movs	r2, #1
 8001770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7ff fb47 	bl	8000e04 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff fb43 	bl	8000e04 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e03d      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800178c:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x46a>
 8001798:	e035      	b.n	8001806 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <HAL_RCC_OscConfig+0x4cc>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff fb30 	bl	8000e04 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff fb2c 	bl	8000e04 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e026      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x498>
 80017c6:	e01e      	b.n	8001806 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d107      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e019      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40007000 	.word	0x40007000
 80017dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <HAL_RCC_OscConfig+0x500>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d001      	beq.n	8001806 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000

08001814 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0d0      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001828:	4b6a      	ldr	r3, [pc, #424]	@ (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d910      	bls.n	8001858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b67      	ldr	r3, [pc, #412]	@ (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 0207 	bic.w	r2, r3, #7
 800183e:	4965      	ldr	r1, [pc, #404]	@ (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b63      	ldr	r3, [pc, #396]	@ (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0b8      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d020      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001870:	4b59      	ldr	r3, [pc, #356]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a58      	ldr	r2, [pc, #352]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800187a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001888:	4b53      	ldr	r3, [pc, #332]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4a52      	ldr	r2, [pc, #328]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 800188e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001892:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001894:	4b50      	ldr	r3, [pc, #320]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	494d      	ldr	r1, [pc, #308]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d040      	beq.n	8001934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	4b47      	ldr	r3, [pc, #284]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d115      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e07f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d2:	4b41      	ldr	r3, [pc, #260]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d109      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e073      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e2:	4b3d      	ldr	r3, [pc, #244]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e06b      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f2:	4b39      	ldr	r3, [pc, #228]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f023 0203 	bic.w	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4936      	ldr	r1, [pc, #216]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001904:	f7ff fa7e 	bl	8000e04 <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	e00a      	b.n	8001922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190c:	f7ff fa7a 	bl	8000e04 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e053      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	4b2d      	ldr	r3, [pc, #180]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 020c 	and.w	r2, r3, #12
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	429a      	cmp	r2, r3
 8001932:	d1eb      	bne.n	800190c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001934:	4b27      	ldr	r3, [pc, #156]	@ (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d210      	bcs.n	8001964 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b24      	ldr	r3, [pc, #144]	@ (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 0207 	bic.w	r2, r3, #7
 800194a:	4922      	ldr	r1, [pc, #136]	@ (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e032      	b.n	80019ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001970:	4b19      	ldr	r3, [pc, #100]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4916      	ldr	r1, [pc, #88]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	4313      	orrs	r3, r2
 8001980:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d009      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800198e:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	490e      	ldr	r1, [pc, #56]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019a2:	f000 f821 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 80019a6:	4602      	mov	r2, r0
 80019a8:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	490a      	ldr	r1, [pc, #40]	@ (80019dc <HAL_RCC_ClockConfig+0x1c8>)
 80019b4:	5ccb      	ldrb	r3, [r1, r3]
 80019b6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ba:	4a09      	ldr	r2, [pc, #36]	@ (80019e0 <HAL_RCC_ClockConfig+0x1cc>)
 80019bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <HAL_RCC_ClockConfig+0x1d0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fff8 	bl	80009b8 <HAL_InitTick>

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40022000 	.word	0x40022000
 80019d8:	40021000 	.word	0x40021000
 80019dc:	08005a18 	.word	0x08005a18
 80019e0:	20000018 	.word	0x20000018
 80019e4:	2000001c 	.word	0x2000001c

080019e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <HAL_RCC_GetSysClockFreq+0x94>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d002      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x30>
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	d003      	beq.n	8001a1e <HAL_RCC_GetSysClockFreq+0x36>
 8001a16:	e027      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a18:	4b19      	ldr	r3, [pc, #100]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a1a:	613b      	str	r3, [r7, #16]
      break;
 8001a1c:	e027      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	0c9b      	lsrs	r3, r3, #18
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	4a17      	ldr	r2, [pc, #92]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a28:	5cd3      	ldrb	r3, [r2, r3]
 8001a2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d010      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a36:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <HAL_RCC_GetSysClockFreq+0x94>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	0c5b      	lsrs	r3, r3, #17
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	4a11      	ldr	r2, [pc, #68]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a42:	5cd3      	ldrb	r3, [r2, r3]
 8001a44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a0d      	ldr	r2, [pc, #52]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a4a:	fb03 f202 	mul.w	r2, r3, r2
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e004      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a5c:	fb02 f303 	mul.w	r3, r2, r3
 8001a60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	613b      	str	r3, [r7, #16]
      break;
 8001a66:	e002      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a68:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a6a:	613b      	str	r3, [r7, #16]
      break;
 8001a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a6e:	693b      	ldr	r3, [r7, #16]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	371c      	adds	r7, #28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	007a1200 	.word	0x007a1200
 8001a84:	08005a30 	.word	0x08005a30
 8001a88:	08005a40 	.word	0x08005a40
 8001a8c:	003d0900 	.word	0x003d0900

08001a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a94:	4b02      	ldr	r3, [pc, #8]	@ (8001aa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	20000018 	.word	0x20000018

08001aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001aa8:	f7ff fff2 	bl	8001a90 <HAL_RCC_GetHCLKFreq>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	4903      	ldr	r1, [pc, #12]	@ (8001ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	08005a28 	.word	0x08005a28

08001acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ad0:	f7ff ffde 	bl	8001a90 <HAL_RCC_GetHCLKFreq>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	0adb      	lsrs	r3, r3, #11
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	4903      	ldr	r1, [pc, #12]	@ (8001af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ae2:	5ccb      	ldrb	r3, [r1, r3]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000
 8001af0:	08005a28 	.word	0x08005a28

08001af4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	220f      	movs	r2, #15
 8001b02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_RCC_GetClockConfig+0x58>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0203 	and.w	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b10:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <HAL_RCC_GetClockConfig+0x58>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <HAL_RCC_GetClockConfig+0x58>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b28:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <HAL_RCC_GetClockConfig+0x58>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	08db      	lsrs	r3, r3, #3
 8001b2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_RCC_GetClockConfig+0x5c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0207 	and.w	r2, r3, #7
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40022000 	.word	0x40022000

08001b54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <RCC_Delay+0x34>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <RCC_Delay+0x38>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	0a5b      	lsrs	r3, r3, #9
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b70:	bf00      	nop
  }
  while (Delay --);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	60fa      	str	r2, [r7, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f9      	bne.n	8001b70 <RCC_Delay+0x1c>
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	20000018 	.word	0x20000018
 8001b8c:	10624dd3 	.word	0x10624dd3

08001b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e041      	b.n	8001c26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff f810 	bl	8000bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f000 fc94 	bl	80024fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d001      	beq.n	8001c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e03a      	b.n	8001cbe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a18      	ldr	r2, [pc, #96]	@ (8001cc8 <HAL_TIM_Base_Start_IT+0x98>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00e      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x58>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c72:	d009      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x58>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a14      	ldr	r2, [pc, #80]	@ (8001ccc <HAL_TIM_Base_Start_IT+0x9c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d004      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x58>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a13      	ldr	r2, [pc, #76]	@ (8001cd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d111      	bne.n	8001cac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d010      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0201 	orr.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001caa:	e007      	b.n	8001cbc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	40012c00 	.word	0x40012c00
 8001ccc:	40000400 	.word	0x40000400
 8001cd0:	40000800 	.word	0x40000800

08001cd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e041      	b.n	8001d6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f839 	bl	8001d72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3304      	adds	r3, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f000 fbf2 	bl	80024fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d109      	bne.n	8001da8 <HAL_TIM_PWM_Start+0x24>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	bf14      	ite	ne
 8001da0:	2301      	movne	r3, #1
 8001da2:	2300      	moveq	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	e022      	b.n	8001dee <HAL_TIM_PWM_Start+0x6a>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d109      	bne.n	8001dc2 <HAL_TIM_PWM_Start+0x3e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	bf14      	ite	ne
 8001dba:	2301      	movne	r3, #1
 8001dbc:	2300      	moveq	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	e015      	b.n	8001dee <HAL_TIM_PWM_Start+0x6a>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d109      	bne.n	8001ddc <HAL_TIM_PWM_Start+0x58>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	bf14      	ite	ne
 8001dd4:	2301      	movne	r3, #1
 8001dd6:	2300      	moveq	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	e008      	b.n	8001dee <HAL_TIM_PWM_Start+0x6a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e05e      	b.n	8001eb4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d104      	bne.n	8001e06 <HAL_TIM_PWM_Start+0x82>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e04:	e013      	b.n	8001e2e <HAL_TIM_PWM_Start+0xaa>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d104      	bne.n	8001e16 <HAL_TIM_PWM_Start+0x92>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e14:	e00b      	b.n	8001e2e <HAL_TIM_PWM_Start+0xaa>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d104      	bne.n	8001e26 <HAL_TIM_PWM_Start+0xa2>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e24:	e003      	b.n	8001e2e <HAL_TIM_PWM_Start+0xaa>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2201      	movs	r2, #1
 8001e34:	6839      	ldr	r1, [r7, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fde0 	bl	80029fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a1e      	ldr	r2, [pc, #120]	@ (8001ebc <HAL_TIM_PWM_Start+0x138>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d107      	bne.n	8001e56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a18      	ldr	r2, [pc, #96]	@ (8001ebc <HAL_TIM_PWM_Start+0x138>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00e      	beq.n	8001e7e <HAL_TIM_PWM_Start+0xfa>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e68:	d009      	beq.n	8001e7e <HAL_TIM_PWM_Start+0xfa>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a14      	ldr	r2, [pc, #80]	@ (8001ec0 <HAL_TIM_PWM_Start+0x13c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d004      	beq.n	8001e7e <HAL_TIM_PWM_Start+0xfa>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a12      	ldr	r2, [pc, #72]	@ (8001ec4 <HAL_TIM_PWM_Start+0x140>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d111      	bne.n	8001ea2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b06      	cmp	r3, #6
 8001e8e:	d010      	beq.n	8001eb2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea0:	e007      	b.n	8001eb2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0201 	orr.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40012c00 	.word	0x40012c00
 8001ec0:	40000400 	.word	0x40000400
 8001ec4:	40000800 	.word	0x40000800

08001ec8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	6839      	ldr	r1, [r7, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 fd8e 	bl	80029fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a29      	ldr	r2, [pc, #164]	@ (8001f8c <HAL_TIM_PWM_Stop+0xc4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d117      	bne.n	8001f1a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6a1a      	ldr	r2, [r3, #32]
 8001ef0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <HAL_TIM_PWM_Stop+0x52>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a1a      	ldr	r2, [r3, #32]
 8001f00:	f240 4344 	movw	r3, #1092	@ 0x444
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d107      	bne.n	8001f1a <HAL_TIM_PWM_Stop+0x52>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6a1a      	ldr	r2, [r3, #32]
 8001f20:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10f      	bne.n	8001f4a <HAL_TIM_PWM_Stop+0x82>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6a1a      	ldr	r2, [r3, #32]
 8001f30:	f240 4344 	movw	r3, #1092	@ 0x444
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d107      	bne.n	8001f4a <HAL_TIM_PWM_Stop+0x82>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0201 	bic.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d104      	bne.n	8001f5a <HAL_TIM_PWM_Stop+0x92>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f58:	e013      	b.n	8001f82 <HAL_TIM_PWM_Stop+0xba>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d104      	bne.n	8001f6a <HAL_TIM_PWM_Stop+0xa2>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f68:	e00b      	b.n	8001f82 <HAL_TIM_PWM_Stop+0xba>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d104      	bne.n	8001f7a <HAL_TIM_PWM_Stop+0xb2>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f78:	e003      	b.n	8001f82 <HAL_TIM_PWM_Stop+0xba>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40012c00 	.word	0x40012c00

08001f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d122      	bne.n	8001fec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d11b      	bne.n	8001fec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0202 	mvn.w	r2, #2
 8001fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fa76 	bl	80024c4 <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fa69 	bl	80024b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fa78 	bl	80024d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d122      	bne.n	8002040 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b04      	cmp	r3, #4
 8002006:	d11b      	bne.n	8002040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0204 	mvn.w	r2, #4
 8002010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2202      	movs	r2, #2
 8002016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fa4c 	bl	80024c4 <HAL_TIM_IC_CaptureCallback>
 800202c:	e005      	b.n	800203a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fa3f 	bl	80024b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 fa4e 	bl	80024d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b08      	cmp	r3, #8
 800204c:	d122      	bne.n	8002094 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b08      	cmp	r3, #8
 800205a:	d11b      	bne.n	8002094 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0208 	mvn.w	r2, #8
 8002064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2204      	movs	r2, #4
 800206a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 fa22 	bl	80024c4 <HAL_TIM_IC_CaptureCallback>
 8002080:	e005      	b.n	800208e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fa15 	bl	80024b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 fa24 	bl	80024d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d122      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	2b10      	cmp	r3, #16
 80020ae:	d11b      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0210 	mvn.w	r2, #16
 80020b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2208      	movs	r2, #8
 80020be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f9f8 	bl	80024c4 <HAL_TIM_IC_CaptureCallback>
 80020d4:	e005      	b.n	80020e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f9eb 	bl	80024b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f9fa 	bl	80024d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d10e      	bne.n	8002114 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d107      	bne.n	8002114 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0201 	mvn.w	r2, #1
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe fc02 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800211e:	2b80      	cmp	r3, #128	@ 0x80
 8002120:	d10e      	bne.n	8002140 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800212c:	2b80      	cmp	r3, #128	@ 0x80
 800212e:	d107      	bne.n	8002140 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fce9 	bl	8002b12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214a:	2b40      	cmp	r3, #64	@ 0x40
 800214c:	d10e      	bne.n	800216c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002158:	2b40      	cmp	r3, #64	@ 0x40
 800215a:	d107      	bne.n	800216c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f9be 	bl	80024e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	2b20      	cmp	r3, #32
 8002178:	d10e      	bne.n	8002198 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b20      	cmp	r3, #32
 8002186:	d107      	bne.n	8002198 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0220 	mvn.w	r2, #32
 8002190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fcb4 	bl	8002b00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e0ae      	b.n	800231c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b0c      	cmp	r3, #12
 80021ca:	f200 809f 	bhi.w	800230c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80021ce:	a201      	add	r2, pc, #4	@ (adr r2, 80021d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	08002209 	.word	0x08002209
 80021d8:	0800230d 	.word	0x0800230d
 80021dc:	0800230d 	.word	0x0800230d
 80021e0:	0800230d 	.word	0x0800230d
 80021e4:	08002249 	.word	0x08002249
 80021e8:	0800230d 	.word	0x0800230d
 80021ec:	0800230d 	.word	0x0800230d
 80021f0:	0800230d 	.word	0x0800230d
 80021f4:	0800228b 	.word	0x0800228b
 80021f8:	0800230d 	.word	0x0800230d
 80021fc:	0800230d 	.word	0x0800230d
 8002200:	0800230d 	.word	0x0800230d
 8002204:	080022cb 	.word	0x080022cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f9d6 	bl	80025c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0208 	orr.w	r2, r2, #8
 8002222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0204 	bic.w	r2, r2, #4
 8002232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6999      	ldr	r1, [r3, #24]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	619a      	str	r2, [r3, #24]
      break;
 8002246:	e064      	b.n	8002312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fa1c 	bl	800268c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6999      	ldr	r1, [r3, #24]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	021a      	lsls	r2, r3, #8
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	619a      	str	r2, [r3, #24]
      break;
 8002288:	e043      	b.n	8002312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68b9      	ldr	r1, [r7, #8]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fa65 	bl	8002760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	69da      	ldr	r2, [r3, #28]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0208 	orr.w	r2, r2, #8
 80022a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0204 	bic.w	r2, r2, #4
 80022b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	69d9      	ldr	r1, [r3, #28]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	61da      	str	r2, [r3, #28]
      break;
 80022c8:	e023      	b.n	8002312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 faaf 	bl	8002834 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69da      	ldr	r2, [r3, #28]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	69da      	ldr	r2, [r3, #28]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	69d9      	ldr	r1, [r3, #28]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	021a      	lsls	r2, r3, #8
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	61da      	str	r2, [r3, #28]
      break;
 800230a:	e002      	b.n	8002312 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	75fb      	strb	r3, [r7, #23]
      break;
 8002310:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800231a:	7dfb      	ldrb	r3, [r7, #23]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_TIM_ConfigClockSource+0x1c>
 800233c:	2302      	movs	r3, #2
 800233e:	e0b4      	b.n	80024aa <HAL_TIM_ConfigClockSource+0x186>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800235e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002378:	d03e      	beq.n	80023f8 <HAL_TIM_ConfigClockSource+0xd4>
 800237a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800237e:	f200 8087 	bhi.w	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 8002382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002386:	f000 8086 	beq.w	8002496 <HAL_TIM_ConfigClockSource+0x172>
 800238a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800238e:	d87f      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 8002390:	2b70      	cmp	r3, #112	@ 0x70
 8002392:	d01a      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0xa6>
 8002394:	2b70      	cmp	r3, #112	@ 0x70
 8002396:	d87b      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 8002398:	2b60      	cmp	r3, #96	@ 0x60
 800239a:	d050      	beq.n	800243e <HAL_TIM_ConfigClockSource+0x11a>
 800239c:	2b60      	cmp	r3, #96	@ 0x60
 800239e:	d877      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 80023a0:	2b50      	cmp	r3, #80	@ 0x50
 80023a2:	d03c      	beq.n	800241e <HAL_TIM_ConfigClockSource+0xfa>
 80023a4:	2b50      	cmp	r3, #80	@ 0x50
 80023a6:	d873      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 80023a8:	2b40      	cmp	r3, #64	@ 0x40
 80023aa:	d058      	beq.n	800245e <HAL_TIM_ConfigClockSource+0x13a>
 80023ac:	2b40      	cmp	r3, #64	@ 0x40
 80023ae:	d86f      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 80023b0:	2b30      	cmp	r3, #48	@ 0x30
 80023b2:	d064      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x15a>
 80023b4:	2b30      	cmp	r3, #48	@ 0x30
 80023b6:	d86b      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d060      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x15a>
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d867      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d05c      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x15a>
 80023c4:	2b10      	cmp	r3, #16
 80023c6:	d05a      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x15a>
 80023c8:	e062      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023da:	f000 faf0 	bl	80029be <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80023ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	609a      	str	r2, [r3, #8]
      break;
 80023f6:	e04f      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002408:	f000 fad9 	bl	80029be <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800241a:	609a      	str	r2, [r3, #8]
      break;
 800241c:	e03c      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800242a:	461a      	mov	r2, r3
 800242c:	f000 fa50 	bl	80028d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2150      	movs	r1, #80	@ 0x50
 8002436:	4618      	mov	r0, r3
 8002438:	f000 faa7 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 800243c:	e02c      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800244a:	461a      	mov	r2, r3
 800244c:	f000 fa6e 	bl	800292c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2160      	movs	r1, #96	@ 0x60
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fa97 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 800245c:	e01c      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800246a:	461a      	mov	r2, r3
 800246c:	f000 fa30 	bl	80028d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2140      	movs	r1, #64	@ 0x40
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fa87 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 800247c:	e00c      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4619      	mov	r1, r3
 8002488:	4610      	mov	r0, r2
 800248a:	f000 fa7e 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 800248e:	e003      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      break;
 8002494:	e000      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
	...

080024fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a29      	ldr	r2, [pc, #164]	@ (80025b4 <TIM_Base_SetConfig+0xb8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d00b      	beq.n	800252c <TIM_Base_SetConfig+0x30>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800251a:	d007      	beq.n	800252c <TIM_Base_SetConfig+0x30>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a26      	ldr	r2, [pc, #152]	@ (80025b8 <TIM_Base_SetConfig+0xbc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d003      	beq.n	800252c <TIM_Base_SetConfig+0x30>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a25      	ldr	r2, [pc, #148]	@ (80025bc <TIM_Base_SetConfig+0xc0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d108      	bne.n	800253e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a1c      	ldr	r2, [pc, #112]	@ (80025b4 <TIM_Base_SetConfig+0xb8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00b      	beq.n	800255e <TIM_Base_SetConfig+0x62>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800254c:	d007      	beq.n	800255e <TIM_Base_SetConfig+0x62>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a19      	ldr	r2, [pc, #100]	@ (80025b8 <TIM_Base_SetConfig+0xbc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d003      	beq.n	800255e <TIM_Base_SetConfig+0x62>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a18      	ldr	r2, [pc, #96]	@ (80025bc <TIM_Base_SetConfig+0xc0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d108      	bne.n	8002570 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a07      	ldr	r2, [pc, #28]	@ (80025b4 <TIM_Base_SetConfig+0xb8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d103      	bne.n	80025a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	615a      	str	r2, [r3, #20]
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	40012c00 	.word	0x40012c00
 80025b8:	40000400 	.word	0x40000400
 80025bc:	40000800 	.word	0x40000800

080025c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	f023 0201 	bic.w	r2, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 0303 	bic.w	r3, r3, #3
 80025f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f023 0302 	bic.w	r3, r3, #2
 8002608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a1c      	ldr	r2, [pc, #112]	@ (8002688 <TIM_OC1_SetConfig+0xc8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d10c      	bne.n	8002636 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f023 0308 	bic.w	r3, r3, #8
 8002622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a13      	ldr	r2, [pc, #76]	@ (8002688 <TIM_OC1_SetConfig+0xc8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d111      	bne.n	8002662 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800264c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	621a      	str	r2, [r3, #32]
}
 800267c:	bf00      	nop
 800267e:	371c      	adds	r7, #28
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40012c00 	.word	0x40012c00

0800268c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f023 0210 	bic.w	r2, r3, #16
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f023 0320 	bic.w	r3, r3, #32
 80026d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a1d      	ldr	r2, [pc, #116]	@ (800275c <TIM_OC2_SetConfig+0xd0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d10d      	bne.n	8002708 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002706:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a14      	ldr	r2, [pc, #80]	@ (800275c <TIM_OC2_SetConfig+0xd0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d113      	bne.n	8002738 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002716:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800271e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	621a      	str	r2, [r3, #32]
}
 8002752:	bf00      	nop
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	40012c00 	.word	0x40012c00

08002760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800278e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0303 	bic.w	r3, r3, #3
 8002796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80027a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002830 <TIM_OC3_SetConfig+0xd0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d10d      	bne.n	80027da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a14      	ldr	r2, [pc, #80]	@ (8002830 <TIM_OC3_SetConfig+0xd0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d113      	bne.n	800280a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	621a      	str	r2, [r3, #32]
}
 8002824:	bf00      	nop
 8002826:	371c      	adds	r7, #28
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40012c00 	.word	0x40012c00

08002834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800286a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800287e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	031b      	lsls	r3, r3, #12
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a0f      	ldr	r2, [pc, #60]	@ (80028cc <TIM_OC4_SetConfig+0x98>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d109      	bne.n	80028a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800289a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	019b      	lsls	r3, r3, #6
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	621a      	str	r2, [r3, #32]
}
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	40012c00 	.word	0x40012c00

080028d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f023 0201 	bic.w	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f023 030a 	bic.w	r3, r3, #10
 800290c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4313      	orrs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	621a      	str	r2, [r3, #32]
}
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f023 0210 	bic.w	r2, r3, #16
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	031b      	lsls	r3, r3, #12
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002968:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	621a      	str	r2, [r3, #32]
}
 8002980:	bf00      	nop
 8002982:	371c      	adds	r7, #28
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f043 0307 	orr.w	r3, r3, #7
 80029ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	609a      	str	r2, [r3, #8]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr

080029be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029be:	b480      	push	{r7}
 80029c0:	b087      	sub	sp, #28
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	021a      	lsls	r2, r3, #8
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	609a      	str	r2, [r3, #8]
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	2201      	movs	r2, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a1a      	ldr	r2, [r3, #32]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	401a      	ands	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a1a      	ldr	r2, [r3, #32]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	431a      	orrs	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	621a      	str	r2, [r3, #32]
}
 8002a3a:	bf00      	nop
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e046      	b.n	8002aea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a16      	ldr	r2, [pc, #88]	@ (8002af4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00e      	beq.n	8002abe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa8:	d009      	beq.n	8002abe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a12      	ldr	r2, [pc, #72]	@ (8002af8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d004      	beq.n	8002abe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a10      	ldr	r2, [pc, #64]	@ (8002afc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d10c      	bne.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ac4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	40012c00 	.word	0x40012c00
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40000800 	.word	0x40000800

08002b00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e042      	b.n	8002bbc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fe f8c0 	bl	8000cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2224      	movs	r2, #36	@ 0x24
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f92b 	bl	8002dc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	@ 0x28
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	d17c      	bne.n	8002cde <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_UART_Receive+0x2c>
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e075      	b.n	8002ce0 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2222      	movs	r2, #34	@ 0x22
 8002bfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c08:	f7fe f8fc 	bl	8000e04 <HAL_GetTick>
 8002c0c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	88fa      	ldrh	r2, [r7, #6]
 8002c12:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	88fa      	ldrh	r2, [r7, #6]
 8002c18:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c22:	d108      	bne.n	8002c36 <HAL_UART_Receive+0x72>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d104      	bne.n	8002c36 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	e003      	b.n	8002c3e <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c3e:	e043      	b.n	8002cc8 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2200      	movs	r2, #0
 8002c48:	2120      	movs	r1, #32
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f84c 	bl	8002ce8 <UART_WaitOnFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e042      	b.n	8002ce0 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10c      	bne.n	8002c7a <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	3302      	adds	r3, #2
 8002c76:	61bb      	str	r3, [r7, #24]
 8002c78:	e01f      	b.n	8002cba <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c82:	d007      	beq.n	8002c94 <HAL_UART_Receive+0xd0>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <HAL_UART_Receive+0xde>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d106      	bne.n	8002ca2 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	e008      	b.n	8002cb4 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1b6      	bne.n	8002c40 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e000      	b.n	8002ce0 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
  }
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3720      	adds	r7, #32
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b090      	sub	sp, #64	@ 0x40
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf8:	e050      	b.n	8002d9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d04c      	beq.n	8002d9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d007      	beq.n	8002d18 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d08:	f7fe f87c 	bl	8000e04 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d241      	bcs.n	8002d9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	330c      	adds	r3, #12
 8002d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d22:	e853 3f00 	ldrex	r3, [r3]
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	330c      	adds	r3, #12
 8002d36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d38:	637a      	str	r2, [r7, #52]	@ 0x34
 8002d3a:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d40:	e841 2300 	strex	r3, r2, [r1]
 8002d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e5      	bne.n	8002d18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3314      	adds	r3, #20
 8002d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	e853 3f00 	ldrex	r3, [r3]
 8002d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3314      	adds	r3, #20
 8002d6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d6c:	623a      	str	r2, [r7, #32]
 8002d6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	69f9      	ldr	r1, [r7, #28]
 8002d72:	6a3a      	ldr	r2, [r7, #32]
 8002d74:	e841 2300 	strex	r3, r2, [r1]
 8002d78:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e5      	bne.n	8002d4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e00f      	b.n	8002dbc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4013      	ands	r3, r2
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d09f      	beq.n	8002cfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3740      	adds	r7, #64	@ 0x40
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002dfe:	f023 030c 	bic.w	r3, r3, #12
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed8 <UART_SetConfig+0x114>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d103      	bne.n	8002e34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e2c:	f7fe fe4e 	bl	8001acc <HAL_RCC_GetPCLK2Freq>
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	e002      	b.n	8002e3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e34:	f7fe fe36 	bl	8001aa4 <HAL_RCC_GetPCLK1Freq>
 8002e38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	009a      	lsls	r2, r3, #2
 8002e44:	441a      	add	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	4a22      	ldr	r2, [pc, #136]	@ (8002edc <UART_SetConfig+0x118>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	0119      	lsls	r1, r3, #4
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	009a      	lsls	r2, r3, #2
 8002e64:	441a      	add	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e70:	4b1a      	ldr	r3, [pc, #104]	@ (8002edc <UART_SetConfig+0x118>)
 8002e72:	fba3 0302 	umull	r0, r3, r3, r2
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2064      	movs	r0, #100	@ 0x64
 8002e7a:	fb00 f303 	mul.w	r3, r0, r3
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	3332      	adds	r3, #50	@ 0x32
 8002e84:	4a15      	ldr	r2, [pc, #84]	@ (8002edc <UART_SetConfig+0x118>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e90:	4419      	add	r1, r3
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	009a      	lsls	r2, r3, #2
 8002e9c:	441a      	add	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <UART_SetConfig+0x118>)
 8002eaa:	fba3 0302 	umull	r0, r3, r3, r2
 8002eae:	095b      	lsrs	r3, r3, #5
 8002eb0:	2064      	movs	r0, #100	@ 0x64
 8002eb2:	fb00 f303 	mul.w	r3, r0, r3
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	3332      	adds	r3, #50	@ 0x32
 8002ebc:	4a07      	ldr	r2, [pc, #28]	@ (8002edc <UART_SetConfig+0x118>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	f003 020f 	and.w	r2, r3, #15
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	440a      	add	r2, r1
 8002ece:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ed0:	bf00      	nop
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40013800 	.word	0x40013800
 8002edc:	51eb851f 	.word	0x51eb851f

08002ee0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ee6:	f3ef 8305 	mrs	r3, IPSR
 8002eea:	60bb      	str	r3, [r7, #8]
  return(result);
 8002eec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10f      	bne.n	8002f12 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef6:	607b      	str	r3, [r7, #4]
  return(result);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <osKernelInitialize+0x32>
 8002efe:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <osKernelInitialize+0x60>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d109      	bne.n	8002f1a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f06:	f3ef 8311 	mrs	r3, BASEPRI
 8002f0a:	603b      	str	r3, [r7, #0]
  return(result);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002f12:	f06f 0305 	mvn.w	r3, #5
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	e00c      	b.n	8002f34 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002f1a:	4b09      	ldr	r3, [pc, #36]	@ (8002f40 <osKernelInitialize+0x60>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d105      	bne.n	8002f2e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002f22:	4b07      	ldr	r3, [pc, #28]	@ (8002f40 <osKernelInitialize+0x60>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	e002      	b.n	8002f34 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f32:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002f34:	68fb      	ldr	r3, [r7, #12]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	20000128 	.word	0x20000128

08002f44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f4a:	f3ef 8305 	mrs	r3, IPSR
 8002f4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10f      	bne.n	8002f76 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f56:	f3ef 8310 	mrs	r3, PRIMASK
 8002f5a:	607b      	str	r3, [r7, #4]
  return(result);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <osKernelStart+0x32>
 8002f62:	4b11      	ldr	r3, [pc, #68]	@ (8002fa8 <osKernelStart+0x64>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d109      	bne.n	8002f7e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f6a:	f3ef 8311 	mrs	r3, BASEPRI
 8002f6e:	603b      	str	r3, [r7, #0]
  return(result);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002f76:	f06f 0305 	mvn.w	r3, #5
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e00e      	b.n	8002f9c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa8 <osKernelStart+0x64>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d107      	bne.n	8002f96 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002f86:	4b08      	ldr	r3, [pc, #32]	@ (8002fa8 <osKernelStart+0x64>)
 8002f88:	2202      	movs	r2, #2
 8002f8a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002f8c:	f001 f890 	bl	80040b0 <vTaskStartScheduler>
      stat = osOK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	e002      	b.n	8002f9c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002f96:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000128 	.word	0x20000128

08002fac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b092      	sub	sp, #72	@ 0x48
 8002fb0:	af04      	add	r7, sp, #16
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fbc:	f3ef 8305 	mrs	r3, IPSR
 8002fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f040 8094 	bne.w	80030f2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fca:	f3ef 8310 	mrs	r3, PRIMASK
 8002fce:	623b      	str	r3, [r7, #32]
  return(result);
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f040 808d 	bne.w	80030f2 <osThreadNew+0x146>
 8002fd8:	4b48      	ldr	r3, [pc, #288]	@ (80030fc <osThreadNew+0x150>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d106      	bne.n	8002fee <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fe0:	f3ef 8311 	mrs	r3, BASEPRI
 8002fe4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f040 8082 	bne.w	80030f2 <osThreadNew+0x146>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d07e      	beq.n	80030f2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002ff4:	2380      	movs	r3, #128	@ 0x80
 8002ff6:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002ff8:	2318      	movs	r3, #24
 8002ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003000:	f107 031b 	add.w	r3, r7, #27
 8003004:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8003006:	f04f 33ff 	mov.w	r3, #4294967295
 800300a:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d045      	beq.n	800309e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <osThreadNew+0x74>
        name = attr->name;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800302e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <osThreadNew+0x9a>
 8003034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003036:	2b38      	cmp	r3, #56	@ 0x38
 8003038:	d805      	bhi.n	8003046 <osThreadNew+0x9a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <osThreadNew+0x9e>
        return (NULL);
 8003046:	2300      	movs	r3, #0
 8003048:	e054      	b.n	80030f4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	089b      	lsrs	r3, r3, #2
 8003058:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00e      	beq.n	8003080 <osThreadNew+0xd4>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b5b      	cmp	r3, #91	@ 0x5b
 8003068:	d90a      	bls.n	8003080 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <osThreadNew+0xd4>
        mem = 1;
 800307a:	2301      	movs	r3, #1
 800307c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800307e:	e010      	b.n	80030a2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10c      	bne.n	80030a2 <osThreadNew+0xf6>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d108      	bne.n	80030a2 <osThreadNew+0xf6>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d104      	bne.n	80030a2 <osThreadNew+0xf6>
          mem = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800309c:	e001      	b.n	80030a2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80030a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d110      	bne.n	80030ca <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80030b0:	9202      	str	r2, [sp, #8]
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030bc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fe24 	bl	8003d0c <xTaskCreateStatic>
 80030c4:	4603      	mov	r3, r0
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	e013      	b.n	80030f2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80030ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d110      	bne.n	80030f2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80030d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fe71 	bl	8003dca <xTaskCreate>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d001      	beq.n	80030f2 <osThreadNew+0x146>
          hTask = NULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80030f2:	697b      	ldr	r3, [r7, #20]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3738      	adds	r7, #56	@ 0x38
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000128 	.word	0x20000128

08003100 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003108:	f3ef 8305 	mrs	r3, IPSR
 800310c:	613b      	str	r3, [r7, #16]
  return(result);
 800310e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10f      	bne.n	8003134 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003114:	f3ef 8310 	mrs	r3, PRIMASK
 8003118:	60fb      	str	r3, [r7, #12]
  return(result);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <osDelay+0x34>
 8003120:	4b0d      	ldr	r3, [pc, #52]	@ (8003158 <osDelay+0x58>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d109      	bne.n	800313c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003128:	f3ef 8311 	mrs	r3, BASEPRI
 800312c:	60bb      	str	r3, [r7, #8]
  return(result);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <osDelay+0x3c>
    stat = osErrorISR;
 8003134:	f06f 0305 	mvn.w	r3, #5
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e007      	b.n	800314c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 ff7c 	bl	8004044 <vTaskDelay>
    }
  }

  return (stat);
 800314c:	697b      	ldr	r3, [r7, #20]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000128 	.word	0x20000128

0800315c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4a06      	ldr	r2, [pc, #24]	@ (8003184 <vApplicationGetIdleTaskMemory+0x28>)
 800316c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	4a05      	ldr	r2, [pc, #20]	@ (8003188 <vApplicationGetIdleTaskMemory+0x2c>)
 8003172:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2280      	movs	r2, #128	@ 0x80
 8003178:	601a      	str	r2, [r3, #0]
}
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr
 8003184:	2000012c 	.word	0x2000012c
 8003188:	20000188 	.word	0x20000188

0800318c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4a07      	ldr	r2, [pc, #28]	@ (80031b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800319c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4a06      	ldr	r2, [pc, #24]	@ (80031bc <vApplicationGetTimerTaskMemory+0x30>)
 80031a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031aa:	601a      	str	r2, [r3, #0]
}
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000388 	.word	0x20000388
 80031bc:	200003e4 	.word	0x200003e4

080031c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f103 0208 	add.w	r2, r3, #8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f04f 32ff 	mov.w	r2, #4294967295
 80031d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f103 0208 	add.w	r2, r3, #8
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f103 0208 	add.w	r2, r3, #8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003216:	b480      	push	{r7}
 8003218:	b085      	sub	sp, #20
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	601a      	str	r2, [r3, #0]
}
 8003252:	bf00      	nop
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003272:	d103      	bne.n	800327c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	e00c      	b.n	8003296 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3308      	adds	r3, #8
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	e002      	b.n	800328a <vListInsert+0x2e>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	429a      	cmp	r2, r3
 8003294:	d2f6      	bcs.n	8003284 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6892      	ldr	r2, [r2, #8]
 80032e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6852      	ldr	r2, [r2, #4]
 80032ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d103      	bne.n	8003300 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	1e5a      	subs	r2, r3, #1
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
	...

08003320 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003338:	f383 8811 	msr	BASEPRI, r3
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003346:	bf00      	nop
 8003348:	bf00      	nop
 800334a:	e7fd      	b.n	8003348 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800334c:	f001 fff6 	bl	800533c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003358:	68f9      	ldr	r1, [r7, #12]
 800335a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	441a      	add	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337c:	3b01      	subs	r3, #1
 800337e:	68f9      	ldr	r1, [r7, #12]
 8003380:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	441a      	add	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	22ff      	movs	r2, #255	@ 0xff
 8003390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	22ff      	movs	r2, #255	@ 0xff
 8003398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d114      	bne.n	80033cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d01a      	beq.n	80033e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3310      	adds	r3, #16
 80033ae:	4618      	mov	r0, r3
 80033b0:	f001 f910 	bl	80045d4 <xTaskRemoveFromEventList>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d012      	beq.n	80033e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80033ba:	4b0d      	ldr	r3, [pc, #52]	@ (80033f0 <xQueueGenericReset+0xd0>)
 80033bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	e009      	b.n	80033e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3310      	adds	r3, #16
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff fef5 	bl	80031c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3324      	adds	r3, #36	@ 0x24
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fef0 	bl	80031c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80033e0:	f001 ffdc 	bl	800539c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80033e4:	2301      	movs	r3, #1
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	e000ed04 	.word	0xe000ed04

080033f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08e      	sub	sp, #56	@ 0x38
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10b      	bne.n	8003420 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800341a:	bf00      	nop
 800341c:	bf00      	nop
 800341e:	e7fd      	b.n	800341c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10b      	bne.n	800343e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	e7fd      	b.n	800343a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <xQueueGenericCreateStatic+0x56>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <xQueueGenericCreateStatic+0x5a>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <xQueueGenericCreateStatic+0x5c>
 800344e:	2300      	movs	r3, #0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10b      	bne.n	800346c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003458:	f383 8811 	msr	BASEPRI, r3
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	623b      	str	r3, [r7, #32]
}
 8003466:	bf00      	nop
 8003468:	bf00      	nop
 800346a:	e7fd      	b.n	8003468 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <xQueueGenericCreateStatic+0x84>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <xQueueGenericCreateStatic+0x88>
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <xQueueGenericCreateStatic+0x8a>
 800347c:	2300      	movs	r3, #0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10b      	bne.n	800349a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	61fb      	str	r3, [r7, #28]
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	e7fd      	b.n	8003496 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800349a:	2350      	movs	r3, #80	@ 0x50
 800349c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b50      	cmp	r3, #80	@ 0x50
 80034a2:	d00b      	beq.n	80034bc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	61bb      	str	r3, [r7, #24]
}
 80034b6:	bf00      	nop
 80034b8:	bf00      	nop
 80034ba:	e7fd      	b.n	80034b8 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80034c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00d      	beq.n	80034e2 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80034c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034ce:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80034d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	4613      	mov	r3, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f805 	bl	80034ec <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80034e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3730      	adds	r7, #48	@ 0x30
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d103      	bne.n	8003508 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e002      	b.n	800350e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800351a:	2101      	movs	r1, #1
 800351c:	69b8      	ldr	r0, [r7, #24]
 800351e:	f7ff feff 	bl	8003320 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800352a:	bf00      	nop
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08e      	sub	sp, #56	@ 0x38
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003542:	2300      	movs	r3, #0
 8003544:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800354a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10b      	bne.n	8003568 <xQueueGenericSend+0x34>
	__asm volatile
 8003550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003562:	bf00      	nop
 8003564:	bf00      	nop
 8003566:	e7fd      	b.n	8003564 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d103      	bne.n	8003576 <xQueueGenericSend+0x42>
 800356e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <xQueueGenericSend+0x46>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <xQueueGenericSend+0x48>
 800357a:	2300      	movs	r3, #0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10b      	bne.n	8003598 <xQueueGenericSend+0x64>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d103      	bne.n	80035a6 <xQueueGenericSend+0x72>
 800359e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <xQueueGenericSend+0x76>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <xQueueGenericSend+0x78>
 80035aa:	2300      	movs	r3, #0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10b      	bne.n	80035c8 <xQueueGenericSend+0x94>
	__asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	623b      	str	r3, [r7, #32]
}
 80035c2:	bf00      	nop
 80035c4:	bf00      	nop
 80035c6:	e7fd      	b.n	80035c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035c8:	f001 f9c8 	bl	800495c <xTaskGetSchedulerState>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d102      	bne.n	80035d8 <xQueueGenericSend+0xa4>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <xQueueGenericSend+0xa8>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <xQueueGenericSend+0xaa>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10b      	bne.n	80035fa <xQueueGenericSend+0xc6>
	__asm volatile
 80035e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	61fb      	str	r3, [r7, #28]
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop
 80035f8:	e7fd      	b.n	80035f6 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035fa:	f001 fe9f 	bl	800533c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003600:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <xQueueGenericSend+0xdc>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b02      	cmp	r3, #2
 800360e:	d129      	bne.n	8003664 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003616:	f000 fa0d 	bl	8003a34 <prvCopyDataToQueue>
 800361a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800361c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003620:	2b00      	cmp	r3, #0
 8003622:	d010      	beq.n	8003646 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003626:	3324      	adds	r3, #36	@ 0x24
 8003628:	4618      	mov	r0, r3
 800362a:	f000 ffd3 	bl	80045d4 <xTaskRemoveFromEventList>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003634:	4b3f      	ldr	r3, [pc, #252]	@ (8003734 <xQueueGenericSend+0x200>)
 8003636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	e00a      	b.n	800365c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800364c:	4b39      	ldr	r3, [pc, #228]	@ (8003734 <xQueueGenericSend+0x200>)
 800364e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800365c:	f001 fe9e 	bl	800539c <vPortExitCritical>
				return pdPASS;
 8003660:	2301      	movs	r3, #1
 8003662:	e063      	b.n	800372c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800366a:	f001 fe97 	bl	800539c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800366e:	2300      	movs	r3, #0
 8003670:	e05c      	b.n	800372c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003674:	2b00      	cmp	r3, #0
 8003676:	d106      	bne.n	8003686 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003678:	f107 0314 	add.w	r3, r7, #20
 800367c:	4618      	mov	r0, r3
 800367e:	f001 f80d 	bl	800469c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003682:	2301      	movs	r3, #1
 8003684:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003686:	f001 fe89 	bl	800539c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800368a:	f000 fd79 	bl	8004180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800368e:	f001 fe55 	bl	800533c <vPortEnterCritical>
 8003692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003694:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003698:	b25b      	sxtb	r3, r3
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369e:	d103      	bne.n	80036a8 <xQueueGenericSend+0x174>
 80036a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036ae:	b25b      	sxtb	r3, r3
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d103      	bne.n	80036be <xQueueGenericSend+0x18a>
 80036b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036be:	f001 fe6d 	bl	800539c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036c2:	1d3a      	adds	r2, r7, #4
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	4611      	mov	r1, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fffc 	bl	80046c8 <xTaskCheckForTimeOut>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d124      	bne.n	8003720 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80036d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036d8:	f000 faa4 	bl	8003c24 <prvIsQueueFull>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d018      	beq.n	8003714 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80036e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e4:	3310      	adds	r3, #16
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	4611      	mov	r1, r2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 ff20 	bl	8004530 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80036f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036f2:	f000 fa2f 	bl	8003b54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80036f6:	f000 fd51 	bl	800419c <xTaskResumeAll>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f47f af7c 	bne.w	80035fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003702:	4b0c      	ldr	r3, [pc, #48]	@ (8003734 <xQueueGenericSend+0x200>)
 8003704:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	e772      	b.n	80035fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003714:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003716:	f000 fa1d 	bl	8003b54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800371a:	f000 fd3f 	bl	800419c <xTaskResumeAll>
 800371e:	e76c      	b.n	80035fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003720:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003722:	f000 fa17 	bl	8003b54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003726:	f000 fd39 	bl	800419c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800372a:	2300      	movs	r3, #0
		}
	}
}
 800372c:	4618      	mov	r0, r3
 800372e:	3738      	adds	r7, #56	@ 0x38
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	e000ed04 	.word	0xe000ed04

08003738 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08e      	sub	sp, #56	@ 0x38
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800374a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10b      	bne.n	8003768 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003762:	bf00      	nop
 8003764:	bf00      	nop
 8003766:	e7fd      	b.n	8003764 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d103      	bne.n	8003776 <xQueueGenericSendFromISR+0x3e>
 800376e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <xQueueGenericSendFromISR+0x42>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <xQueueGenericSendFromISR+0x44>
 800377a:	2300      	movs	r3, #0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10b      	bne.n	8003798 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	623b      	str	r3, [r7, #32]
}
 8003792:	bf00      	nop
 8003794:	bf00      	nop
 8003796:	e7fd      	b.n	8003794 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d103      	bne.n	80037a6 <xQueueGenericSendFromISR+0x6e>
 800379e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <xQueueGenericSendFromISR+0x72>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <xQueueGenericSendFromISR+0x74>
 80037aa:	2300      	movs	r3, #0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10b      	bne.n	80037c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	61fb      	str	r3, [r7, #28]
}
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	e7fd      	b.n	80037c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037c8:	f001 fe7a 	bl	80054c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80037cc:	f3ef 8211 	mrs	r2, BASEPRI
 80037d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	61ba      	str	r2, [r7, #24]
 80037e2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80037e4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d302      	bcc.n	80037fa <xQueueGenericSendFromISR+0xc2>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d12c      	bne.n	8003854 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80037fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003800:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	68b9      	ldr	r1, [r7, #8]
 8003808:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800380a:	f000 f913 	bl	8003a34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800380e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d112      	bne.n	800383e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	2b00      	cmp	r3, #0
 800381e:	d016      	beq.n	800384e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003822:	3324      	adds	r3, #36	@ 0x24
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fed5 	bl	80045d4 <xTaskRemoveFromEventList>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00e      	beq.n	800384e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	e007      	b.n	800384e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800383e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003842:	3301      	adds	r3, #1
 8003844:	b2db      	uxtb	r3, r3
 8003846:	b25a      	sxtb	r2, r3
 8003848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800384e:	2301      	movs	r3, #1
 8003850:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003852:	e001      	b.n	8003858 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003854:	2300      	movs	r3, #0
 8003856:	637b      	str	r3, [r7, #52]	@ 0x34
 8003858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003862:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003866:	4618      	mov	r0, r3
 8003868:	3738      	adds	r7, #56	@ 0x38
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08c      	sub	sp, #48	@ 0x30
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800387c:	2300      	movs	r3, #0
 800387e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10b      	bne.n	80038a2 <xQueueReceive+0x32>
	__asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	623b      	str	r3, [r7, #32]
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	e7fd      	b.n	800389e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d103      	bne.n	80038b0 <xQueueReceive+0x40>
 80038a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <xQueueReceive+0x44>
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <xQueueReceive+0x46>
 80038b4:	2300      	movs	r3, #0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10b      	bne.n	80038d2 <xQueueReceive+0x62>
	__asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	61fb      	str	r3, [r7, #28]
}
 80038cc:	bf00      	nop
 80038ce:	bf00      	nop
 80038d0:	e7fd      	b.n	80038ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038d2:	f001 f843 	bl	800495c <xTaskGetSchedulerState>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d102      	bne.n	80038e2 <xQueueReceive+0x72>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <xQueueReceive+0x76>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <xQueueReceive+0x78>
 80038e6:	2300      	movs	r3, #0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10b      	bne.n	8003904 <xQueueReceive+0x94>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	61bb      	str	r3, [r7, #24]
}
 80038fe:	bf00      	nop
 8003900:	bf00      	nop
 8003902:	e7fd      	b.n	8003900 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003904:	f001 fd1a 	bl	800533c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01f      	beq.n	8003954 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003918:	f000 f8f6 	bl	8003b08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391e:	1e5a      	subs	r2, r3, #1
 8003920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003922:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00f      	beq.n	800394c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800392c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392e:	3310      	adds	r3, #16
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fe4f 	bl	80045d4 <xTaskRemoveFromEventList>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800393c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a30 <xQueueReceive+0x1c0>)
 800393e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800394c:	f001 fd26 	bl	800539c <vPortExitCritical>
				return pdPASS;
 8003950:	2301      	movs	r3, #1
 8003952:	e069      	b.n	8003a28 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800395a:	f001 fd1f 	bl	800539c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800395e:	2300      	movs	r3, #0
 8003960:	e062      	b.n	8003a28 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003968:	f107 0310 	add.w	r3, r7, #16
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fe95 	bl	800469c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003972:	2301      	movs	r3, #1
 8003974:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003976:	f001 fd11 	bl	800539c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800397a:	f000 fc01 	bl	8004180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800397e:	f001 fcdd 	bl	800533c <vPortEnterCritical>
 8003982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003984:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003988:	b25b      	sxtb	r3, r3
 800398a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398e:	d103      	bne.n	8003998 <xQueueReceive+0x128>
 8003990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800399e:	b25b      	sxtb	r3, r3
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d103      	bne.n	80039ae <xQueueReceive+0x13e>
 80039a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039ae:	f001 fcf5 	bl	800539c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039b2:	1d3a      	adds	r2, r7, #4
 80039b4:	f107 0310 	add.w	r3, r7, #16
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fe84 	bl	80046c8 <xTaskCheckForTimeOut>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d123      	bne.n	8003a0e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039c8:	f000 f916 	bl	8003bf8 <prvIsQueueEmpty>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d017      	beq.n	8003a02 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d4:	3324      	adds	r3, #36	@ 0x24
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fda8 	bl	8004530 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80039e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039e2:	f000 f8b7 	bl	8003b54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039e6:	f000 fbd9 	bl	800419c <xTaskResumeAll>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d189      	bne.n	8003904 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80039f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a30 <xQueueReceive+0x1c0>)
 80039f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	e780      	b.n	8003904 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a04:	f000 f8a6 	bl	8003b54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a08:	f000 fbc8 	bl	800419c <xTaskResumeAll>
 8003a0c:	e77a      	b.n	8003904 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a10:	f000 f8a0 	bl	8003b54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a14:	f000 fbc2 	bl	800419c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a1a:	f000 f8ed 	bl	8003bf8 <prvIsQueueEmpty>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f43f af6f 	beq.w	8003904 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3730      	adds	r7, #48	@ 0x30
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	e000ed04 	.word	0xe000ed04

08003a34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10d      	bne.n	8003a6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d14d      	bne.n	8003af6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 ff9a 	bl	8004998 <xTaskPriorityDisinherit>
 8003a64:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	605a      	str	r2, [r3, #4]
 8003a6c:	e043      	b.n	8003af6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d119      	bne.n	8003aa8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6898      	ldr	r0, [r3, #8]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	f001 ff68 	bl	8005954 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8c:	441a      	add	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d32b      	bcc.n	8003af6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	609a      	str	r2, [r3, #8]
 8003aa6:	e026      	b.n	8003af6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	68d8      	ldr	r0, [r3, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	f001 ff4e 	bl	8005954 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	425b      	negs	r3, r3
 8003ac2:	441a      	add	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d207      	bcs.n	8003ae4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	425b      	negs	r3, r3
 8003ade:	441a      	add	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d105      	bne.n	8003af6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003afe:	697b      	ldr	r3, [r7, #20]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d018      	beq.n	8003b4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	441a      	add	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d303      	bcc.n	8003b3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68d9      	ldr	r1, [r3, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b44:	461a      	mov	r2, r3
 8003b46:	6838      	ldr	r0, [r7, #0]
 8003b48:	f001 ff04 	bl	8005954 <memcpy>
	}
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b5c:	f001 fbee 	bl	800533c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b68:	e011      	b.n	8003b8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d012      	beq.n	8003b98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3324      	adds	r3, #36	@ 0x24
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fd2c 	bl	80045d4 <xTaskRemoveFromEventList>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003b82:	f000 fe05 	bl	8004790 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	dce9      	bgt.n	8003b6a <prvUnlockQueue+0x16>
 8003b96:	e000      	b.n	8003b9a <prvUnlockQueue+0x46>
					break;
 8003b98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	22ff      	movs	r2, #255	@ 0xff
 8003b9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003ba2:	f001 fbfb 	bl	800539c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ba6:	f001 fbc9 	bl	800533c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bb2:	e011      	b.n	8003bd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d012      	beq.n	8003be2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3310      	adds	r3, #16
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fd07 	bl	80045d4 <xTaskRemoveFromEventList>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003bcc:	f000 fde0 	bl	8004790 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003bd0:	7bbb      	ldrb	r3, [r7, #14]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	dce9      	bgt.n	8003bb4 <prvUnlockQueue+0x60>
 8003be0:	e000      	b.n	8003be4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003be2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	22ff      	movs	r2, #255	@ 0xff
 8003be8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003bec:	f001 fbd6 	bl	800539c <vPortExitCritical>
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c00:	f001 fb9c 	bl	800533c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	e001      	b.n	8003c16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c16:	f001 fbc1 	bl	800539c <vPortExitCritical>

	return xReturn;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c2c:	f001 fb86 	bl	800533c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d102      	bne.n	8003c42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	e001      	b.n	8003c46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c46:	f001 fba9 	bl	800539c <vPortExitCritical>

	return xReturn;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	e014      	b.n	8003c8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003c64:	4a0e      	ldr	r2, [pc, #56]	@ (8003ca0 <vQueueAddToRegistry+0x4c>)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10b      	bne.n	8003c88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003c70:	490b      	ldr	r1, [pc, #44]	@ (8003ca0 <vQueueAddToRegistry+0x4c>)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003c7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ca0 <vQueueAddToRegistry+0x4c>)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4413      	add	r3, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003c86:	e006      	b.n	8003c96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b07      	cmp	r3, #7
 8003c92:	d9e7      	bls.n	8003c64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	200007e4 	.word	0x200007e4

08003ca4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003cb4:	f001 fb42 	bl	800533c <vPortEnterCritical>
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cbe:	b25b      	sxtb	r3, r3
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d103      	bne.n	8003cce <vQueueWaitForMessageRestricted+0x2a>
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cd4:	b25b      	sxtb	r3, r3
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cda:	d103      	bne.n	8003ce4 <vQueueWaitForMessageRestricted+0x40>
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ce4:	f001 fb5a 	bl	800539c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d106      	bne.n	8003cfe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	3324      	adds	r3, #36	@ 0x24
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fc3f 	bl	800457c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003cfe:	6978      	ldr	r0, [r7, #20]
 8003d00:	f7ff ff28 	bl	8003b54 <prvUnlockQueue>
	}
 8003d04:	bf00      	nop
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08e      	sub	sp, #56	@ 0x38
 8003d10:	af04      	add	r7, sp, #16
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10b      	bne.n	8003d38 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	623b      	str	r3, [r7, #32]
}
 8003d32:	bf00      	nop
 8003d34:	bf00      	nop
 8003d36:	e7fd      	b.n	8003d34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10b      	bne.n	8003d56 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	61fb      	str	r3, [r7, #28]
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	e7fd      	b.n	8003d52 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d56:	235c      	movs	r3, #92	@ 0x5c
 8003d58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8003d5e:	d00b      	beq.n	8003d78 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	61bb      	str	r3, [r7, #24]
}
 8003d72:	bf00      	nop
 8003d74:	bf00      	nop
 8003d76:	e7fd      	b.n	8003d74 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01e      	beq.n	8003dbc <xTaskCreateStatic+0xb0>
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01b      	beq.n	8003dbc <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d86:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d8c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	2202      	movs	r2, #2
 8003d92:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d96:	2300      	movs	r3, #0
 8003d98:	9303      	str	r3, [sp, #12]
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	9302      	str	r3, [sp, #8]
 8003d9e:	f107 0314 	add.w	r3, r7, #20
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f850 	bl	8003e54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003db4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003db6:	f000 f8d5 	bl	8003f64 <prvAddNewTaskToReadyList>
 8003dba:	e001      	b.n	8003dc0 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003dc0:	697b      	ldr	r3, [r7, #20]
	}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3728      	adds	r7, #40	@ 0x28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b08c      	sub	sp, #48	@ 0x30
 8003dce:	af04      	add	r7, sp, #16
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 fbae 	bl	8005540 <pvPortMalloc>
 8003de4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00e      	beq.n	8003e0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003dec:	205c      	movs	r0, #92	@ 0x5c
 8003dee:	f001 fba7 	bl	8005540 <pvPortMalloc>
 8003df2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e00:	e005      	b.n	8003e0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e02:	6978      	ldr	r0, [r7, #20]
 8003e04:	f001 fc64 	bl	80056d0 <vPortFree>
 8003e08:	e001      	b.n	8003e0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d017      	beq.n	8003e44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e1c:	88fa      	ldrh	r2, [r7, #6]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	9303      	str	r3, [sp, #12]
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	9302      	str	r3, [sp, #8]
 8003e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f80e 	bl	8003e54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e38:	69f8      	ldr	r0, [r7, #28]
 8003e3a:	f000 f893 	bl	8003f64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	e002      	b.n	8003e4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e44:	f04f 33ff 	mov.w	r3, #4294967295
 8003e48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
	}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e64:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	21a5      	movs	r1, #165	@ 0xa5
 8003e6e:	f001 fd45 	bl	80058fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f023 0307 	bic.w	r3, r3, #7
 8003e8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00b      	beq.n	8003eae <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	617b      	str	r3, [r7, #20]
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	e7fd      	b.n	8003eaa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	e012      	b.n	8003eda <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	7819      	ldrb	r1, [r3, #0]
 8003ebc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3334      	adds	r3, #52	@ 0x34
 8003ec4:	460a      	mov	r2, r1
 8003ec6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	4413      	add	r3, r2
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d006      	beq.n	8003ee2 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	2b0f      	cmp	r3, #15
 8003ede:	d9e9      	bls.n	8003eb4 <prvInitialiseNewTask+0x60>
 8003ee0:	e000      	b.n	8003ee4 <prvInitialiseNewTask+0x90>
		{
			break;
 8003ee2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eee:	2b37      	cmp	r3, #55	@ 0x37
 8003ef0:	d901      	bls.n	8003ef6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ef2:	2337      	movs	r3, #55	@ 0x37
 8003ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003efa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f00:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f04:	2200      	movs	r2, #0
 8003f06:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff f976 	bl	80031fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f14:	3318      	adds	r3, #24
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff f971 	bl	80031fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f24:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f30:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f34:	2200      	movs	r2, #0
 8003f36:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	69b8      	ldr	r0, [r7, #24]
 8003f46:	f001 f90b 	bl	8005160 <pxPortInitialiseStack>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f5c:	bf00      	nop
 8003f5e:	3720      	adds	r7, #32
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f6c:	f001 f9e6 	bl	800533c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f70:	4b2d      	ldr	r3, [pc, #180]	@ (8004028 <prvAddNewTaskToReadyList+0xc4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3301      	adds	r3, #1
 8003f76:	4a2c      	ldr	r2, [pc, #176]	@ (8004028 <prvAddNewTaskToReadyList+0xc4>)
 8003f78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f7a:	4b2c      	ldr	r3, [pc, #176]	@ (800402c <prvAddNewTaskToReadyList+0xc8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d109      	bne.n	8003f96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f82:	4a2a      	ldr	r2, [pc, #168]	@ (800402c <prvAddNewTaskToReadyList+0xc8>)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f88:	4b27      	ldr	r3, [pc, #156]	@ (8004028 <prvAddNewTaskToReadyList+0xc4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d110      	bne.n	8003fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f90:	f000 fc22 	bl	80047d8 <prvInitialiseTaskLists>
 8003f94:	e00d      	b.n	8003fb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f96:	4b26      	ldr	r3, [pc, #152]	@ (8004030 <prvAddNewTaskToReadyList+0xcc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f9e:	4b23      	ldr	r3, [pc, #140]	@ (800402c <prvAddNewTaskToReadyList+0xc8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d802      	bhi.n	8003fb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003fac:	4a1f      	ldr	r2, [pc, #124]	@ (800402c <prvAddNewTaskToReadyList+0xc8>)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003fb2:	4b20      	ldr	r3, [pc, #128]	@ (8004034 <prvAddNewTaskToReadyList+0xd0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8004034 <prvAddNewTaskToReadyList+0xd0>)
 8003fba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8004034 <prvAddNewTaskToReadyList+0xd0>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004038 <prvAddNewTaskToReadyList+0xd4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d903      	bls.n	8003fd8 <prvAddNewTaskToReadyList+0x74>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd4:	4a18      	ldr	r2, [pc, #96]	@ (8004038 <prvAddNewTaskToReadyList+0xd4>)
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4a15      	ldr	r2, [pc, #84]	@ (800403c <prvAddNewTaskToReadyList+0xd8>)
 8003fe6:	441a      	add	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3304      	adds	r3, #4
 8003fec:	4619      	mov	r1, r3
 8003fee:	4610      	mov	r0, r2
 8003ff0:	f7ff f911 	bl	8003216 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ff4:	f001 f9d2 	bl	800539c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8004030 <prvAddNewTaskToReadyList+0xcc>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00e      	beq.n	800401e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004000:	4b0a      	ldr	r3, [pc, #40]	@ (800402c <prvAddNewTaskToReadyList+0xc8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400a:	429a      	cmp	r2, r3
 800400c:	d207      	bcs.n	800401e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800400e:	4b0c      	ldr	r3, [pc, #48]	@ (8004040 <prvAddNewTaskToReadyList+0xdc>)
 8004010:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000cf8 	.word	0x20000cf8
 800402c:	20000824 	.word	0x20000824
 8004030:	20000d04 	.word	0x20000d04
 8004034:	20000d14 	.word	0x20000d14
 8004038:	20000d00 	.word	0x20000d00
 800403c:	20000828 	.word	0x20000828
 8004040:	e000ed04 	.word	0xe000ed04

08004044 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d018      	beq.n	8004088 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004056:	4b14      	ldr	r3, [pc, #80]	@ (80040a8 <vTaskDelay+0x64>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00b      	beq.n	8004076 <vTaskDelay+0x32>
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	60bb      	str	r3, [r7, #8]
}
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	e7fd      	b.n	8004072 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004076:	f000 f883 	bl	8004180 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800407a:	2100      	movs	r1, #0
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 fcfb 	bl	8004a78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004082:	f000 f88b 	bl	800419c <xTaskResumeAll>
 8004086:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d107      	bne.n	800409e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800408e:	4b07      	ldr	r3, [pc, #28]	@ (80040ac <vTaskDelay+0x68>)
 8004090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20000d20 	.word	0x20000d20
 80040ac:	e000ed04 	.word	0xe000ed04

080040b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	@ 0x28
 80040b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040be:	463a      	mov	r2, r7
 80040c0:	1d39      	adds	r1, r7, #4
 80040c2:	f107 0308 	add.w	r3, r7, #8
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff f848 	bl	800315c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80040cc:	6839      	ldr	r1, [r7, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	9202      	str	r2, [sp, #8]
 80040d4:	9301      	str	r3, [sp, #4]
 80040d6:	2300      	movs	r3, #0
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	2300      	movs	r3, #0
 80040dc:	460a      	mov	r2, r1
 80040de:	4922      	ldr	r1, [pc, #136]	@ (8004168 <vTaskStartScheduler+0xb8>)
 80040e0:	4822      	ldr	r0, [pc, #136]	@ (800416c <vTaskStartScheduler+0xbc>)
 80040e2:	f7ff fe13 	bl	8003d0c <xTaskCreateStatic>
 80040e6:	4603      	mov	r3, r0
 80040e8:	4a21      	ldr	r2, [pc, #132]	@ (8004170 <vTaskStartScheduler+0xc0>)
 80040ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80040ec:	4b20      	ldr	r3, [pc, #128]	@ (8004170 <vTaskStartScheduler+0xc0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80040f4:	2301      	movs	r3, #1
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	e001      	b.n	80040fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d102      	bne.n	800410a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004104:	f000 fd0c 	bl	8004b20 <xTimerCreateTimerTask>
 8004108:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d116      	bne.n	800413e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	613b      	str	r3, [r7, #16]
}
 8004122:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004124:	4b13      	ldr	r3, [pc, #76]	@ (8004174 <vTaskStartScheduler+0xc4>)
 8004126:	f04f 32ff 	mov.w	r2, #4294967295
 800412a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800412c:	4b12      	ldr	r3, [pc, #72]	@ (8004178 <vTaskStartScheduler+0xc8>)
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004132:	4b12      	ldr	r3, [pc, #72]	@ (800417c <vTaskStartScheduler+0xcc>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004138:	f001 f88e 	bl	8005258 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800413c:	e00f      	b.n	800415e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d10b      	bne.n	800415e <vTaskStartScheduler+0xae>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	60fb      	str	r3, [r7, #12]
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <vTaskStartScheduler+0xaa>
}
 800415e:	bf00      	nop
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	080059b4 	.word	0x080059b4
 800416c:	080047a9 	.word	0x080047a9
 8004170:	20000d1c 	.word	0x20000d1c
 8004174:	20000d18 	.word	0x20000d18
 8004178:	20000d04 	.word	0x20000d04
 800417c:	20000cfc 	.word	0x20000cfc

08004180 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004184:	4b04      	ldr	r3, [pc, #16]	@ (8004198 <vTaskSuspendAll+0x18>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3301      	adds	r3, #1
 800418a:	4a03      	ldr	r2, [pc, #12]	@ (8004198 <vTaskSuspendAll+0x18>)
 800418c:	6013      	str	r3, [r2, #0]
}
 800418e:	bf00      	nop
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000d20 	.word	0x20000d20

0800419c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041aa:	4b42      	ldr	r3, [pc, #264]	@ (80042b4 <xTaskResumeAll+0x118>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10b      	bne.n	80041ca <xTaskResumeAll+0x2e>
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	603b      	str	r3, [r7, #0]
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop
 80041c8:	e7fd      	b.n	80041c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041ca:	f001 f8b7 	bl	800533c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041ce:	4b39      	ldr	r3, [pc, #228]	@ (80042b4 <xTaskResumeAll+0x118>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	4a37      	ldr	r2, [pc, #220]	@ (80042b4 <xTaskResumeAll+0x118>)
 80041d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041d8:	4b36      	ldr	r3, [pc, #216]	@ (80042b4 <xTaskResumeAll+0x118>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d162      	bne.n	80042a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041e0:	4b35      	ldr	r3, [pc, #212]	@ (80042b8 <xTaskResumeAll+0x11c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d05e      	beq.n	80042a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041e8:	e02f      	b.n	800424a <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80041ea:	4b34      	ldr	r3, [pc, #208]	@ (80042bc <xTaskResumeAll+0x120>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3318      	adds	r3, #24
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff f868 	bl	80032cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3304      	adds	r3, #4
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff f863 	bl	80032cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800420a:	4b2d      	ldr	r3, [pc, #180]	@ (80042c0 <xTaskResumeAll+0x124>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d903      	bls.n	800421a <xTaskResumeAll+0x7e>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004216:	4a2a      	ldr	r2, [pc, #168]	@ (80042c0 <xTaskResumeAll+0x124>)
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4a27      	ldr	r2, [pc, #156]	@ (80042c4 <xTaskResumeAll+0x128>)
 8004228:	441a      	add	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3304      	adds	r3, #4
 800422e:	4619      	mov	r1, r3
 8004230:	4610      	mov	r0, r2
 8004232:	f7fe fff0 	bl	8003216 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800423a:	4b23      	ldr	r3, [pc, #140]	@ (80042c8 <xTaskResumeAll+0x12c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	429a      	cmp	r2, r3
 8004242:	d302      	bcc.n	800424a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004244:	4b21      	ldr	r3, [pc, #132]	@ (80042cc <xTaskResumeAll+0x130>)
 8004246:	2201      	movs	r2, #1
 8004248:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800424a:	4b1c      	ldr	r3, [pc, #112]	@ (80042bc <xTaskResumeAll+0x120>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1cb      	bne.n	80041ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004258:	f000 fb5c 	bl	8004914 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800425c:	4b1c      	ldr	r3, [pc, #112]	@ (80042d0 <xTaskResumeAll+0x134>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d010      	beq.n	800428a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004268:	f000 f844 	bl	80042f4 <xTaskIncrementTick>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004272:	4b16      	ldr	r3, [pc, #88]	@ (80042cc <xTaskResumeAll+0x130>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3b01      	subs	r3, #1
 800427c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f1      	bne.n	8004268 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004284:	4b12      	ldr	r3, [pc, #72]	@ (80042d0 <xTaskResumeAll+0x134>)
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800428a:	4b10      	ldr	r3, [pc, #64]	@ (80042cc <xTaskResumeAll+0x130>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004292:	2301      	movs	r3, #1
 8004294:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004296:	4b0f      	ldr	r3, [pc, #60]	@ (80042d4 <xTaskResumeAll+0x138>)
 8004298:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042a6:	f001 f879 	bl	800539c <vPortExitCritical>

	return xAlreadyYielded;
 80042aa:	68bb      	ldr	r3, [r7, #8]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000d20 	.word	0x20000d20
 80042b8:	20000cf8 	.word	0x20000cf8
 80042bc:	20000cb8 	.word	0x20000cb8
 80042c0:	20000d00 	.word	0x20000d00
 80042c4:	20000828 	.word	0x20000828
 80042c8:	20000824 	.word	0x20000824
 80042cc:	20000d0c 	.word	0x20000d0c
 80042d0:	20000d08 	.word	0x20000d08
 80042d4:	e000ed04 	.word	0xe000ed04

080042d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80042de:	4b04      	ldr	r3, [pc, #16]	@ (80042f0 <xTaskGetTickCount+0x18>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80042e4:	687b      	ldr	r3, [r7, #4]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr
 80042f0:	20000cfc 	.word	0x20000cfc

080042f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042fe:	4b52      	ldr	r3, [pc, #328]	@ (8004448 <xTaskIncrementTick+0x154>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	f040 808f 	bne.w	8004426 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004308:	4b50      	ldr	r3, [pc, #320]	@ (800444c <xTaskIncrementTick+0x158>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3301      	adds	r3, #1
 800430e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004310:	4a4e      	ldr	r2, [pc, #312]	@ (800444c <xTaskIncrementTick+0x158>)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d121      	bne.n	8004360 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800431c:	4b4c      	ldr	r3, [pc, #304]	@ (8004450 <xTaskIncrementTick+0x15c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00b      	beq.n	800433e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	603b      	str	r3, [r7, #0]
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	e7fd      	b.n	800433a <xTaskIncrementTick+0x46>
 800433e:	4b44      	ldr	r3, [pc, #272]	@ (8004450 <xTaskIncrementTick+0x15c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	4b43      	ldr	r3, [pc, #268]	@ (8004454 <xTaskIncrementTick+0x160>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a41      	ldr	r2, [pc, #260]	@ (8004450 <xTaskIncrementTick+0x15c>)
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	4a41      	ldr	r2, [pc, #260]	@ (8004454 <xTaskIncrementTick+0x160>)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	4b41      	ldr	r3, [pc, #260]	@ (8004458 <xTaskIncrementTick+0x164>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3301      	adds	r3, #1
 8004358:	4a3f      	ldr	r2, [pc, #252]	@ (8004458 <xTaskIncrementTick+0x164>)
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	f000 fada 	bl	8004914 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004360:	4b3e      	ldr	r3, [pc, #248]	@ (800445c <xTaskIncrementTick+0x168>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	429a      	cmp	r2, r3
 8004368:	d34e      	bcc.n	8004408 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800436a:	4b39      	ldr	r3, [pc, #228]	@ (8004450 <xTaskIncrementTick+0x15c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <xTaskIncrementTick+0x84>
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <xTaskIncrementTick+0x86>
 8004378:	2300      	movs	r3, #0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d004      	beq.n	8004388 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800437e:	4b37      	ldr	r3, [pc, #220]	@ (800445c <xTaskIncrementTick+0x168>)
 8004380:	f04f 32ff 	mov.w	r2, #4294967295
 8004384:	601a      	str	r2, [r3, #0]
					break;
 8004386:	e03f      	b.n	8004408 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004388:	4b31      	ldr	r3, [pc, #196]	@ (8004450 <xTaskIncrementTick+0x15c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	429a      	cmp	r2, r3
 800439e:	d203      	bcs.n	80043a8 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043a0:	4a2e      	ldr	r2, [pc, #184]	@ (800445c <xTaskIncrementTick+0x168>)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6013      	str	r3, [r2, #0]
						break;
 80043a6:	e02f      	b.n	8004408 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe ff8d 	bl	80032cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d004      	beq.n	80043c4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	3318      	adds	r3, #24
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fe ff84 	bl	80032cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c8:	4b25      	ldr	r3, [pc, #148]	@ (8004460 <xTaskIncrementTick+0x16c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d903      	bls.n	80043d8 <xTaskIncrementTick+0xe4>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d4:	4a22      	ldr	r2, [pc, #136]	@ (8004460 <xTaskIncrementTick+0x16c>)
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004464 <xTaskIncrementTick+0x170>)
 80043e6:	441a      	add	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	3304      	adds	r3, #4
 80043ec:	4619      	mov	r1, r3
 80043ee:	4610      	mov	r0, r2
 80043f0:	f7fe ff11 	bl	8003216 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004468 <xTaskIncrementTick+0x174>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fe:	429a      	cmp	r2, r3
 8004400:	d3b3      	bcc.n	800436a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004402:	2301      	movs	r3, #1
 8004404:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004406:	e7b0      	b.n	800436a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004408:	4b17      	ldr	r3, [pc, #92]	@ (8004468 <xTaskIncrementTick+0x174>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800440e:	4915      	ldr	r1, [pc, #84]	@ (8004464 <xTaskIncrementTick+0x170>)
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d907      	bls.n	8004430 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004420:	2301      	movs	r3, #1
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	e004      	b.n	8004430 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004426:	4b11      	ldr	r3, [pc, #68]	@ (800446c <xTaskIncrementTick+0x178>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	4a0f      	ldr	r2, [pc, #60]	@ (800446c <xTaskIncrementTick+0x178>)
 800442e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004430:	4b0f      	ldr	r3, [pc, #60]	@ (8004470 <xTaskIncrementTick+0x17c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8004438:	2301      	movs	r3, #1
 800443a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800443c:	697b      	ldr	r3, [r7, #20]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000d20 	.word	0x20000d20
 800444c:	20000cfc 	.word	0x20000cfc
 8004450:	20000cb0 	.word	0x20000cb0
 8004454:	20000cb4 	.word	0x20000cb4
 8004458:	20000d10 	.word	0x20000d10
 800445c:	20000d18 	.word	0x20000d18
 8004460:	20000d00 	.word	0x20000d00
 8004464:	20000828 	.word	0x20000828
 8004468:	20000824 	.word	0x20000824
 800446c:	20000d08 	.word	0x20000d08
 8004470:	20000d0c 	.word	0x20000d0c

08004474 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800447a:	4b28      	ldr	r3, [pc, #160]	@ (800451c <vTaskSwitchContext+0xa8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004482:	4b27      	ldr	r3, [pc, #156]	@ (8004520 <vTaskSwitchContext+0xac>)
 8004484:	2201      	movs	r2, #1
 8004486:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004488:	e042      	b.n	8004510 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800448a:	4b25      	ldr	r3, [pc, #148]	@ (8004520 <vTaskSwitchContext+0xac>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004490:	4b24      	ldr	r3, [pc, #144]	@ (8004524 <vTaskSwitchContext+0xb0>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	e011      	b.n	80044bc <vTaskSwitchContext+0x48>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10b      	bne.n	80044b6 <vTaskSwitchContext+0x42>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	607b      	str	r3, [r7, #4]
}
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop
 80044b4:	e7fd      	b.n	80044b2 <vTaskSwitchContext+0x3e>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	491a      	ldr	r1, [pc, #104]	@ (8004528 <vTaskSwitchContext+0xb4>)
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0e3      	beq.n	8004498 <vTaskSwitchContext+0x24>
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4a13      	ldr	r2, [pc, #76]	@ (8004528 <vTaskSwitchContext+0xb4>)
 80044dc:	4413      	add	r3, r2
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	605a      	str	r2, [r3, #4]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	3308      	adds	r3, #8
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d104      	bne.n	8004500 <vTaskSwitchContext+0x8c>
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	605a      	str	r2, [r3, #4]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	4a09      	ldr	r2, [pc, #36]	@ (800452c <vTaskSwitchContext+0xb8>)
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	4a06      	ldr	r2, [pc, #24]	@ (8004524 <vTaskSwitchContext+0xb0>)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6013      	str	r3, [r2, #0]
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000d20 	.word	0x20000d20
 8004520:	20000d0c 	.word	0x20000d0c
 8004524:	20000d00 	.word	0x20000d00
 8004528:	20000828 	.word	0x20000828
 800452c:	20000824 	.word	0x20000824

08004530 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10b      	bne.n	8004558 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	60fb      	str	r3, [r7, #12]
}
 8004552:	bf00      	nop
 8004554:	bf00      	nop
 8004556:	e7fd      	b.n	8004554 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004558:	4b07      	ldr	r3, [pc, #28]	@ (8004578 <vTaskPlaceOnEventList+0x48>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3318      	adds	r3, #24
 800455e:	4619      	mov	r1, r3
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7fe fe7b 	bl	800325c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004566:	2101      	movs	r1, #1
 8004568:	6838      	ldr	r0, [r7, #0]
 800456a:	f000 fa85 	bl	8004a78 <prvAddCurrentTaskToDelayedList>
}
 800456e:	bf00      	nop
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	20000824 	.word	0x20000824

0800457c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10b      	bne.n	80045a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	617b      	str	r3, [r7, #20]
}
 80045a0:	bf00      	nop
 80045a2:	bf00      	nop
 80045a4:	e7fd      	b.n	80045a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045a6:	4b0a      	ldr	r3, [pc, #40]	@ (80045d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3318      	adds	r3, #24
 80045ac:	4619      	mov	r1, r3
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7fe fe31 	bl	8003216 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80045ba:	f04f 33ff 	mov.w	r3, #4294967295
 80045be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	68b8      	ldr	r0, [r7, #8]
 80045c4:	f000 fa58 	bl	8004a78 <prvAddCurrentTaskToDelayedList>
	}
 80045c8:	bf00      	nop
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	20000824 	.word	0x20000824

080045d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10b      	bne.n	8004602 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	60fb      	str	r3, [r7, #12]
}
 80045fc:	bf00      	nop
 80045fe:	bf00      	nop
 8004600:	e7fd      	b.n	80045fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	3318      	adds	r3, #24
 8004606:	4618      	mov	r0, r3
 8004608:	f7fe fe60 	bl	80032cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800460c:	4b1d      	ldr	r3, [pc, #116]	@ (8004684 <xTaskRemoveFromEventList+0xb0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d11d      	bne.n	8004650 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	3304      	adds	r3, #4
 8004618:	4618      	mov	r0, r3
 800461a:	f7fe fe57 	bl	80032cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004622:	4b19      	ldr	r3, [pc, #100]	@ (8004688 <xTaskRemoveFromEventList+0xb4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d903      	bls.n	8004632 <xTaskRemoveFromEventList+0x5e>
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462e:	4a16      	ldr	r2, [pc, #88]	@ (8004688 <xTaskRemoveFromEventList+0xb4>)
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4a13      	ldr	r2, [pc, #76]	@ (800468c <xTaskRemoveFromEventList+0xb8>)
 8004640:	441a      	add	r2, r3
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3304      	adds	r3, #4
 8004646:	4619      	mov	r1, r3
 8004648:	4610      	mov	r0, r2
 800464a:	f7fe fde4 	bl	8003216 <vListInsertEnd>
 800464e:	e005      	b.n	800465c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	3318      	adds	r3, #24
 8004654:	4619      	mov	r1, r3
 8004656:	480e      	ldr	r0, [pc, #56]	@ (8004690 <xTaskRemoveFromEventList+0xbc>)
 8004658:	f7fe fddd 	bl	8003216 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004660:	4b0c      	ldr	r3, [pc, #48]	@ (8004694 <xTaskRemoveFromEventList+0xc0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004666:	429a      	cmp	r2, r3
 8004668:	d905      	bls.n	8004676 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800466a:	2301      	movs	r3, #1
 800466c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800466e:	4b0a      	ldr	r3, [pc, #40]	@ (8004698 <xTaskRemoveFromEventList+0xc4>)
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	e001      	b.n	800467a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800467a:	697b      	ldr	r3, [r7, #20]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	20000d20 	.word	0x20000d20
 8004688:	20000d00 	.word	0x20000d00
 800468c:	20000828 	.word	0x20000828
 8004690:	20000cb8 	.word	0x20000cb8
 8004694:	20000824 	.word	0x20000824
 8004698:	20000d0c 	.word	0x20000d0c

0800469c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046a4:	4b06      	ldr	r3, [pc, #24]	@ (80046c0 <vTaskInternalSetTimeOutState+0x24>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046ac:	4b05      	ldr	r3, [pc, #20]	@ (80046c4 <vTaskInternalSetTimeOutState+0x28>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	605a      	str	r2, [r3, #4]
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20000d10 	.word	0x20000d10
 80046c4:	20000cfc 	.word	0x20000cfc

080046c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	613b      	str	r3, [r7, #16]
}
 80046ea:	bf00      	nop
 80046ec:	bf00      	nop
 80046ee:	e7fd      	b.n	80046ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10b      	bne.n	800470e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	60fb      	str	r3, [r7, #12]
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	e7fd      	b.n	800470a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800470e:	f000 fe15 	bl	800533c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004712:	4b1d      	ldr	r3, [pc, #116]	@ (8004788 <xTaskCheckForTimeOut+0xc0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472a:	d102      	bne.n	8004732 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800472c:	2300      	movs	r3, #0
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	e023      	b.n	800477a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	4b15      	ldr	r3, [pc, #84]	@ (800478c <xTaskCheckForTimeOut+0xc4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d007      	beq.n	800474e <xTaskCheckForTimeOut+0x86>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	429a      	cmp	r2, r3
 8004746:	d302      	bcc.n	800474e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004748:	2301      	movs	r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	e015      	b.n	800477a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	429a      	cmp	r2, r3
 8004756:	d20b      	bcs.n	8004770 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	1ad2      	subs	r2, r2, r3
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7ff ff99 	bl	800469c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800476a:	2300      	movs	r3, #0
 800476c:	61fb      	str	r3, [r7, #28]
 800476e:	e004      	b.n	800477a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004776:	2301      	movs	r3, #1
 8004778:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800477a:	f000 fe0f 	bl	800539c <vPortExitCritical>

	return xReturn;
 800477e:	69fb      	ldr	r3, [r7, #28]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3720      	adds	r7, #32
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20000cfc 	.word	0x20000cfc
 800478c:	20000d10 	.word	0x20000d10

08004790 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004794:	4b03      	ldr	r3, [pc, #12]	@ (80047a4 <vTaskMissedYield+0x14>)
 8004796:	2201      	movs	r2, #1
 8004798:	601a      	str	r2, [r3, #0]
}
 800479a:	bf00      	nop
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20000d0c 	.word	0x20000d0c

080047a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047b0:	f000 f852 	bl	8004858 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047b4:	4b06      	ldr	r3, [pc, #24]	@ (80047d0 <prvIdleTask+0x28>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d9f9      	bls.n	80047b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80047bc:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <prvIdleTask+0x2c>)
 80047be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047cc:	e7f0      	b.n	80047b0 <prvIdleTask+0x8>
 80047ce:	bf00      	nop
 80047d0:	20000828 	.word	0x20000828
 80047d4:	e000ed04 	.word	0xe000ed04

080047d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047de:	2300      	movs	r3, #0
 80047e0:	607b      	str	r3, [r7, #4]
 80047e2:	e00c      	b.n	80047fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	4613      	mov	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4a12      	ldr	r2, [pc, #72]	@ (8004838 <prvInitialiseTaskLists+0x60>)
 80047f0:	4413      	add	r3, r2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe fce4 	bl	80031c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3301      	adds	r3, #1
 80047fc:	607b      	str	r3, [r7, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b37      	cmp	r3, #55	@ 0x37
 8004802:	d9ef      	bls.n	80047e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004804:	480d      	ldr	r0, [pc, #52]	@ (800483c <prvInitialiseTaskLists+0x64>)
 8004806:	f7fe fcdb 	bl	80031c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800480a:	480d      	ldr	r0, [pc, #52]	@ (8004840 <prvInitialiseTaskLists+0x68>)
 800480c:	f7fe fcd8 	bl	80031c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004810:	480c      	ldr	r0, [pc, #48]	@ (8004844 <prvInitialiseTaskLists+0x6c>)
 8004812:	f7fe fcd5 	bl	80031c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004816:	480c      	ldr	r0, [pc, #48]	@ (8004848 <prvInitialiseTaskLists+0x70>)
 8004818:	f7fe fcd2 	bl	80031c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800481c:	480b      	ldr	r0, [pc, #44]	@ (800484c <prvInitialiseTaskLists+0x74>)
 800481e:	f7fe fccf 	bl	80031c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004822:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <prvInitialiseTaskLists+0x78>)
 8004824:	4a05      	ldr	r2, [pc, #20]	@ (800483c <prvInitialiseTaskLists+0x64>)
 8004826:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004828:	4b0a      	ldr	r3, [pc, #40]	@ (8004854 <prvInitialiseTaskLists+0x7c>)
 800482a:	4a05      	ldr	r2, [pc, #20]	@ (8004840 <prvInitialiseTaskLists+0x68>)
 800482c:	601a      	str	r2, [r3, #0]
}
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000828 	.word	0x20000828
 800483c:	20000c88 	.word	0x20000c88
 8004840:	20000c9c 	.word	0x20000c9c
 8004844:	20000cb8 	.word	0x20000cb8
 8004848:	20000ccc 	.word	0x20000ccc
 800484c:	20000ce4 	.word	0x20000ce4
 8004850:	20000cb0 	.word	0x20000cb0
 8004854:	20000cb4 	.word	0x20000cb4

08004858 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800485e:	e019      	b.n	8004894 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004860:	f000 fd6c 	bl	800533c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004864:	4b10      	ldr	r3, [pc, #64]	@ (80048a8 <prvCheckTasksWaitingTermination+0x50>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	4618      	mov	r0, r3
 8004872:	f7fe fd2b 	bl	80032cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004876:	4b0d      	ldr	r3, [pc, #52]	@ (80048ac <prvCheckTasksWaitingTermination+0x54>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3b01      	subs	r3, #1
 800487c:	4a0b      	ldr	r2, [pc, #44]	@ (80048ac <prvCheckTasksWaitingTermination+0x54>)
 800487e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004880:	4b0b      	ldr	r3, [pc, #44]	@ (80048b0 <prvCheckTasksWaitingTermination+0x58>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3b01      	subs	r3, #1
 8004886:	4a0a      	ldr	r2, [pc, #40]	@ (80048b0 <prvCheckTasksWaitingTermination+0x58>)
 8004888:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800488a:	f000 fd87 	bl	800539c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f810 	bl	80048b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004894:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <prvCheckTasksWaitingTermination+0x58>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e1      	bne.n	8004860 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800489c:	bf00      	nop
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000ccc 	.word	0x20000ccc
 80048ac:	20000cf8 	.word	0x20000cf8
 80048b0:	20000ce0 	.word	0x20000ce0

080048b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d108      	bne.n	80048d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 ff00 	bl	80056d0 <vPortFree>
				vPortFree( pxTCB );
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fefd 	bl	80056d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048d6:	e019      	b.n	800490c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d103      	bne.n	80048ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fef4 	bl	80056d0 <vPortFree>
	}
 80048e8:	e010      	b.n	800490c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d00b      	beq.n	800490c <prvDeleteTCB+0x58>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	60fb      	str	r3, [r7, #12]
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	e7fd      	b.n	8004908 <prvDeleteTCB+0x54>
	}
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800491a:	4b0e      	ldr	r3, [pc, #56]	@ (8004954 <prvResetNextTaskUnblockTime+0x40>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <prvResetNextTaskUnblockTime+0x14>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <prvResetNextTaskUnblockTime+0x16>
 8004928:	2300      	movs	r3, #0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d004      	beq.n	8004938 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800492e:	4b0a      	ldr	r3, [pc, #40]	@ (8004958 <prvResetNextTaskUnblockTime+0x44>)
 8004930:	f04f 32ff 	mov.w	r2, #4294967295
 8004934:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004936:	e008      	b.n	800494a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004938:	4b06      	ldr	r3, [pc, #24]	@ (8004954 <prvResetNextTaskUnblockTime+0x40>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4a04      	ldr	r2, [pc, #16]	@ (8004958 <prvResetNextTaskUnblockTime+0x44>)
 8004948:	6013      	str	r3, [r2, #0]
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr
 8004954:	20000cb0 	.word	0x20000cb0
 8004958:	20000d18 	.word	0x20000d18

0800495c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004962:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <xTaskGetSchedulerState+0x34>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d102      	bne.n	8004970 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800496a:	2301      	movs	r3, #1
 800496c:	607b      	str	r3, [r7, #4]
 800496e:	e008      	b.n	8004982 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004970:	4b08      	ldr	r3, [pc, #32]	@ (8004994 <xTaskGetSchedulerState+0x38>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d102      	bne.n	800497e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004978:	2302      	movs	r3, #2
 800497a:	607b      	str	r3, [r7, #4]
 800497c:	e001      	b.n	8004982 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800497e:	2300      	movs	r3, #0
 8004980:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004982:	687b      	ldr	r3, [r7, #4]
	}
 8004984:	4618      	mov	r0, r3
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20000d04 	.word	0x20000d04
 8004994:	20000d20 	.word	0x20000d20

08004998 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d058      	beq.n	8004a60 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049ae:	4b2f      	ldr	r3, [pc, #188]	@ (8004a6c <xTaskPriorityDisinherit+0xd4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d00b      	beq.n	80049d0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	60fb      	str	r3, [r7, #12]
}
 80049ca:	bf00      	nop
 80049cc:	bf00      	nop
 80049ce:	e7fd      	b.n	80049cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10b      	bne.n	80049f0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	60bb      	str	r3, [r7, #8]
}
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
 80049ee:	e7fd      	b.n	80049ec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f4:	1e5a      	subs	r2, r3, #1
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d02c      	beq.n	8004a60 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d128      	bne.n	8004a60 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	3304      	adds	r3, #4
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe fc5a 	bl	80032cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a24:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a30:	4b0f      	ldr	r3, [pc, #60]	@ (8004a70 <xTaskPriorityDisinherit+0xd8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d903      	bls.n	8004a40 <xTaskPriorityDisinherit+0xa8>
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8004a70 <xTaskPriorityDisinherit+0xd8>)
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4a09      	ldr	r2, [pc, #36]	@ (8004a74 <xTaskPriorityDisinherit+0xdc>)
 8004a4e:	441a      	add	r2, r3
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	3304      	adds	r3, #4
 8004a54:	4619      	mov	r1, r3
 8004a56:	4610      	mov	r0, r2
 8004a58:	f7fe fbdd 	bl	8003216 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a60:	697b      	ldr	r3, [r7, #20]
	}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20000824 	.word	0x20000824
 8004a70:	20000d00 	.word	0x20000d00
 8004a74:	20000828 	.word	0x20000828

08004a78 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a82:	4b21      	ldr	r3, [pc, #132]	@ (8004b08 <prvAddCurrentTaskToDelayedList+0x90>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a88:	4b20      	ldr	r3, [pc, #128]	@ (8004b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe fc1c 	bl	80032cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9a:	d10a      	bne.n	8004ab2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8004b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4819      	ldr	r0, [pc, #100]	@ (8004b10 <prvAddCurrentTaskToDelayedList+0x98>)
 8004aac:	f7fe fbb3 	bl	8003216 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ab0:	e026      	b.n	8004b00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004aba:	4b14      	ldr	r3, [pc, #80]	@ (8004b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d209      	bcs.n	8004ade <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aca:	4b12      	ldr	r3, [pc, #72]	@ (8004b14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	4b0f      	ldr	r3, [pc, #60]	@ (8004b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f7fe fbc0 	bl	800325c <vListInsert>
}
 8004adc:	e010      	b.n	8004b00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ade:	4b0e      	ldr	r3, [pc, #56]	@ (8004b18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8004b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4610      	mov	r0, r2
 8004aec:	f7fe fbb6 	bl	800325c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004af0:	4b0a      	ldr	r3, [pc, #40]	@ (8004b1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d202      	bcs.n	8004b00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004afa:	4a08      	ldr	r2, [pc, #32]	@ (8004b1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	6013      	str	r3, [r2, #0]
}
 8004b00:	bf00      	nop
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20000cfc 	.word	0x20000cfc
 8004b0c:	20000824 	.word	0x20000824
 8004b10:	20000ce4 	.word	0x20000ce4
 8004b14:	20000cb4 	.word	0x20000cb4
 8004b18:	20000cb0 	.word	0x20000cb0
 8004b1c:	20000d18 	.word	0x20000d18

08004b20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08a      	sub	sp, #40	@ 0x28
 8004b24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b2a:	f000 fad9 	bl	80050e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba4 <xTimerCreateTimerTask+0x84>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d021      	beq.n	8004b7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b3e:	1d3a      	adds	r2, r7, #4
 8004b40:	f107 0108 	add.w	r1, r7, #8
 8004b44:	f107 030c 	add.w	r3, r7, #12
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fe fb1f 	bl	800318c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	9202      	str	r2, [sp, #8]
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	2302      	movs	r3, #2
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	460a      	mov	r2, r1
 8004b60:	4911      	ldr	r1, [pc, #68]	@ (8004ba8 <xTimerCreateTimerTask+0x88>)
 8004b62:	4812      	ldr	r0, [pc, #72]	@ (8004bac <xTimerCreateTimerTask+0x8c>)
 8004b64:	f7ff f8d2 	bl	8003d0c <xTaskCreateStatic>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	4a11      	ldr	r2, [pc, #68]	@ (8004bb0 <xTimerCreateTimerTask+0x90>)
 8004b6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b6e:	4b10      	ldr	r3, [pc, #64]	@ (8004bb0 <xTimerCreateTimerTask+0x90>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b76:	2301      	movs	r3, #1
 8004b78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10b      	bne.n	8004b98 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	613b      	str	r3, [r7, #16]
}
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	e7fd      	b.n	8004b94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b98:	697b      	ldr	r3, [r7, #20]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000d54 	.word	0x20000d54
 8004ba8:	080059bc 	.word	0x080059bc
 8004bac:	08004cd5 	.word	0x08004cd5
 8004bb0:	20000d58 	.word	0x20000d58

08004bb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	@ 0x28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10b      	bne.n	8004be4 <xTimerGenericCommand+0x30>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	623b      	str	r3, [r7, #32]
}
 8004bde:	bf00      	nop
 8004be0:	bf00      	nop
 8004be2:	e7fd      	b.n	8004be0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004be4:	4b19      	ldr	r3, [pc, #100]	@ (8004c4c <xTimerGenericCommand+0x98>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d02a      	beq.n	8004c42 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b05      	cmp	r3, #5
 8004bfc:	dc18      	bgt.n	8004c30 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004bfe:	f7ff fead 	bl	800495c <xTaskGetSchedulerState>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d109      	bne.n	8004c1c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c08:	4b10      	ldr	r3, [pc, #64]	@ (8004c4c <xTimerGenericCommand+0x98>)
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	f107 0110 	add.w	r1, r7, #16
 8004c10:	2300      	movs	r3, #0
 8004c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c14:	f7fe fc8e 	bl	8003534 <xQueueGenericSend>
 8004c18:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c1a:	e012      	b.n	8004c42 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c4c <xTimerGenericCommand+0x98>)
 8004c1e:	6818      	ldr	r0, [r3, #0]
 8004c20:	f107 0110 	add.w	r1, r7, #16
 8004c24:	2300      	movs	r3, #0
 8004c26:	2200      	movs	r2, #0
 8004c28:	f7fe fc84 	bl	8003534 <xQueueGenericSend>
 8004c2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c2e:	e008      	b.n	8004c42 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c30:	4b06      	ldr	r3, [pc, #24]	@ (8004c4c <xTimerGenericCommand+0x98>)
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	f107 0110 	add.w	r1, r7, #16
 8004c38:	2300      	movs	r3, #0
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	f7fe fd7c 	bl	8003738 <xQueueGenericSendFromISR>
 8004c40:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3728      	adds	r7, #40	@ 0x28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	20000d54 	.word	0x20000d54

08004c50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd0 <prvProcessExpiredTimer+0x80>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fe fb2f 	bl	80032cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d123      	bne.n	8004cbe <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	18d1      	adds	r1, r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	6978      	ldr	r0, [r7, #20]
 8004c84:	f000 f8cc 	bl	8004e20 <prvInsertTimerInActiveList>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d017      	beq.n	8004cbe <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	2300      	movs	r3, #0
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	2100      	movs	r1, #0
 8004c98:	6978      	ldr	r0, [r7, #20]
 8004c9a:	f7ff ff8b 	bl	8004bb4 <xTimerGenericCommand>
 8004c9e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	60fb      	str	r3, [r7, #12]
}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	e7fd      	b.n	8004cba <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	6978      	ldr	r0, [r7, #20]
 8004cc4:	4798      	blx	r3
}
 8004cc6:	bf00      	nop
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000d4c 	.word	0x20000d4c

08004cd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cdc:	f107 0308 	add.w	r3, r7, #8
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 f859 	bl	8004d98 <prvGetNextExpireTime>
 8004ce6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4619      	mov	r1, r3
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f805 	bl	8004cfc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004cf2:	f000 f8d7 	bl	8004ea4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cf6:	bf00      	nop
 8004cf8:	e7f0      	b.n	8004cdc <prvTimerTask+0x8>
	...

08004cfc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d06:	f7ff fa3b 	bl	8004180 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d0a:	f107 0308 	add.w	r3, r7, #8
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 f866 	bl	8004de0 <prvSampleTimeNow>
 8004d14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d130      	bne.n	8004d7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <prvProcessTimerOrBlockTask+0x3c>
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d806      	bhi.n	8004d38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d2a:	f7ff fa37 	bl	800419c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d2e:	68f9      	ldr	r1, [r7, #12]
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff ff8d 	bl	8004c50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d36:	e024      	b.n	8004d82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d008      	beq.n	8004d50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d3e:	4b13      	ldr	r3, [pc, #76]	@ (8004d8c <prvProcessTimerOrBlockTask+0x90>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bf0c      	ite	eq
 8004d48:	2301      	moveq	r3, #1
 8004d4a:	2300      	movne	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d50:	4b0f      	ldr	r3, [pc, #60]	@ (8004d90 <prvProcessTimerOrBlockTask+0x94>)
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	f7fe ffa1 	bl	8003ca4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d62:	f7ff fa1b 	bl	800419c <xTaskResumeAll>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10a      	bne.n	8004d82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d6c:	4b09      	ldr	r3, [pc, #36]	@ (8004d94 <prvProcessTimerOrBlockTask+0x98>)
 8004d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	f3bf 8f6f 	isb	sy
}
 8004d7c:	e001      	b.n	8004d82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d7e:	f7ff fa0d 	bl	800419c <xTaskResumeAll>
}
 8004d82:	bf00      	nop
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000d50 	.word	0x20000d50
 8004d90:	20000d54 	.word	0x20000d54
 8004d94:	e000ed04 	.word	0xe000ed04

08004d98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004da0:	4b0e      	ldr	r3, [pc, #56]	@ (8004ddc <prvGetNextExpireTime+0x44>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bf0c      	ite	eq
 8004daa:	2301      	moveq	r3, #1
 8004dac:	2300      	movne	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	461a      	mov	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d105      	bne.n	8004dca <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dbe:	4b07      	ldr	r3, [pc, #28]	@ (8004ddc <prvGetNextExpireTime+0x44>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e001      	b.n	8004dce <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004dce:	68fb      	ldr	r3, [r7, #12]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	20000d4c 	.word	0x20000d4c

08004de0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004de8:	f7ff fa76 	bl	80042d8 <xTaskGetTickCount>
 8004dec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004dee:	4b0b      	ldr	r3, [pc, #44]	@ (8004e1c <prvSampleTimeNow+0x3c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d205      	bcs.n	8004e04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004df8:	f000 f910 	bl	800501c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	e002      	b.n	8004e0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e0a:	4a04      	ldr	r2, [pc, #16]	@ (8004e1c <prvSampleTimeNow+0x3c>)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e10:	68fb      	ldr	r3, [r7, #12]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000d5c 	.word	0x20000d5c

08004e20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d812      	bhi.n	8004e6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	1ad2      	subs	r2, r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d302      	bcc.n	8004e5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e54:	2301      	movs	r3, #1
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	e01b      	b.n	8004e92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e5a:	4b10      	ldr	r3, [pc, #64]	@ (8004e9c <prvInsertTimerInActiveList+0x7c>)
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3304      	adds	r3, #4
 8004e62:	4619      	mov	r1, r3
 8004e64:	4610      	mov	r0, r2
 8004e66:	f7fe f9f9 	bl	800325c <vListInsert>
 8004e6a:	e012      	b.n	8004e92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d206      	bcs.n	8004e82 <prvInsertTimerInActiveList+0x62>
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d302      	bcc.n	8004e82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	e007      	b.n	8004e92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e82:	4b07      	ldr	r3, [pc, #28]	@ (8004ea0 <prvInsertTimerInActiveList+0x80>)
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	f7fe f9e5 	bl	800325c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e92:	697b      	ldr	r3, [r7, #20]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20000d50 	.word	0x20000d50
 8004ea0:	20000d4c 	.word	0x20000d4c

08004ea4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08e      	sub	sp, #56	@ 0x38
 8004ea8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004eaa:	e0a5      	b.n	8004ff8 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	da19      	bge.n	8004ee6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004eb2:	1d3b      	adds	r3, r7, #4
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10b      	bne.n	8004ed6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	61fb      	str	r3, [r7, #28]
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	e7fd      	b.n	8004ed2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004edc:	6850      	ldr	r0, [r2, #4]
 8004ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ee0:	6892      	ldr	r2, [r2, #8]
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f2c0 8085 	blt.w	8004ff8 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d004      	beq.n	8004f04 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	3304      	adds	r3, #4
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe f9e4 	bl	80032cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f04:	463b      	mov	r3, r7
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff ff6a 	bl	8004de0 <prvSampleTimeNow>
 8004f0c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b09      	cmp	r3, #9
 8004f12:	d86c      	bhi.n	8004fee <prvProcessReceivedCommands+0x14a>
 8004f14:	a201      	add	r2, pc, #4	@ (adr r2, 8004f1c <prvProcessReceivedCommands+0x78>)
 8004f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1a:	bf00      	nop
 8004f1c:	08004f45 	.word	0x08004f45
 8004f20:	08004f45 	.word	0x08004f45
 8004f24:	08004f45 	.word	0x08004f45
 8004f28:	08004fef 	.word	0x08004fef
 8004f2c:	08004fa3 	.word	0x08004fa3
 8004f30:	08004fdd 	.word	0x08004fdd
 8004f34:	08004f45 	.word	0x08004f45
 8004f38:	08004f45 	.word	0x08004f45
 8004f3c:	08004fef 	.word	0x08004fef
 8004f40:	08004fa3 	.word	0x08004fa3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	18d1      	adds	r1, r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f52:	f7ff ff65 	bl	8004e20 <prvInsertTimerInActiveList>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d04a      	beq.n	8004ff2 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f62:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d142      	bne.n	8004ff2 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	441a      	add	r2, r3
 8004f74:	2300      	movs	r3, #0
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f7e:	f7ff fe19 	bl	8004bb4 <xTimerGenericCommand>
 8004f82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d133      	bne.n	8004ff2 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	61bb      	str	r3, [r7, #24]
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	e7fd      	b.n	8004f9e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	617b      	str	r3, [r7, #20]
}
 8004fc2:	bf00      	nop
 8004fc4:	bf00      	nop
 8004fc6:	e7fd      	b.n	8004fc4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fca:	699a      	ldr	r2, [r3, #24]
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	18d1      	adds	r1, r2, r3
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fd6:	f7ff ff23 	bl	8004e20 <prvInsertTimerInActiveList>
					break;
 8004fda:	e00d      	b.n	8004ff8 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fde:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d107      	bne.n	8004ff6 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8004fe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fe8:	f000 fb72 	bl	80056d0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004fec:	e003      	b.n	8004ff6 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8004fee:	bf00      	nop
 8004ff0:	e002      	b.n	8004ff8 <prvProcessReceivedCommands+0x154>
					break;
 8004ff2:	bf00      	nop
 8004ff4:	e000      	b.n	8004ff8 <prvProcessReceivedCommands+0x154>
					break;
 8004ff6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ff8:	4b07      	ldr	r3, [pc, #28]	@ (8005018 <prvProcessReceivedCommands+0x174>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	1d39      	adds	r1, r7, #4
 8004ffe:	2200      	movs	r2, #0
 8005000:	4618      	mov	r0, r3
 8005002:	f7fe fc35 	bl	8003870 <xQueueReceive>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	f47f af4f 	bne.w	8004eac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800500e:	bf00      	nop
 8005010:	bf00      	nop
 8005012:	3730      	adds	r7, #48	@ 0x30
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	20000d54 	.word	0x20000d54

0800501c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005022:	e046      	b.n	80050b2 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005024:	4b2c      	ldr	r3, [pc, #176]	@ (80050d8 <prvSwitchTimerLists+0xbc>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800502e:	4b2a      	ldr	r3, [pc, #168]	@ (80050d8 <prvSwitchTimerLists+0xbc>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3304      	adds	r3, #4
 800503c:	4618      	mov	r0, r3
 800503e:	f7fe f945 	bl	80032cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d12f      	bne.n	80050b2 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4413      	add	r3, r2
 800505a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	429a      	cmp	r2, r3
 8005062:	d90e      	bls.n	8005082 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005070:	4b19      	ldr	r3, [pc, #100]	@ (80050d8 <prvSwitchTimerLists+0xbc>)
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3304      	adds	r3, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f7fe f8ee 	bl	800325c <vListInsert>
 8005080:	e017      	b.n	80050b2 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005082:	2300      	movs	r3, #0
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	2300      	movs	r3, #0
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	2100      	movs	r1, #0
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f7ff fd91 	bl	8004bb4 <xTimerGenericCommand>
 8005092:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10b      	bne.n	80050b2 <prvSwitchTimerLists+0x96>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	603b      	str	r3, [r7, #0]
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	e7fd      	b.n	80050ae <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050b2:	4b09      	ldr	r3, [pc, #36]	@ (80050d8 <prvSwitchTimerLists+0xbc>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1b3      	bne.n	8005024 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80050bc:	4b06      	ldr	r3, [pc, #24]	@ (80050d8 <prvSwitchTimerLists+0xbc>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80050c2:	4b06      	ldr	r3, [pc, #24]	@ (80050dc <prvSwitchTimerLists+0xc0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a04      	ldr	r2, [pc, #16]	@ (80050d8 <prvSwitchTimerLists+0xbc>)
 80050c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80050ca:	4a04      	ldr	r2, [pc, #16]	@ (80050dc <prvSwitchTimerLists+0xc0>)
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	6013      	str	r3, [r2, #0]
}
 80050d0:	bf00      	nop
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	20000d4c 	.word	0x20000d4c
 80050dc:	20000d50 	.word	0x20000d50

080050e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80050e6:	f000 f929 	bl	800533c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80050ea:	4b15      	ldr	r3, [pc, #84]	@ (8005140 <prvCheckForValidListAndQueue+0x60>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d120      	bne.n	8005134 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80050f2:	4814      	ldr	r0, [pc, #80]	@ (8005144 <prvCheckForValidListAndQueue+0x64>)
 80050f4:	f7fe f864 	bl	80031c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80050f8:	4813      	ldr	r0, [pc, #76]	@ (8005148 <prvCheckForValidListAndQueue+0x68>)
 80050fa:	f7fe f861 	bl	80031c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80050fe:	4b13      	ldr	r3, [pc, #76]	@ (800514c <prvCheckForValidListAndQueue+0x6c>)
 8005100:	4a10      	ldr	r2, [pc, #64]	@ (8005144 <prvCheckForValidListAndQueue+0x64>)
 8005102:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005104:	4b12      	ldr	r3, [pc, #72]	@ (8005150 <prvCheckForValidListAndQueue+0x70>)
 8005106:	4a10      	ldr	r2, [pc, #64]	@ (8005148 <prvCheckForValidListAndQueue+0x68>)
 8005108:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800510a:	2300      	movs	r3, #0
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	4b11      	ldr	r3, [pc, #68]	@ (8005154 <prvCheckForValidListAndQueue+0x74>)
 8005110:	4a11      	ldr	r2, [pc, #68]	@ (8005158 <prvCheckForValidListAndQueue+0x78>)
 8005112:	2110      	movs	r1, #16
 8005114:	200a      	movs	r0, #10
 8005116:	f7fe f96d 	bl	80033f4 <xQueueGenericCreateStatic>
 800511a:	4603      	mov	r3, r0
 800511c:	4a08      	ldr	r2, [pc, #32]	@ (8005140 <prvCheckForValidListAndQueue+0x60>)
 800511e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005120:	4b07      	ldr	r3, [pc, #28]	@ (8005140 <prvCheckForValidListAndQueue+0x60>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005128:	4b05      	ldr	r3, [pc, #20]	@ (8005140 <prvCheckForValidListAndQueue+0x60>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	490b      	ldr	r1, [pc, #44]	@ (800515c <prvCheckForValidListAndQueue+0x7c>)
 800512e:	4618      	mov	r0, r3
 8005130:	f7fe fd90 	bl	8003c54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005134:	f000 f932 	bl	800539c <vPortExitCritical>
}
 8005138:	bf00      	nop
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000d54 	.word	0x20000d54
 8005144:	20000d24 	.word	0x20000d24
 8005148:	20000d38 	.word	0x20000d38
 800514c:	20000d4c 	.word	0x20000d4c
 8005150:	20000d50 	.word	0x20000d50
 8005154:	20000e00 	.word	0x20000e00
 8005158:	20000d60 	.word	0x20000d60
 800515c:	080059c4 	.word	0x080059c4

08005160 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3b04      	subs	r3, #4
 8005170:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3b04      	subs	r3, #4
 800517e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f023 0201 	bic.w	r2, r3, #1
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3b04      	subs	r3, #4
 800518e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005190:	4a08      	ldr	r2, [pc, #32]	@ (80051b4 <pxPortInitialiseStack+0x54>)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3b14      	subs	r3, #20
 800519a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3b20      	subs	r3, #32
 80051a6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051a8:	68fb      	ldr	r3, [r7, #12]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bc80      	pop	{r7}
 80051b2:	4770      	bx	lr
 80051b4:	080051b9 	.word	0x080051b9

080051b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80051be:	2300      	movs	r3, #0
 80051c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051c2:	4b12      	ldr	r3, [pc, #72]	@ (800520c <prvTaskExitError+0x54>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ca:	d00b      	beq.n	80051e4 <prvTaskExitError+0x2c>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	60fb      	str	r3, [r7, #12]
}
 80051de:	bf00      	nop
 80051e0:	bf00      	nop
 80051e2:	e7fd      	b.n	80051e0 <prvTaskExitError+0x28>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	60bb      	str	r3, [r7, #8]
}
 80051f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051f8:	bf00      	nop
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0fc      	beq.n	80051fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr
 800520c:	20000024 	.word	0x20000024

08005210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005210:	4b07      	ldr	r3, [pc, #28]	@ (8005230 <pxCurrentTCBConst2>)
 8005212:	6819      	ldr	r1, [r3, #0]
 8005214:	6808      	ldr	r0, [r1, #0]
 8005216:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800521a:	f380 8809 	msr	PSP, r0
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f04f 0000 	mov.w	r0, #0
 8005226:	f380 8811 	msr	BASEPRI, r0
 800522a:	f04e 0e0d 	orr.w	lr, lr, #13
 800522e:	4770      	bx	lr

08005230 <pxCurrentTCBConst2>:
 8005230:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop

08005238 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005238:	4806      	ldr	r0, [pc, #24]	@ (8005254 <prvPortStartFirstTask+0x1c>)
 800523a:	6800      	ldr	r0, [r0, #0]
 800523c:	6800      	ldr	r0, [r0, #0]
 800523e:	f380 8808 	msr	MSP, r0
 8005242:	b662      	cpsie	i
 8005244:	b661      	cpsie	f
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	df00      	svc	0
 8005250:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005252:	bf00      	nop
 8005254:	e000ed08 	.word	0xe000ed08

08005258 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800525e:	4b32      	ldr	r3, [pc, #200]	@ (8005328 <xPortStartScheduler+0xd0>)
 8005260:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	b2db      	uxtb	r3, r3
 8005268:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	22ff      	movs	r2, #255	@ 0xff
 800526e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	b2db      	uxtb	r3, r3
 800527c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005280:	b2da      	uxtb	r2, r3
 8005282:	4b2a      	ldr	r3, [pc, #168]	@ (800532c <xPortStartScheduler+0xd4>)
 8005284:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005286:	4b2a      	ldr	r3, [pc, #168]	@ (8005330 <xPortStartScheduler+0xd8>)
 8005288:	2207      	movs	r2, #7
 800528a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800528c:	e009      	b.n	80052a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800528e:	4b28      	ldr	r3, [pc, #160]	@ (8005330 <xPortStartScheduler+0xd8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3b01      	subs	r3, #1
 8005294:	4a26      	ldr	r2, [pc, #152]	@ (8005330 <xPortStartScheduler+0xd8>)
 8005296:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052a2:	78fb      	ldrb	r3, [r7, #3]
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052aa:	2b80      	cmp	r3, #128	@ 0x80
 80052ac:	d0ef      	beq.n	800528e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052ae:	4b20      	ldr	r3, [pc, #128]	@ (8005330 <xPortStartScheduler+0xd8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f1c3 0307 	rsb	r3, r3, #7
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d00b      	beq.n	80052d2 <xPortStartScheduler+0x7a>
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	60bb      	str	r3, [r7, #8]
}
 80052cc:	bf00      	nop
 80052ce:	bf00      	nop
 80052d0:	e7fd      	b.n	80052ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052d2:	4b17      	ldr	r3, [pc, #92]	@ (8005330 <xPortStartScheduler+0xd8>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	4a15      	ldr	r2, [pc, #84]	@ (8005330 <xPortStartScheduler+0xd8>)
 80052da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052dc:	4b14      	ldr	r3, [pc, #80]	@ (8005330 <xPortStartScheduler+0xd8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052e4:	4a12      	ldr	r2, [pc, #72]	@ (8005330 <xPortStartScheduler+0xd8>)
 80052e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052f0:	4b10      	ldr	r3, [pc, #64]	@ (8005334 <xPortStartScheduler+0xdc>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a0f      	ldr	r2, [pc, #60]	@ (8005334 <xPortStartScheduler+0xdc>)
 80052f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005334 <xPortStartScheduler+0xdc>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a0c      	ldr	r2, [pc, #48]	@ (8005334 <xPortStartScheduler+0xdc>)
 8005302:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005306:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005308:	f000 f8b8 	bl	800547c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800530c:	4b0a      	ldr	r3, [pc, #40]	@ (8005338 <xPortStartScheduler+0xe0>)
 800530e:	2200      	movs	r2, #0
 8005310:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005312:	f7ff ff91 	bl	8005238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005316:	f7ff f8ad 	bl	8004474 <vTaskSwitchContext>
	prvTaskExitError();
 800531a:	f7ff ff4d 	bl	80051b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	e000e400 	.word	0xe000e400
 800532c:	20000e50 	.word	0x20000e50
 8005330:	20000e54 	.word	0x20000e54
 8005334:	e000ed20 	.word	0xe000ed20
 8005338:	20000024 	.word	0x20000024

0800533c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	607b      	str	r3, [r7, #4]
}
 8005354:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005356:	4b0f      	ldr	r3, [pc, #60]	@ (8005394 <vPortEnterCritical+0x58>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3301      	adds	r3, #1
 800535c:	4a0d      	ldr	r2, [pc, #52]	@ (8005394 <vPortEnterCritical+0x58>)
 800535e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005360:	4b0c      	ldr	r3, [pc, #48]	@ (8005394 <vPortEnterCritical+0x58>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d110      	bne.n	800538a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005368:	4b0b      	ldr	r3, [pc, #44]	@ (8005398 <vPortEnterCritical+0x5c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00b      	beq.n	800538a <vPortEnterCritical+0x4e>
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	603b      	str	r3, [r7, #0]
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop
 8005388:	e7fd      	b.n	8005386 <vPortEnterCritical+0x4a>
	}
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr
 8005394:	20000024 	.word	0x20000024
 8005398:	e000ed04 	.word	0xe000ed04

0800539c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053a2:	4b12      	ldr	r3, [pc, #72]	@ (80053ec <vPortExitCritical+0x50>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10b      	bne.n	80053c2 <vPortExitCritical+0x26>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	607b      	str	r3, [r7, #4]
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	e7fd      	b.n	80053be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053c2:	4b0a      	ldr	r3, [pc, #40]	@ (80053ec <vPortExitCritical+0x50>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	4a08      	ldr	r2, [pc, #32]	@ (80053ec <vPortExitCritical+0x50>)
 80053ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053cc:	4b07      	ldr	r3, [pc, #28]	@ (80053ec <vPortExitCritical+0x50>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d105      	bne.n	80053e0 <vPortExitCritical+0x44>
 80053d4:	2300      	movs	r3, #0
 80053d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	f383 8811 	msr	BASEPRI, r3
}
 80053de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20000024 	.word	0x20000024

080053f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053f0:	f3ef 8009 	mrs	r0, PSP
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005430 <pxCurrentTCBConst>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005400:	6010      	str	r0, [r2, #0]
 8005402:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005406:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800540a:	f380 8811 	msr	BASEPRI, r0
 800540e:	f7ff f831 	bl	8004474 <vTaskSwitchContext>
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	f380 8811 	msr	BASEPRI, r0
 800541a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800541e:	6819      	ldr	r1, [r3, #0]
 8005420:	6808      	ldr	r0, [r1, #0]
 8005422:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005426:	f380 8809 	msr	PSP, r0
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	4770      	bx	lr

08005430 <pxCurrentTCBConst>:
 8005430:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005434:	bf00      	nop
 8005436:	bf00      	nop

08005438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	607b      	str	r3, [r7, #4]
}
 8005450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005452:	f7fe ff4f 	bl	80042f4 <xTaskIncrementTick>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800545c:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <SysTick_Handler+0x40>)
 800545e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	2300      	movs	r3, #0
 8005466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f383 8811 	msr	BASEPRI, r3
}
 800546e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005470:	bf00      	nop
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	e000ed04 	.word	0xe000ed04

0800547c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005480:	4b0a      	ldr	r3, [pc, #40]	@ (80054ac <vPortSetupTimerInterrupt+0x30>)
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005486:	4b0a      	ldr	r3, [pc, #40]	@ (80054b0 <vPortSetupTimerInterrupt+0x34>)
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800548c:	4b09      	ldr	r3, [pc, #36]	@ (80054b4 <vPortSetupTimerInterrupt+0x38>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a09      	ldr	r2, [pc, #36]	@ (80054b8 <vPortSetupTimerInterrupt+0x3c>)
 8005492:	fba2 2303 	umull	r2, r3, r2, r3
 8005496:	099b      	lsrs	r3, r3, #6
 8005498:	4a08      	ldr	r2, [pc, #32]	@ (80054bc <vPortSetupTimerInterrupt+0x40>)
 800549a:	3b01      	subs	r3, #1
 800549c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800549e:	4b03      	ldr	r3, [pc, #12]	@ (80054ac <vPortSetupTimerInterrupt+0x30>)
 80054a0:	2207      	movs	r2, #7
 80054a2:	601a      	str	r2, [r3, #0]
}
 80054a4:	bf00      	nop
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr
 80054ac:	e000e010 	.word	0xe000e010
 80054b0:	e000e018 	.word	0xe000e018
 80054b4:	20000018 	.word	0x20000018
 80054b8:	10624dd3 	.word	0x10624dd3
 80054bc:	e000e014 	.word	0xe000e014

080054c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80054c6:	f3ef 8305 	mrs	r3, IPSR
 80054ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b0f      	cmp	r3, #15
 80054d0:	d915      	bls.n	80054fe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054d2:	4a17      	ldr	r2, [pc, #92]	@ (8005530 <vPortValidateInterruptPriority+0x70>)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054dc:	4b15      	ldr	r3, [pc, #84]	@ (8005534 <vPortValidateInterruptPriority+0x74>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	7afa      	ldrb	r2, [r7, #11]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d20b      	bcs.n	80054fe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	607b      	str	r3, [r7, #4]
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	e7fd      	b.n	80054fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005538 <vPortValidateInterruptPriority+0x78>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005506:	4b0d      	ldr	r3, [pc, #52]	@ (800553c <vPortValidateInterruptPriority+0x7c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d90b      	bls.n	8005526 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	603b      	str	r3, [r7, #0]
}
 8005520:	bf00      	nop
 8005522:	bf00      	nop
 8005524:	e7fd      	b.n	8005522 <vPortValidateInterruptPriority+0x62>
	}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr
 8005530:	e000e3f0 	.word	0xe000e3f0
 8005534:	20000e50 	.word	0x20000e50
 8005538:	e000ed0c 	.word	0xe000ed0c
 800553c:	20000e54 	.word	0x20000e54

08005540 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08a      	sub	sp, #40	@ 0x28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800554c:	f7fe fe18 	bl	8004180 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005550:	4b5a      	ldr	r3, [pc, #360]	@ (80056bc <pvPortMalloc+0x17c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005558:	f000 f916 	bl	8005788 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800555c:	4b58      	ldr	r3, [pc, #352]	@ (80056c0 <pvPortMalloc+0x180>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4013      	ands	r3, r2
 8005564:	2b00      	cmp	r3, #0
 8005566:	f040 8090 	bne.w	800568a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01e      	beq.n	80055ae <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005570:	2208      	movs	r2, #8
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4413      	add	r3, r2
 8005576:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	2b00      	cmp	r3, #0
 8005580:	d015      	beq.n	80055ae <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f023 0307 	bic.w	r3, r3, #7
 8005588:	3308      	adds	r3, #8
 800558a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <pvPortMalloc+0x6e>
	__asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	617b      	str	r3, [r7, #20]
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	e7fd      	b.n	80055aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d06a      	beq.n	800568a <pvPortMalloc+0x14a>
 80055b4:	4b43      	ldr	r3, [pc, #268]	@ (80056c4 <pvPortMalloc+0x184>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d865      	bhi.n	800568a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055be:	4b42      	ldr	r3, [pc, #264]	@ (80056c8 <pvPortMalloc+0x188>)
 80055c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055c2:	4b41      	ldr	r3, [pc, #260]	@ (80056c8 <pvPortMalloc+0x188>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055c8:	e004      	b.n	80055d4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d903      	bls.n	80055e6 <pvPortMalloc+0xa6>
 80055de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f1      	bne.n	80055ca <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055e6:	4b35      	ldr	r3, [pc, #212]	@ (80056bc <pvPortMalloc+0x17c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d04c      	beq.n	800568a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2208      	movs	r2, #8
 80055f6:	4413      	add	r3, r2
 80055f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	1ad2      	subs	r2, r2, r3
 800560a:	2308      	movs	r3, #8
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	429a      	cmp	r2, r3
 8005610:	d920      	bls.n	8005654 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4413      	add	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00b      	beq.n	800563c <pvPortMalloc+0xfc>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	613b      	str	r3, [r7, #16]
}
 8005636:	bf00      	nop
 8005638:	bf00      	nop
 800563a:	e7fd      	b.n	8005638 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800563c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	1ad2      	subs	r2, r2, r3
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800564e:	69b8      	ldr	r0, [r7, #24]
 8005650:	f000 f8fc 	bl	800584c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005654:	4b1b      	ldr	r3, [pc, #108]	@ (80056c4 <pvPortMalloc+0x184>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	4a19      	ldr	r2, [pc, #100]	@ (80056c4 <pvPortMalloc+0x184>)
 8005660:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005662:	4b18      	ldr	r3, [pc, #96]	@ (80056c4 <pvPortMalloc+0x184>)
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	4b19      	ldr	r3, [pc, #100]	@ (80056cc <pvPortMalloc+0x18c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d203      	bcs.n	8005676 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800566e:	4b15      	ldr	r3, [pc, #84]	@ (80056c4 <pvPortMalloc+0x184>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a16      	ldr	r2, [pc, #88]	@ (80056cc <pvPortMalloc+0x18c>)
 8005674:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	4b11      	ldr	r3, [pc, #68]	@ (80056c0 <pvPortMalloc+0x180>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	431a      	orrs	r2, r3
 8005680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005682:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800568a:	f7fe fd87 	bl	800419c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00b      	beq.n	80056b0 <pvPortMalloc+0x170>
	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	60fb      	str	r3, [r7, #12]
}
 80056aa:	bf00      	nop
 80056ac:	bf00      	nop
 80056ae:	e7fd      	b.n	80056ac <pvPortMalloc+0x16c>
	return pvReturn;
 80056b0:	69fb      	ldr	r3, [r7, #28]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3728      	adds	r7, #40	@ 0x28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	20001a60 	.word	0x20001a60
 80056c0:	20001a6c 	.word	0x20001a6c
 80056c4:	20001a64 	.word	0x20001a64
 80056c8:	20001a58 	.word	0x20001a58
 80056cc:	20001a68 	.word	0x20001a68

080056d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d04a      	beq.n	8005778 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056e2:	2308      	movs	r3, #8
 80056e4:	425b      	negs	r3, r3
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4413      	add	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	4b22      	ldr	r3, [pc, #136]	@ (8005780 <vPortFree+0xb0>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4013      	ands	r3, r2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10b      	bne.n	8005716 <vPortFree+0x46>
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	60fb      	str	r3, [r7, #12]
}
 8005710:	bf00      	nop
 8005712:	bf00      	nop
 8005714:	e7fd      	b.n	8005712 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <vPortFree+0x66>
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	60bb      	str	r3, [r7, #8]
}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	e7fd      	b.n	8005732 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	4b11      	ldr	r3, [pc, #68]	@ (8005780 <vPortFree+0xb0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4013      	ands	r3, r2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d019      	beq.n	8005778 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d115      	bne.n	8005778 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	4b0b      	ldr	r3, [pc, #44]	@ (8005780 <vPortFree+0xb0>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	43db      	mvns	r3, r3
 8005756:	401a      	ands	r2, r3
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800575c:	f7fe fd10 	bl	8004180 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	4b07      	ldr	r3, [pc, #28]	@ (8005784 <vPortFree+0xb4>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4413      	add	r3, r2
 800576a:	4a06      	ldr	r2, [pc, #24]	@ (8005784 <vPortFree+0xb4>)
 800576c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800576e:	6938      	ldr	r0, [r7, #16]
 8005770:	f000 f86c 	bl	800584c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005774:	f7fe fd12 	bl	800419c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005778:	bf00      	nop
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	20001a6c 	.word	0x20001a6c
 8005784:	20001a64 	.word	0x20001a64

08005788 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800578e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005792:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005794:	4b27      	ldr	r3, [pc, #156]	@ (8005834 <prvHeapInit+0xac>)
 8005796:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00c      	beq.n	80057bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3307      	adds	r3, #7
 80057a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0307 	bic.w	r3, r3, #7
 80057ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005834 <prvHeapInit+0xac>)
 80057b8:	4413      	add	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005838 <prvHeapInit+0xb0>)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005838 <prvHeapInit+0xb0>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	4413      	add	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057d4:	2208      	movs	r2, #8
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0307 	bic.w	r3, r3, #7
 80057e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4a15      	ldr	r2, [pc, #84]	@ (800583c <prvHeapInit+0xb4>)
 80057e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057ea:	4b14      	ldr	r3, [pc, #80]	@ (800583c <prvHeapInit+0xb4>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2200      	movs	r2, #0
 80057f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057f2:	4b12      	ldr	r3, [pc, #72]	@ (800583c <prvHeapInit+0xb4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	1ad2      	subs	r2, r2, r3
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005808:	4b0c      	ldr	r3, [pc, #48]	@ (800583c <prvHeapInit+0xb4>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	4a0a      	ldr	r2, [pc, #40]	@ (8005840 <prvHeapInit+0xb8>)
 8005816:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	4a09      	ldr	r2, [pc, #36]	@ (8005844 <prvHeapInit+0xbc>)
 800581e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005820:	4b09      	ldr	r3, [pc, #36]	@ (8005848 <prvHeapInit+0xc0>)
 8005822:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005826:	601a      	str	r2, [r3, #0]
}
 8005828:	bf00      	nop
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	bc80      	pop	{r7}
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000e58 	.word	0x20000e58
 8005838:	20001a58 	.word	0x20001a58
 800583c:	20001a60 	.word	0x20001a60
 8005840:	20001a68 	.word	0x20001a68
 8005844:	20001a64 	.word	0x20001a64
 8005848:	20001a6c 	.word	0x20001a6c

0800584c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005854:	4b27      	ldr	r3, [pc, #156]	@ (80058f4 <prvInsertBlockIntoFreeList+0xa8>)
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	e002      	b.n	8005860 <prvInsertBlockIntoFreeList+0x14>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	429a      	cmp	r2, r3
 8005868:	d8f7      	bhi.n	800585a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	4413      	add	r3, r2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	429a      	cmp	r2, r3
 800587a:	d108      	bne.n	800588e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	441a      	add	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	441a      	add	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d118      	bne.n	80058d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	4b14      	ldr	r3, [pc, #80]	@ (80058f8 <prvInsertBlockIntoFreeList+0xac>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d00d      	beq.n	80058ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	441a      	add	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	e008      	b.n	80058dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058ca:	4b0b      	ldr	r3, [pc, #44]	@ (80058f8 <prvInsertBlockIntoFreeList+0xac>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	e003      	b.n	80058dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d002      	beq.n	80058ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr
 80058f4:	20001a58 	.word	0x20001a58
 80058f8:	20001a60 	.word	0x20001a60

080058fc <memset>:
 80058fc:	4603      	mov	r3, r0
 80058fe:	4402      	add	r2, r0
 8005900:	4293      	cmp	r3, r2
 8005902:	d100      	bne.n	8005906 <memset+0xa>
 8005904:	4770      	bx	lr
 8005906:	f803 1b01 	strb.w	r1, [r3], #1
 800590a:	e7f9      	b.n	8005900 <memset+0x4>

0800590c <__libc_init_array>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	2600      	movs	r6, #0
 8005910:	4d0c      	ldr	r5, [pc, #48]	@ (8005944 <__libc_init_array+0x38>)
 8005912:	4c0d      	ldr	r4, [pc, #52]	@ (8005948 <__libc_init_array+0x3c>)
 8005914:	1b64      	subs	r4, r4, r5
 8005916:	10a4      	asrs	r4, r4, #2
 8005918:	42a6      	cmp	r6, r4
 800591a:	d109      	bne.n	8005930 <__libc_init_array+0x24>
 800591c:	f000 f828 	bl	8005970 <_init>
 8005920:	2600      	movs	r6, #0
 8005922:	4d0a      	ldr	r5, [pc, #40]	@ (800594c <__libc_init_array+0x40>)
 8005924:	4c0a      	ldr	r4, [pc, #40]	@ (8005950 <__libc_init_array+0x44>)
 8005926:	1b64      	subs	r4, r4, r5
 8005928:	10a4      	asrs	r4, r4, #2
 800592a:	42a6      	cmp	r6, r4
 800592c:	d105      	bne.n	800593a <__libc_init_array+0x2e>
 800592e:	bd70      	pop	{r4, r5, r6, pc}
 8005930:	f855 3b04 	ldr.w	r3, [r5], #4
 8005934:	4798      	blx	r3
 8005936:	3601      	adds	r6, #1
 8005938:	e7ee      	b.n	8005918 <__libc_init_array+0xc>
 800593a:	f855 3b04 	ldr.w	r3, [r5], #4
 800593e:	4798      	blx	r3
 8005940:	3601      	adds	r6, #1
 8005942:	e7f2      	b.n	800592a <__libc_init_array+0x1e>
 8005944:	08005a44 	.word	0x08005a44
 8005948:	08005a44 	.word	0x08005a44
 800594c:	08005a44 	.word	0x08005a44
 8005950:	08005a48 	.word	0x08005a48

08005954 <memcpy>:
 8005954:	440a      	add	r2, r1
 8005956:	4291      	cmp	r1, r2
 8005958:	f100 33ff 	add.w	r3, r0, #4294967295
 800595c:	d100      	bne.n	8005960 <memcpy+0xc>
 800595e:	4770      	bx	lr
 8005960:	b510      	push	{r4, lr}
 8005962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005966:	4291      	cmp	r1, r2
 8005968:	f803 4f01 	strb.w	r4, [r3, #1]!
 800596c:	d1f9      	bne.n	8005962 <memcpy+0xe>
 800596e:	bd10      	pop	{r4, pc}

08005970 <_init>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	bf00      	nop
 8005974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005976:	bc08      	pop	{r3}
 8005978:	469e      	mov	lr, r3
 800597a:	4770      	bx	lr

0800597c <_fini>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	bf00      	nop
 8005980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005982:	bc08      	pop	{r3}
 8005984:	469e      	mov	lr, r3
 8005986:	4770      	bx	lr
