
servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b08  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006c18  08006c18  00016c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d04  08006d04  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08006d04  08006d04  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d04  08006d04  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d04  08006d04  00016d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d08  08006d08  00016d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08006d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ab4  20000028  08006d34  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001adc  08006d34  00021adc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001766a  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b2a  00000000  00000000  000376fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  0003b228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f7b  00000000  00000000  0003c640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019888  00000000  00000000  0003d5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c9b  00000000  00000000  00056e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093bf2  00000000  00000000  0006fade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053c4  00000000  00000000  001036d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00108a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000028 	.word	0x20000028
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c00 	.word	0x08006c00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000002c 	.word	0x2000002c
 800014c:	08006c00 	.word	0x08006c00

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__gesf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpsf2+0x4>
 8000992:	bf00      	nop

08000994 <__lesf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpsf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpsf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009b6:	d011      	beq.n	80009dc <__cmpsf2+0x40>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009be:	bf18      	it	ne
 80009c0:	ea90 0f01 	teqne	r0, r1
 80009c4:	bf58      	it	pl
 80009c6:	ebb2 0003 	subspl.w	r0, r2, r3
 80009ca:	bf88      	it	hi
 80009cc:	17c8      	asrhi	r0, r1, #31
 80009ce:	bf38      	it	cc
 80009d0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009d4:	bf18      	it	ne
 80009d6:	f040 0001 	orrne.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009e0:	d102      	bne.n	80009e8 <__cmpsf2+0x4c>
 80009e2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009e6:	d105      	bne.n	80009f4 <__cmpsf2+0x58>
 80009e8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80009ec:	d1e4      	bne.n	80009b8 <__cmpsf2+0x1c>
 80009ee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009f2:	d0e1      	beq.n	80009b8 <__cmpsf2+0x1c>
 80009f4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_cfrcmple>:
 80009fc:	4684      	mov	ip, r0
 80009fe:	4608      	mov	r0, r1
 8000a00:	4661      	mov	r1, ip
 8000a02:	e7ff      	b.n	8000a04 <__aeabi_cfcmpeq>

08000a04 <__aeabi_cfcmpeq>:
 8000a04:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a06:	f7ff ffc9 	bl	800099c <__cmpsf2>
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	bf48      	it	mi
 8000a0e:	f110 0f00 	cmnmi.w	r0, #0
 8000a12:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a14 <__aeabi_fcmpeq>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff fff4 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a1c:	bf0c      	ite	eq
 8000a1e:	2001      	moveq	r0, #1
 8000a20:	2000      	movne	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_fcmplt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffea 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_fcmple>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffe0 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a44:	bf94      	ite	ls
 8000a46:	2001      	movls	r0, #1
 8000a48:	2000      	movhi	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_fcmpge>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffd2 	bl	80009fc <__aeabi_cfrcmple>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_fcmpgt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffc8 	bl	80009fc <__aeabi_cfrcmple>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <DCMotor_Start>:
/****************************/

/*APIs Implementation*/

DCMotorErrorStatus_t DCMotor_Start(uint32_t Copy_u32DCMotor)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d902      	bls.n	8000a90 <DCMotor_Start+0x18>
    {
    	Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	73fb      	strb	r3, [r7, #15]
 8000a8e:	e05a      	b.n	8000b46 <DCMotor_Start+0xce>
    }
    else
    {
    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 8000a90:	492f      	ldr	r1, [pc, #188]	; (8000b50 <DCMotor_Start+0xd8>)
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	4613      	mov	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	4413      	add	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	3310      	adds	r3, #16
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d14d      	bne.n	8000b42 <DCMotor_Start+0xca>
    		case Timer_2:
    		    __HAL_TIM_SET_COMPARE(&htim2,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    			HAL_TIM_PWM_Start(&htim2, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		case Timer_3:
    		    __HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 8000aa6:	492a      	ldr	r1, [pc, #168]	; (8000b50 <DCMotor_Start+0xd8>)
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	4413      	add	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3311      	adds	r3, #17
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d107      	bne.n	8000acc <DCMotor_Start+0x54>
 8000abc:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <DCMotor_Start+0xdc>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4925      	ldr	r1, [pc, #148]	; (8000b58 <DCMotor_Start+0xe0>)
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ac8:	635a      	str	r2, [r3, #52]	; 0x34
 8000aca:	e02c      	b.n	8000b26 <DCMotor_Start+0xae>
 8000acc:	4920      	ldr	r1, [pc, #128]	; (8000b50 <DCMotor_Start+0xd8>)
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	440b      	add	r3, r1
 8000ada:	3311      	adds	r3, #17
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	d107      	bne.n	8000af2 <DCMotor_Start+0x7a>
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <DCMotor_Start+0xdc>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	491c      	ldr	r1, [pc, #112]	; (8000b58 <DCMotor_Start+0xe0>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000aee:	6393      	str	r3, [r2, #56]	; 0x38
 8000af0:	e019      	b.n	8000b26 <DCMotor_Start+0xae>
 8000af2:	4917      	ldr	r1, [pc, #92]	; (8000b50 <DCMotor_Start+0xd8>)
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	4613      	mov	r3, r2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	4413      	add	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	440b      	add	r3, r1
 8000b00:	3311      	adds	r3, #17
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b08      	cmp	r3, #8
 8000b06:	d107      	bne.n	8000b18 <DCMotor_Start+0xa0>
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <DCMotor_Start+0xdc>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4912      	ldr	r1, [pc, #72]	; (8000b58 <DCMotor_Start+0xe0>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b14:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000b16:	e006      	b.n	8000b26 <DCMotor_Start+0xae>
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <DCMotor_Start+0xdc>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	490e      	ldr	r1, [pc, #56]	; (8000b58 <DCMotor_Start+0xe0>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
    		    HAL_TIM_PWM_Start(&htim3, DCMotors[Copy_u32DCMotor].Enable_Channel);
 8000b26:	490a      	ldr	r1, [pc, #40]	; (8000b50 <DCMotor_Start+0xd8>)
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	440b      	add	r3, r1
 8000b34:	3311      	adds	r3, #17
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <DCMotor_Start+0xdc>)
 8000b3c:	f002 f868 	bl	8002c10 <HAL_TIM_PWM_Start>
    		    break;
 8000b40:	e001      	b.n	8000b46 <DCMotor_Start+0xce>
    		/*case Timer_4:
    		    __HAL_TIM_SET_COMPARE(&htim4,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    HAL_TIM_PWM_Start(&htim4, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000b42:	2301      	movs	r3, #1
 8000b44:	73fb      	strb	r3, [r7, #15]
    	}
    }
    return Ret_ErrorStatus;
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	08006c8c 	.word	0x08006c8c
 8000b54:	20000100 	.word	0x20000100
 8000b58:	20000000 	.word	0x20000000

08000b5c <DCMotor_Stop>:



DCMotorErrorStatus_t DCMotor_Stop(uint32_t Copy_u32DCMotor)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d902      	bls.n	8000b74 <DCMotor_Stop+0x18>
    {
      	Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	e01a      	b.n	8000baa <DCMotor_Stop+0x4e>
    }
    else
    {
    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 8000b74:	490f      	ldr	r1, [pc, #60]	; (8000bb4 <DCMotor_Stop+0x58>)
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	4413      	add	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	440b      	add	r3, r1
 8000b82:	3310      	adds	r3, #16
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d10d      	bne.n	8000ba6 <DCMotor_Stop+0x4a>
    			break;
    		case Timer_2:
    			HAL_TIM_PWM_Stop(&htim2, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		case Timer_3:
    			HAL_TIM_PWM_Stop(&htim3, DCMotors[Copy_u32DCMotor].Enable_Channel);
 8000b8a:	490a      	ldr	r1, [pc, #40]	; (8000bb4 <DCMotor_Stop+0x58>)
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	440b      	add	r3, r1
 8000b98:	3311      	adds	r3, #17
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <DCMotor_Stop+0x5c>)
 8000ba0:	f002 f8d8 	bl	8002d54 <HAL_TIM_PWM_Stop>
    		    break;
 8000ba4:	e001      	b.n	8000baa <DCMotor_Stop+0x4e>
    		/*case Timer_4:
    			HAL_TIM_PWM_Stop(&htim4, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	73fb      	strb	r3, [r7, #15]
    	}

    }
    return Ret_ErrorStatus;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	08006c8c 	.word	0x08006c8c
 8000bb8:	20000100 	.word	0x20000100

08000bbc <DCMotor_StartReverse>:
	    }
	    return Ret_ErrorStatus;
}

DCMotorErrorStatus_t DCMotor_StartReverse(uint32_t Copy_u32DCMotor)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d902      	bls.n	8000bd4 <DCMotor_StartReverse+0x18>
    {
        Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	73fb      	strb	r3, [r7, #15]
 8000bd2:	e087      	b.n	8000ce4 <DCMotor_StartReverse+0x128>
    }
    else
    {
    	HAL_GPIO_WritePin((GPIO_TypeDef *)DCMotors[Copy_u32DCMotor].Input_1.Port, DCMotors[Copy_u32DCMotor].Input_1.Pin, GPIO_PIN_RESET);
 8000bd4:	4946      	ldr	r1, [pc, #280]	; (8000cf0 <DCMotor_StartReverse+0x134>)
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4413      	add	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	440b      	add	r3, r1
 8000be2:	3304      	adds	r3, #4
 8000be4:	6818      	ldr	r0, [r3, #0]
 8000be6:	4942      	ldr	r1, [pc, #264]	; (8000cf0 <DCMotor_StartReverse+0x134>)
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f001 fab6 	bl	800216c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin((GPIO_TypeDef *)DCMotors[Copy_u32DCMotor].Input_2.Port, DCMotors[Copy_u32DCMotor].Input_2.Pin, GPIO_PIN_SET);
 8000c00:	493b      	ldr	r1, [pc, #236]	; (8000cf0 <DCMotor_StartReverse+0x134>)
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	4613      	mov	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	330c      	adds	r3, #12
 8000c10:	6818      	ldr	r0, [r3, #0]
 8000c12:	4937      	ldr	r1, [pc, #220]	; (8000cf0 <DCMotor_StartReverse+0x134>)
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4413      	add	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	2201      	movs	r2, #1
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f001 fa9f 	bl	800216c <HAL_GPIO_WritePin>


    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 8000c2e:	4930      	ldr	r1, [pc, #192]	; (8000cf0 <DCMotor_StartReverse+0x134>)
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	4613      	mov	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3310      	adds	r3, #16
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d14d      	bne.n	8000ce0 <DCMotor_StartReverse+0x124>
    		case Timer_2:
    		    __HAL_TIM_SET_COMPARE(&htim2,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    			HAL_TIM_PWM_Start(&htim2, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		case Timer_3:
    		    __HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 8000c44:	492a      	ldr	r1, [pc, #168]	; (8000cf0 <DCMotor_StartReverse+0x134>)
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	4413      	add	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	440b      	add	r3, r1
 8000c52:	3311      	adds	r3, #17
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d107      	bne.n	8000c6a <DCMotor_StartReverse+0xae>
 8000c5a:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <DCMotor_StartReverse+0x138>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4926      	ldr	r1, [pc, #152]	; (8000cf8 <DCMotor_StartReverse+0x13c>)
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c66:	635a      	str	r2, [r3, #52]	; 0x34
 8000c68:	e02c      	b.n	8000cc4 <DCMotor_StartReverse+0x108>
 8000c6a:	4921      	ldr	r1, [pc, #132]	; (8000cf0 <DCMotor_StartReverse+0x134>)
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	440b      	add	r3, r1
 8000c78:	3311      	adds	r3, #17
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	d107      	bne.n	8000c90 <DCMotor_StartReverse+0xd4>
 8000c80:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <DCMotor_StartReverse+0x138>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	491c      	ldr	r1, [pc, #112]	; (8000cf8 <DCMotor_StartReverse+0x13c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c8c:	6393      	str	r3, [r2, #56]	; 0x38
 8000c8e:	e019      	b.n	8000cc4 <DCMotor_StartReverse+0x108>
 8000c90:	4917      	ldr	r1, [pc, #92]	; (8000cf0 <DCMotor_StartReverse+0x134>)
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	4613      	mov	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4413      	add	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	3311      	adds	r3, #17
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b08      	cmp	r3, #8
 8000ca4:	d107      	bne.n	8000cb6 <DCMotor_StartReverse+0xfa>
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <DCMotor_StartReverse+0x138>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4913      	ldr	r1, [pc, #76]	; (8000cf8 <DCMotor_StartReverse+0x13c>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cb2:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000cb4:	e006      	b.n	8000cc4 <DCMotor_StartReverse+0x108>
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <DCMotor_StartReverse+0x138>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	490f      	ldr	r1, [pc, #60]	; (8000cf8 <DCMotor_StartReverse+0x13c>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cc2:	6413      	str	r3, [r2, #64]	; 0x40
    		    HAL_TIM_PWM_Start(&htim3, DCMotors[Copy_u32DCMotor].Enable_Channel);
 8000cc4:	490a      	ldr	r1, [pc, #40]	; (8000cf0 <DCMotor_StartReverse+0x134>)
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	3311      	adds	r3, #17
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <DCMotor_StartReverse+0x138>)
 8000cda:	f001 ff99 	bl	8002c10 <HAL_TIM_PWM_Start>
    		    break;
 8000cde:	e001      	b.n	8000ce4 <DCMotor_StartReverse+0x128>
    		/*case Timer_4:
    		    __HAL_TIM_SET_COMPARE(&htim4,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    HAL_TIM_PWM_Start(&htim4, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	73fb      	strb	r3, [r7, #15]
    	}

    }
    return Ret_ErrorStatus;
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	08006c8c 	.word	0x08006c8c
 8000cf4:	20000100 	.word	0x20000100
 8000cf8:	20000000 	.word	0x20000000

08000cfc <DCMotor_SetSpeed>:


DCMotorErrorStatus_t DCMotor_SetSpeed(uint32_t Copy_u32DCMotor, uint32_t Copy_u32SpeedPercentage)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d902      	bls.n	8000d16 <DCMotor_SetSpeed+0x1a>
    {
        Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
 8000d14:	e05a      	b.n	8000dcc <DCMotor_SetSpeed+0xd0>
    }
    else
    {
    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 8000d16:	4930      	ldr	r1, [pc, #192]	; (8000dd8 <DCMotor_SetSpeed+0xdc>)
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	440b      	add	r3, r1
 8000d24:	3310      	adds	r3, #16
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d14d      	bne.n	8000dc8 <DCMotor_SetSpeed+0xcc>
    		case Timer_2:
    			Motor_Speed[Copy_u32DCMotor] = (MAX_SPEED*Copy_u32SpeedPercentage)/100;
    			__HAL_TIM_SET_COMPARE(&htim2,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    break;*/
    		case Timer_3:
    			Motor_Speed[Copy_u32DCMotor] = (MAX_SPEED*Copy_u32SpeedPercentage)/100;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d32:	fb02 f303 	mul.w	r3, r2, r3
 8000d36:	4a29      	ldr	r2, [pc, #164]	; (8000ddc <DCMotor_SetSpeed+0xe0>)
 8000d38:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3c:	095a      	lsrs	r2, r3, #5
 8000d3e:	4928      	ldr	r1, [pc, #160]	; (8000de0 <DCMotor_SetSpeed+0xe4>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 8000d46:	4924      	ldr	r1, [pc, #144]	; (8000dd8 <DCMotor_SetSpeed+0xdc>)
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	440b      	add	r3, r1
 8000d54:	3311      	adds	r3, #17
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d107      	bne.n	8000d6c <DCMotor_SetSpeed+0x70>
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <DCMotor_SetSpeed+0xe8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	491f      	ldr	r1, [pc, #124]	; (8000de0 <DCMotor_SetSpeed+0xe4>)
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d68:	635a      	str	r2, [r3, #52]	; 0x34
    		    break;
 8000d6a:	e02f      	b.n	8000dcc <DCMotor_SetSpeed+0xd0>
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 8000d6c:	491a      	ldr	r1, [pc, #104]	; (8000dd8 <DCMotor_SetSpeed+0xdc>)
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	3311      	adds	r3, #17
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	d107      	bne.n	8000d92 <DCMotor_SetSpeed+0x96>
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <DCMotor_SetSpeed+0xe8>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4916      	ldr	r1, [pc, #88]	; (8000de0 <DCMotor_SetSpeed+0xe4>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d8e:	6393      	str	r3, [r2, #56]	; 0x38
    		    break;
 8000d90:	e01c      	b.n	8000dcc <DCMotor_SetSpeed+0xd0>
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 8000d92:	4911      	ldr	r1, [pc, #68]	; (8000dd8 <DCMotor_SetSpeed+0xdc>)
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	440b      	add	r3, r1
 8000da0:	3311      	adds	r3, #17
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b08      	cmp	r3, #8
 8000da6:	d107      	bne.n	8000db8 <DCMotor_SetSpeed+0xbc>
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <DCMotor_SetSpeed+0xe8>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	490c      	ldr	r1, [pc, #48]	; (8000de0 <DCMotor_SetSpeed+0xe4>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000db4:	63d3      	str	r3, [r2, #60]	; 0x3c
    		    break;
 8000db6:	e009      	b.n	8000dcc <DCMotor_SetSpeed+0xd0>
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <DCMotor_SetSpeed+0xe8>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4908      	ldr	r1, [pc, #32]	; (8000de0 <DCMotor_SetSpeed+0xe4>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
    		    break;
 8000dc6:	e001      	b.n	8000dcc <DCMotor_SetSpeed+0xd0>
    		/*case Timer_4:
    			Motor_Speed[Copy_u32DCMotor] = (MAX_SPEED*Copy_u32SpeedPercentage)/100;
    			__HAL_TIM_SET_COMPARE(&htim4,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
    	}

    }
    return Ret_ErrorStatus;
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	08006c8c 	.word	0x08006c8c
 8000ddc:	51eb851f 	.word	0x51eb851f
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000100 	.word	0x20000100

08000de8 <BL_ReadByteSync>:
#include "HAL/bluetooth.h"

volatile uint8_t Data[1] = {0};

uint8_t BL_ReadByteSync()
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, Data, 1, 2);
 8000df2:	2302      	movs	r3, #2
 8000df4:	2201      	movs	r2, #1
 8000df6:	4914      	ldr	r1, [pc, #80]	; (8000e48 <BL_ReadByteSync+0x60>)
 8000df8:	4814      	ldr	r0, [pc, #80]	; (8000e4c <BL_ReadByteSync+0x64>)
 8000dfa:	f003 f85f 	bl	8003ebc <HAL_UART_Receive>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71bb      	strb	r3, [r7, #6]
	    if (status == HAL_OK) {
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <BL_ReadByteSync+0x26>
	        temp = Data[0];
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <BL_ReadByteSync+0x60>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	71fb      	strb	r3, [r7, #7]
	    }

	if(temp == 'F')
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b46      	cmp	r3, #70	; 0x46
 8000e12:	d105      	bne.n	8000e20 <BL_ReadByteSync+0x38>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <BL_ReadByteSync+0x68>)
 8000e1c:	f001 f9a6 	bl	800216c <HAL_GPIO_WritePin>
	}

	if(Data[0] == 'B')
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <BL_ReadByteSync+0x60>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b42      	cmp	r3, #66	; 0x42
 8000e28:	d105      	bne.n	8000e36 <BL_ReadByteSync+0x4e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e30:	4807      	ldr	r0, [pc, #28]	; (8000e50 <BL_ReadByteSync+0x68>)
 8000e32:	f001 f99b 	bl	800216c <HAL_GPIO_WritePin>
	}

	Data[0] = 0;
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <BL_ReadByteSync+0x60>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
	return temp;
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000044 	.word	0x20000044
 8000e4c:	20000148 	.word	0x20000148
 8000e50:	40011000 	.word	0x40011000

08000e54 <get_data_task>:


struct CarState CarInfo = {0, forward, 0, idle};

void get_data_task(void * pvParameters)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	//uint8_t Data = 0;
	while(1)
	{
		CarInfo.DriverInput = BL_ReadByteSync();
 8000e5c:	f7ff ffc4 	bl	8000de8 <BL_ReadByteSync>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <get_data_task+0x1c>)
 8000e66:	701a      	strb	r2, [r3, #0]
		//HAL_USART_Receive(&husart1, &Data, 1, 1);
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		vTaskDelay(pdMS_TO_TICKS(10));
 8000e68:	200a      	movs	r0, #10
 8000e6a:	f004 fa51 	bl	8005310 <vTaskDelay>
		CarInfo.DriverInput = BL_ReadByteSync();
 8000e6e:	e7f5      	b.n	8000e5c <get_data_task+0x8>
 8000e70:	20000008 	.word	0x20000008

08000e74 <drive_task>:
	}
}

void drive_task(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
	int steer_counter = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]

	//DCMotorInit();
	//DCMotor_Start(DRIVING_MOTOR);
	DCMotor_SetSpeed(STEERING_MOTOR, 50);
 8000e7e:	2132      	movs	r1, #50	; 0x32
 8000e80:	2001      	movs	r0, #1
 8000e82:	f7ff ff3b 	bl	8000cfc <DCMotor_SetSpeed>

	while(1)
	{
		switch(CarInfo.DriverInput)
 8000e86:	4b6f      	ldr	r3, [pc, #444]	; (8001044 <drive_task+0x1d0>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2bff      	cmp	r3, #255	; 0xff
 8000e8c:	d075      	beq.n	8000f7a <drive_task+0x106>
 8000e8e:	2bff      	cmp	r3, #255	; 0xff
 8000e90:	f300 80d0 	bgt.w	8001034 <drive_task+0x1c0>
 8000e94:	2b39      	cmp	r3, #57	; 0x39
 8000e96:	dc6b      	bgt.n	8000f70 <drive_task+0xfc>
 8000e98:	2b30      	cmp	r3, #48	; 0x30
 8000e9a:	f280 80b2 	bge.w	8001002 <drive_task+0x18e>
			DCMotor_Stop(DRIVING_MOTOR);
			DCMotor_Stop(STEERING_MOTOR);
			CarInfo.DriverInput=idle;
			break;

		default: break;
 8000e9e:	e0c9      	b.n	8001034 <drive_task+0x1c0>
		switch(CarInfo.DriverInput)
 8000ea0:	3b42      	subs	r3, #66	; 0x42
 8000ea2:	2b2f      	cmp	r3, #47	; 0x2f
 8000ea4:	f200 80c6 	bhi.w	8001034 <drive_task+0x1c0>
 8000ea8:	a201      	add	r2, pc, #4	; (adr r2, 8000eb0 <drive_task+0x3c>)
 8000eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eae:	bf00      	nop
 8000eb0:	08000fb1 	.word	0x08000fb1
 8000eb4:	08001035 	.word	0x08001035
 8000eb8:	08001035 	.word	0x08001035
 8000ebc:	08001035 	.word	0x08001035
 8000ec0:	08000f8d 	.word	0x08000f8d
 8000ec4:	08001035 	.word	0x08001035
 8000ec8:	08001035 	.word	0x08001035
 8000ecc:	08001035 	.word	0x08001035
 8000ed0:	08001035 	.word	0x08001035
 8000ed4:	08001035 	.word	0x08001035
 8000ed8:	08000fe9 	.word	0x08000fe9
 8000edc:	08001035 	.word	0x08001035
 8000ee0:	08001035 	.word	0x08001035
 8000ee4:	08001035 	.word	0x08001035
 8000ee8:	08001035 	.word	0x08001035
 8000eec:	08001035 	.word	0x08001035
 8000ef0:	08000fd5 	.word	0x08000fd5
 8000ef4:	08001021 	.word	0x08001021
 8000ef8:	08001035 	.word	0x08001035
 8000efc:	08001035 	.word	0x08001035
 8000f00:	08001035 	.word	0x08001035
 8000f04:	08001035 	.word	0x08001035
 8000f08:	08001035 	.word	0x08001035
 8000f0c:	08001035 	.word	0x08001035
 8000f10:	08001035 	.word	0x08001035
 8000f14:	08001035 	.word	0x08001035
 8000f18:	08001035 	.word	0x08001035
 8000f1c:	08001035 	.word	0x08001035
 8000f20:	08001035 	.word	0x08001035
 8000f24:	08001035 	.word	0x08001035
 8000f28:	08001035 	.word	0x08001035
 8000f2c:	08001035 	.word	0x08001035
 8000f30:	08001035 	.word	0x08001035
 8000f34:	08001035 	.word	0x08001035
 8000f38:	08001035 	.word	0x08001035
 8000f3c:	08001035 	.word	0x08001035
 8000f40:	08001035 	.word	0x08001035
 8000f44:	08001035 	.word	0x08001035
 8000f48:	08001035 	.word	0x08001035
 8000f4c:	08001035 	.word	0x08001035
 8000f50:	08001035 	.word	0x08001035
 8000f54:	08001035 	.word	0x08001035
 8000f58:	08001035 	.word	0x08001035
 8000f5c:	08001035 	.word	0x08001035
 8000f60:	08001035 	.word	0x08001035
 8000f64:	08001035 	.word	0x08001035
 8000f68:	08001035 	.word	0x08001035
 8000f6c:	08000ffd 	.word	0x08000ffd
 8000f70:	2b71      	cmp	r3, #113	; 0x71
 8000f72:	dc5f      	bgt.n	8001034 <drive_task+0x1c0>
 8000f74:	2b42      	cmp	r3, #66	; 0x42
 8000f76:	da93      	bge.n	8000ea0 <drive_task+0x2c>
		default: break;
 8000f78:	e05c      	b.n	8001034 <drive_task+0x1c0>
			if(steer_counter > 0)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	dd5b      	ble.n	8001038 <drive_task+0x1c4>
				steer_counter = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
				DCMotor_Stop(STEERING_MOTOR);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f7ff fde9 	bl	8000b5c <DCMotor_Stop>
			break;
 8000f8a:	e055      	b.n	8001038 <drive_task+0x1c4>
			if((CarInfo.last_state == steer_right) || (CarInfo.last_state == steer_left))
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <drive_task+0x1d0>)
 8000f8e:	7b1b      	ldrb	r3, [r3, #12]
 8000f90:	2b52      	cmp	r3, #82	; 0x52
 8000f92:	d003      	beq.n	8000f9c <drive_task+0x128>
 8000f94:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <drive_task+0x1d0>)
 8000f96:	7b1b      	ldrb	r3, [r3, #12]
 8000f98:	2b4c      	cmp	r3, #76	; 0x4c
 8000f9a:	d102      	bne.n	8000fa2 <drive_task+0x12e>
				DCMotor_Stop(STEERING_MOTOR);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f7ff fddd 	bl	8000b5c <DCMotor_Stop>
			DCMotor_Start(DRIVING_MOTOR);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff fd68 	bl	8000a78 <DCMotor_Start>
			CarInfo.DriverInput = idle;
 8000fa8:	4b26      	ldr	r3, [pc, #152]	; (8001044 <drive_task+0x1d0>)
 8000faa:	22ff      	movs	r2, #255	; 0xff
 8000fac:	701a      	strb	r2, [r3, #0]
			break;
 8000fae:	e044      	b.n	800103a <drive_task+0x1c6>
			if((CarInfo.last_state == steer_right) || (CarInfo.last_state == steer_left))
 8000fb0:	4b24      	ldr	r3, [pc, #144]	; (8001044 <drive_task+0x1d0>)
 8000fb2:	7b1b      	ldrb	r3, [r3, #12]
 8000fb4:	2b52      	cmp	r3, #82	; 0x52
 8000fb6:	d003      	beq.n	8000fc0 <drive_task+0x14c>
 8000fb8:	4b22      	ldr	r3, [pc, #136]	; (8001044 <drive_task+0x1d0>)
 8000fba:	7b1b      	ldrb	r3, [r3, #12]
 8000fbc:	2b4c      	cmp	r3, #76	; 0x4c
 8000fbe:	d102      	bne.n	8000fc6 <drive_task+0x152>
				DCMotor_Stop(STEERING_MOTOR);
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f7ff fdcb 	bl	8000b5c <DCMotor_Stop>
			DCMotor_StartReverse(DRIVING_MOTOR);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff fdf8 	bl	8000bbc <DCMotor_StartReverse>
			CarInfo.DriverInput = idle;
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <drive_task+0x1d0>)
 8000fce:	22ff      	movs	r2, #255	; 0xff
 8000fd0:	701a      	strb	r2, [r3, #0]
			break;
 8000fd2:	e032      	b.n	800103a <drive_task+0x1c6>
			DCMotor_StartReverse(STEERING_MOTOR);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff fdf1 	bl	8000bbc <DCMotor_StartReverse>
			steer_counter++;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	607b      	str	r3, [r7, #4]
			CarInfo.DriverInput=idle;
 8000fe0:	4b18      	ldr	r3, [pc, #96]	; (8001044 <drive_task+0x1d0>)
 8000fe2:	22ff      	movs	r2, #255	; 0xff
 8000fe4:	701a      	strb	r2, [r3, #0]
			break;
 8000fe6:	e028      	b.n	800103a <drive_task+0x1c6>
			DCMotor_Start(STEERING_MOTOR);
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f7ff fd45 	bl	8000a78 <DCMotor_Start>
			steer_counter++;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
			CarInfo.DriverInput=idle;
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <drive_task+0x1d0>)
 8000ff6:	22ff      	movs	r2, #255	; 0xff
 8000ff8:	701a      	strb	r2, [r3, #0]
			break;
 8000ffa:	e01e      	b.n	800103a <drive_task+0x1c6>
		case speed_100: CarInfo.DriverInput = 100;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <drive_task+0x1d0>)
 8000ffe:	2264      	movs	r2, #100	; 0x64
 8001000:	701a      	strb	r2, [r3, #0]
			DCMotor_SetSpeed(DRIVING_MOTOR, CarInfo.DriverInput);
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <drive_task+0x1d0>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	4619      	mov	r1, r3
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff fe77 	bl	8000cfc <DCMotor_SetSpeed>
			CarInfo.speed = CarInfo.DriverInput;
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <drive_task+0x1d0>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <drive_task+0x1d0>)
 8001016:	609a      	str	r2, [r3, #8]
			CarInfo.DriverInput=idle;
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <drive_task+0x1d0>)
 800101a:	22ff      	movs	r2, #255	; 0xff
 800101c:	701a      	strb	r2, [r3, #0]
			break;
 800101e:	e00c      	b.n	800103a <drive_task+0x1c6>
			DCMotor_Stop(DRIVING_MOTOR);
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff fd9b 	bl	8000b5c <DCMotor_Stop>
			DCMotor_Stop(STEERING_MOTOR);
 8001026:	2001      	movs	r0, #1
 8001028:	f7ff fd98 	bl	8000b5c <DCMotor_Stop>
			CarInfo.DriverInput=idle;
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <drive_task+0x1d0>)
 800102e:	22ff      	movs	r2, #255	; 0xff
 8001030:	701a      	strb	r2, [r3, #0]
			break;
 8001032:	e002      	b.n	800103a <drive_task+0x1c6>
		default: break;
 8001034:	bf00      	nop
 8001036:	e000      	b.n	800103a <drive_task+0x1c6>
			break;
 8001038:	bf00      	nop
		}

		vTaskDelay(pdMS_TO_TICKS(2));
 800103a:	2002      	movs	r0, #2
 800103c:	f004 f968 	bl	8005310 <vTaskDelay>
		switch(CarInfo.DriverInput)
 8001040:	e721      	b.n	8000e86 <drive_task+0x12>
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008

08001048 <HCSR04_1_Read_task>:
	}
}

/* ultrasonic task fo blind spot detection */
void HCSR04_1_Read_task(void * pvParameters)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	//uint8_t Data = 0;
	while(1)
	{
		HAL_GPIO_WritePin(TRIG1_PORT, TRIG1_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001056:	480c      	ldr	r0, [pc, #48]	; (8001088 <HCSR04_1_Read_task+0x40>)
 8001058:	f001 f888 	bl	800216c <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(1));  // wait for 10 us
 800105c:	2001      	movs	r0, #1
 800105e:	f004 f957 	bl	8005310 <vTaskDelay>
		HAL_GPIO_WritePin(TRIG1_PORT, TRIG1_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001068:	4807      	ldr	r0, [pc, #28]	; (8001088 <HCSR04_1_Read_task+0x40>)
 800106a:	f001 f87f 	bl	800216c <HAL_GPIO_WritePin>

		__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <HCSR04_1_Read_task+0x44>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <HCSR04_1_Read_task+0x44>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f042 0202 	orr.w	r2, r2, #2
 800107c:	60da      	str	r2, [r3, #12]
		vTaskDelay(pdMS_TO_TICKS(100));
 800107e:	2064      	movs	r0, #100	; 0x64
 8001080:	f004 f946 	bl	8005310 <vTaskDelay>
		HAL_GPIO_WritePin(TRIG1_PORT, TRIG1_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001084:	e7e4      	b.n	8001050 <HCSR04_1_Read_task+0x8>
 8001086:	bf00      	nop
 8001088:	40010800 	.word	0x40010800
 800108c:	200000b8 	.word	0x200000b8

08001090 <HCSR04_2_Read_task>:
	}
}
/* ultrasonic task fo blind spot detection */
void HCSR04_2_Read_task(void * pvParameters)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	//uint8_t Data = 0;
	while(1)
	{
		HAL_GPIO_WritePin(TRIG2_PORT, TRIG2_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001098:	2201      	movs	r2, #1
 800109a:	2108      	movs	r1, #8
 800109c:	480b      	ldr	r0, [pc, #44]	; (80010cc <HCSR04_2_Read_task+0x3c>)
 800109e:	f001 f865 	bl	800216c <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(1));  // wait for 10 us
 80010a2:	2001      	movs	r0, #1
 80010a4:	f004 f934 	bl	8005310 <vTaskDelay>
		HAL_GPIO_WritePin(TRIG2_PORT, TRIG2_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80010a8:	2200      	movs	r2, #0
 80010aa:	2108      	movs	r1, #8
 80010ac:	4807      	ldr	r0, [pc, #28]	; (80010cc <HCSR04_2_Read_task+0x3c>)
 80010ae:	f001 f85d 	bl	800216c <HAL_GPIO_WritePin>

		__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <HCSR04_2_Read_task+0x40>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HCSR04_2_Read_task+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f042 0202 	orr.w	r2, r2, #2
 80010c0:	60da      	str	r2, [r3, #12]
		vTaskDelay(pdMS_TO_TICKS(100));
 80010c2:	2064      	movs	r0, #100	; 0x64
 80010c4:	f004 f924 	bl	8005310 <vTaskDelay>
		HAL_GPIO_WritePin(TRIG2_PORT, TRIG2_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80010c8:	e7e6      	b.n	8001098 <HCSR04_2_Read_task+0x8>
 80010ca:	bf00      	nop
 80010cc:	40010c00 	.word	0x40010c00
 80010d0:	200000b8 	.word	0x200000b8

080010d4 <blind_spot_task>:
	}
}

/* ultrasonic task fo blind spot detection */
void blind_spot_task(void * pvParameters)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
		}
		else{
		//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		//  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
		}
		if(Distance_CH2 >10){
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <blind_spot_task+0x3c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <blind_spot_task+0x40>)
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fcbe 	bl	8000a64 <__aeabi_fcmpgt>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d006      	beq.n	80010fc <blind_spot_task+0x28>
			//  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f4:	4808      	ldr	r0, [pc, #32]	; (8001118 <blind_spot_task+0x44>)
 80010f6:	f001 f839 	bl	800216c <HAL_GPIO_WritePin>
 80010fa:	e005      	b.n	8001108 <blind_spot_task+0x34>
		}
		else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <blind_spot_task+0x44>)
 8001104:	f001 f832 	bl	800216c <HAL_GPIO_WritePin>
		//  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
		}
		vTaskDelay(pdMS_TO_TICKS(120));
 8001108:	2078      	movs	r0, #120	; 0x78
 800110a:	f004 f901 	bl	8005310 <vTaskDelay>
		if(Distance_CH1 >10){
 800110e:	e7e5      	b.n	80010dc <blind_spot_task+0x8>
 8001110:	20000068 	.word	0x20000068
 8001114:	41200000 	.word	0x41200000
 8001118:	40011000 	.word	0x40011000
 800111c:	00000000 	.word	0x00000000

08001120 <HAL_TIM_IC_CaptureCallback>:

// Let's write the callback function


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	// Channel 1 handling
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7f1b      	ldrb	r3, [r3, #28]
 800112c:	2b01      	cmp	r3, #1
 800112e:	f040 8082 	bne.w	8001236 <HAL_TIM_IC_CaptureCallback+0x116>
	{
//		static uint8_t Is_First_Captured_CH1 = 0; // flag for channel 1 first capture
//		static uint32_t IC_Val1_CH1 = 0, IC_Val2_CH1 = 0, Difference_CH1 = 0;


		if (Is_First_Captured_CH1 == 0) // if the first value is not captured
 8001132:	4b89      	ldr	r3, [pc, #548]	; (8001358 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d11a      	bne.n	8001170 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1_CH1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800113a:	2100      	movs	r1, #0
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f002 f9eb 	bl	8003518 <HAL_TIM_ReadCapturedValue>
 8001142:	4603      	mov	r3, r0
 8001144:	4a85      	ldr	r2, [pc, #532]	; (800135c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001146:	6013      	str	r3, [r2, #0]
			Is_First_Captured_CH1 = 1;  // set the first captured as true
 8001148:	4b83      	ldr	r3, [pc, #524]	; (8001358 <HAL_TIM_IC_CaptureCallback+0x238>)
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6a1a      	ldr	r2, [r3, #32]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 020a 	bic.w	r2, r2, #10
 800115c:	621a      	str	r2, [r3, #32]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6a1a      	ldr	r2, [r3, #32]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 0202 	orr.w	r2, r2, #2
 800116c:	621a      	str	r2, [r3, #32]
 800116e:	e062      	b.n	8001236 <HAL_TIM_IC_CaptureCallback+0x116>
		}
		else if (Is_First_Captured_CH1 == 1)   // if the first is already captured
 8001170:	4b79      	ldr	r3, [pc, #484]	; (8001358 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d15e      	bne.n	8001236 <HAL_TIM_IC_CaptureCallback+0x116>
		{
			IC_Val2_CH1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001178:	2100      	movs	r1, #0
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f002 f9cc 	bl	8003518 <HAL_TIM_ReadCapturedValue>
 8001180:	4603      	mov	r3, r0
 8001182:	4a77      	ldr	r2, [pc, #476]	; (8001360 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001184:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC_Val2_CH1 > IC_Val1_CH1)
 800118e:	4b74      	ldr	r3, [pc, #464]	; (8001360 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b72      	ldr	r3, [pc, #456]	; (800135c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d907      	bls.n	80011aa <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Difference_CH1 = IC_Val2_CH1 - IC_Val1_CH1;
 800119a:	4b71      	ldr	r3, [pc, #452]	; (8001360 <HAL_TIM_IC_CaptureCallback+0x240>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b6f      	ldr	r3, [pc, #444]	; (800135c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	4a6f      	ldr	r2, [pc, #444]	; (8001364 <HAL_TIM_IC_CaptureCallback+0x244>)
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	e00f      	b.n	80011ca <HAL_TIM_IC_CaptureCallback+0xaa>
			}
			else if (IC_Val1_CH1 > IC_Val2_CH1)
 80011aa:	4b6c      	ldr	r3, [pc, #432]	; (800135c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b6c      	ldr	r3, [pc, #432]	; (8001360 <HAL_TIM_IC_CaptureCallback+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d909      	bls.n	80011ca <HAL_TIM_IC_CaptureCallback+0xaa>
			{
				Difference_CH1 = (0xffff - IC_Val1_CH1) + IC_Val2_CH1;
 80011b6:	4b6a      	ldr	r3, [pc, #424]	; (8001360 <HAL_TIM_IC_CaptureCallback+0x240>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4b68      	ldr	r3, [pc, #416]	; (800135c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80011c4:	33ff      	adds	r3, #255	; 0xff
 80011c6:	4a67      	ldr	r2, [pc, #412]	; (8001364 <HAL_TIM_IC_CaptureCallback+0x244>)
 80011c8:	6013      	str	r3, [r2, #0]
			}

			Distance_CH1 = Difference_CH1 * .034 / 2;
 80011ca:	4b66      	ldr	r3, [pc, #408]	; (8001364 <HAL_TIM_IC_CaptureCallback+0x244>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f900 	bl	80003d4 <__aeabi_ui2d>
 80011d4:	a35e      	add	r3, pc, #376	; (adr r3, 8001350 <HAL_TIM_IC_CaptureCallback+0x230>)
 80011d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011da:	f7ff f975 	bl	80004c8 <__aeabi_dmul>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ee:	f7ff fa95 	bl	800071c <__aeabi_ddiv>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fb77 	bl	80008ec <__aeabi_d2f>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a59      	ldr	r2, [pc, #356]	; (8001368 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001202:	6013      	str	r3, [r2, #0]
			Is_First_Captured_CH1 = 0; // set it back to false
 8001204:	4b54      	ldr	r3, [pc, #336]	; (8001358 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6a1a      	ldr	r2, [r3, #32]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 020a 	bic.w	r2, r2, #10
 8001218:	621a      	str	r2, [r3, #32]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6a12      	ldr	r2, [r2, #32]
 8001224:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8001226:	4b51      	ldr	r3, [pc, #324]	; (800136c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	4b4f      	ldr	r3, [pc, #316]	; (800136c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0202 	bic.w	r2, r2, #2
 8001234:	60da      	str	r2, [r3, #12]
		}
	}

	// Channel 2 handling
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel2
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	7f1b      	ldrb	r3, [r3, #28]
 800123a:	2b02      	cmp	r3, #2
 800123c:	f040 8082 	bne.w	8001344 <HAL_TIM_IC_CaptureCallback+0x224>
	{
//		static uint8_t Is_First_Captured_CH2 = 0; // flag for channel 2 first capture
//		static uint32_t IC_Val1_CH2 = 0, IC_Val2_CH2 = 0, Difference_CH2 = 0;

		if (Is_First_Captured_CH2 == 0) // if the first value is not captured
 8001240:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d11a      	bne.n	800127e <HAL_TIM_IC_CaptureCallback+0x15e>
		{
			IC_Val1_CH2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8001248:	2104      	movs	r1, #4
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f002 f964 	bl	8003518 <HAL_TIM_ReadCapturedValue>
 8001250:	4603      	mov	r3, r0
 8001252:	4a48      	ldr	r2, [pc, #288]	; (8001374 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001254:	6013      	str	r3, [r2, #0]
			Is_First_Captured_CH2 = 1;  // set the first captured as true
 8001256:	4b46      	ldr	r3, [pc, #280]	; (8001370 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6a1a      	ldr	r2, [r3, #32]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800126a:	621a      	str	r2, [r3, #32]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6a1a      	ldr	r2, [r3, #32]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0220 	orr.w	r2, r2, #32
 800127a:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
		}
	}
}
 800127c:	e062      	b.n	8001344 <HAL_TIM_IC_CaptureCallback+0x224>
		else if (Is_First_Captured_CH2 == 1)   // if the first is already captured
 800127e:	4b3c      	ldr	r3, [pc, #240]	; (8001370 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d15e      	bne.n	8001344 <HAL_TIM_IC_CaptureCallback+0x224>
			IC_Val2_CH2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8001286:	2104      	movs	r1, #4
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f002 f945 	bl	8003518 <HAL_TIM_ReadCapturedValue>
 800128e:	4603      	mov	r3, r0
 8001290:	4a39      	ldr	r2, [pc, #228]	; (8001378 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001292:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2200      	movs	r2, #0
 800129a:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2_CH2 > IC_Val1_CH2)
 800129c:	4b36      	ldr	r3, [pc, #216]	; (8001378 <HAL_TIM_IC_CaptureCallback+0x258>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b34      	ldr	r3, [pc, #208]	; (8001374 <HAL_TIM_IC_CaptureCallback+0x254>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d907      	bls.n	80012b8 <HAL_TIM_IC_CaptureCallback+0x198>
				Difference_CH2 = IC_Val2_CH2 - IC_Val1_CH2;
 80012a8:	4b33      	ldr	r3, [pc, #204]	; (8001378 <HAL_TIM_IC_CaptureCallback+0x258>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b31      	ldr	r3, [pc, #196]	; (8001374 <HAL_TIM_IC_CaptureCallback+0x254>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	4a32      	ldr	r2, [pc, #200]	; (800137c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e00f      	b.n	80012d8 <HAL_TIM_IC_CaptureCallback+0x1b8>
			else if (IC_Val1_CH2 > IC_Val2_CH2)
 80012b8:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <HAL_TIM_IC_CaptureCallback+0x254>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <HAL_TIM_IC_CaptureCallback+0x258>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d909      	bls.n	80012d8 <HAL_TIM_IC_CaptureCallback+0x1b8>
				Difference_CH2 = (0xffff - IC_Val1_CH2) + IC_Val2_CH2;
 80012c4:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <HAL_TIM_IC_CaptureCallback+0x258>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <HAL_TIM_IC_CaptureCallback+0x254>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80012d2:	33ff      	adds	r3, #255	; 0xff
 80012d4:	4a29      	ldr	r2, [pc, #164]	; (800137c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80012d6:	6013      	str	r3, [r2, #0]
			Distance_CH2 = Difference_CH2 * .034 / 2;
 80012d8:	4b28      	ldr	r3, [pc, #160]	; (800137c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f879 	bl	80003d4 <__aeabi_ui2d>
 80012e2:	a31b      	add	r3, pc, #108	; (adr r3, 8001350 <HAL_TIM_IC_CaptureCallback+0x230>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff f8ee 	bl	80004c8 <__aeabi_dmul>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012fc:	f7ff fa0e 	bl	800071c <__aeabi_ddiv>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff faf0 	bl	80008ec <__aeabi_d2f>
 800130c:	4603      	mov	r3, r0
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001310:	6013      	str	r3, [r2, #0]
			Is_First_Captured_CH2 = 0; // set it back to false
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6a1a      	ldr	r2, [r3, #32]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001326:	621a      	str	r2, [r3, #32]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6a12      	ldr	r2, [r2, #32]
 8001332:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0204 	bic.w	r2, r2, #4
 8001342:	60da      	str	r2, [r3, #12]
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	f3af 8000 	nop.w
 8001350:	b020c49c 	.word	0xb020c49c
 8001354:	3fa16872 	.word	0x3fa16872
 8001358:	20000045 	.word	0x20000045
 800135c:	20000048 	.word	0x20000048
 8001360:	2000004c 	.word	0x2000004c
 8001364:	20000050 	.word	0x20000050
 8001368:	20000054 	.word	0x20000054
 800136c:	200000b8 	.word	0x200000b8
 8001370:	20000058 	.word	0x20000058
 8001374:	2000005c 	.word	0x2000005c
 8001378:	20000060 	.word	0x20000060
 800137c:	20000064 	.word	0x20000064
 8001380:	20000068 	.word	0x20000068

08001384 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <MX_FREERTOS_Init+0x18>)
 800138a:	2100      	movs	r1, #0
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <MX_FREERTOS_Init+0x1c>)
 800138e:	f002 ff89 	bl	80042a4 <osThreadNew>
 8001392:	4603      	mov	r3, r0
 8001394:	4a03      	ldr	r2, [pc, #12]	; (80013a4 <MX_FREERTOS_Init+0x20>)
 8001396:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	08006cb4 	.word	0x08006cb4
 80013a0:	080013a9 	.word	0x080013a9
 80013a4:	2000006c 	.word	0x2000006c

080013a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f003 f821 	bl	80043f8 <osDelay>
 80013b6:	e7fb      	b.n	80013b0 <StartDefaultTask+0x8>

080013b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013cc:	4b32      	ldr	r3, [pc, #200]	; (8001498 <MX_GPIO_Init+0xe0>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a31      	ldr	r2, [pc, #196]	; (8001498 <MX_GPIO_Init+0xe0>)
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <MX_GPIO_Init+0xe0>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <MX_GPIO_Init+0xe0>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a2b      	ldr	r2, [pc, #172]	; (8001498 <MX_GPIO_Init+0xe0>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <MX_GPIO_Init+0xe0>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fc:	4b26      	ldr	r3, [pc, #152]	; (8001498 <MX_GPIO_Init+0xe0>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a25      	ldr	r2, [pc, #148]	; (8001498 <MX_GPIO_Init+0xe0>)
 8001402:	f043 0308 	orr.w	r3, r3, #8
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b23      	ldr	r3, [pc, #140]	; (8001498 <MX_GPIO_Init+0xe0>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141a:	4820      	ldr	r0, [pc, #128]	; (800149c <MX_GPIO_Init+0xe4>)
 800141c:	f000 fea6 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	211e      	movs	r1, #30
 8001424:	481e      	ldr	r0, [pc, #120]	; (80014a0 <MX_GPIO_Init+0xe8>)
 8001426:	f000 fea1 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Trigger1_Pin|Trigger2_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8001430:	481c      	ldr	r0, [pc, #112]	; (80014a4 <MX_GPIO_Init+0xec>)
 8001432:	f000 fe9b 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2302      	movs	r3, #2
 8001446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	4619      	mov	r1, r3
 800144e:	4813      	ldr	r0, [pc, #76]	; (800149c <MX_GPIO_Init+0xe4>)
 8001450:	f000 fd08 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001454:	231e      	movs	r3, #30
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2302      	movs	r3, #2
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <MX_GPIO_Init+0xe8>)
 800146c:	f000 fcfa 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Trigger1_Pin|Trigger2_Pin;
 8001470:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2302      	movs	r3, #2
 8001480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4619      	mov	r1, r3
 8001488:	4806      	ldr	r0, [pc, #24]	; (80014a4 <MX_GPIO_Init+0xec>)
 800148a:	f000 fceb 	bl	8001e64 <HAL_GPIO_Init>

}
 800148e:	bf00      	nop
 8001490:	3720      	adds	r7, #32
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	40011000 	.word	0x40011000
 80014a0:	40010800 	.word	0x40010800
 80014a4:	40010c00 	.word	0x40010c00

080014a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ae:	f000 fbc7 	bl	8001c40 <HAL_Init>

  /* USER CODE BEGIN Init */
  xTaskCreate(drive_task, "Driving Task", 100, ( void * ) 1, 3, NULL);
 80014b2:	2300      	movs	r3, #0
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	2303      	movs	r3, #3
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	2264      	movs	r2, #100	; 0x64
 80014be:	492e      	ldr	r1, [pc, #184]	; (8001578 <main+0xd0>)
 80014c0:	482e      	ldr	r0, [pc, #184]	; (800157c <main+0xd4>)
 80014c2:	f003 fde9 	bl	8005098 <xTaskCreate>
  xTaskCreate(get_data_task, "Bluetooth Task", 100, ( void * ) 1, 2, NULL);
 80014c6:	2300      	movs	r3, #0
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	2302      	movs	r3, #2
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2301      	movs	r3, #1
 80014d0:	2264      	movs	r2, #100	; 0x64
 80014d2:	492b      	ldr	r1, [pc, #172]	; (8001580 <main+0xd8>)
 80014d4:	482b      	ldr	r0, [pc, #172]	; (8001584 <main+0xdc>)
 80014d6:	f003 fddf 	bl	8005098 <xTaskCreate>
  xTaskCreate(HCSR04_1_Read_task, "HCSR04_1 Task", 100, ( void * ) 1, 1, NULL);
 80014da:	2300      	movs	r3, #0
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	2301      	movs	r3, #1
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2301      	movs	r3, #1
 80014e4:	2264      	movs	r2, #100	; 0x64
 80014e6:	4928      	ldr	r1, [pc, #160]	; (8001588 <main+0xe0>)
 80014e8:	4828      	ldr	r0, [pc, #160]	; (800158c <main+0xe4>)
 80014ea:	f003 fdd5 	bl	8005098 <xTaskCreate>
  xTaskCreate(HCSR04_2_Read_task, "HCSR04_2 Task", 100, ( void * ) 1, 4, NULL);
 80014ee:	2300      	movs	r3, #0
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	2304      	movs	r3, #4
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2301      	movs	r3, #1
 80014f8:	2264      	movs	r2, #100	; 0x64
 80014fa:	4925      	ldr	r1, [pc, #148]	; (8001590 <main+0xe8>)
 80014fc:	4825      	ldr	r0, [pc, #148]	; (8001594 <main+0xec>)
 80014fe:	f003 fdcb 	bl	8005098 <xTaskCreate>
  xTaskCreate(blind_spot_task, "blind spot Task", 100, ( void * ) 1, 5, NULL);
 8001502:	2300      	movs	r3, #0
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	2305      	movs	r3, #5
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2301      	movs	r3, #1
 800150c:	2264      	movs	r2, #100	; 0x64
 800150e:	4922      	ldr	r1, [pc, #136]	; (8001598 <main+0xf0>)
 8001510:	4822      	ldr	r0, [pc, #136]	; (800159c <main+0xf4>)
 8001512:	f003 fdc1 	bl	8005098 <xTaskCreate>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001516:	f000 f843 	bl	80015a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151a:	f7ff ff4d 	bl	80013b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800151e:	f000 faf3 	bl	8001b08 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001522:	f000 f9bf 	bl	80018a4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001526:	f000 f95f 	bl	80017e8 <MX_TIM2_Init>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800152a:	f002 fe55 	bl	80041d8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800152e:	f7ff ff29 	bl	8001384 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001532:	f002 fe83 	bl	800423c <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TIM2->CCR2 = 5000;
 8001536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800153a:	f241 3288 	movw	r2, #5000	; 0x1388
 800153e:	639a      	str	r2, [r3, #56]	; 0x38
	  for(int i=0; i<30000; i++);
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	e002      	b.n	800154c <main+0xa4>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3301      	adds	r3, #1
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f247 522f 	movw	r2, #29999	; 0x752f
 8001552:	4293      	cmp	r3, r2
 8001554:	ddf7      	ble.n	8001546 <main+0x9e>
	  TIM2->CCR2 = 10000;
 8001556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800155a:	f242 7210 	movw	r2, #10000	; 0x2710
 800155e:	639a      	str	r2, [r3, #56]	; 0x38
	  for(int i=0; i<30000; i++);
 8001560:	2300      	movs	r3, #0
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	e002      	b.n	800156c <main+0xc4>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f247 522f 	movw	r2, #29999	; 0x752f
 8001572:	4293      	cmp	r3, r2
 8001574:	ddf7      	ble.n	8001566 <main+0xbe>
	  TIM2->CCR2 = 5000;
 8001576:	e7de      	b.n	8001536 <main+0x8e>
 8001578:	08006c24 	.word	0x08006c24
 800157c:	08000e75 	.word	0x08000e75
 8001580:	08006c34 	.word	0x08006c34
 8001584:	08000e55 	.word	0x08000e55
 8001588:	08006c44 	.word	0x08006c44
 800158c:	08001049 	.word	0x08001049
 8001590:	08006c54 	.word	0x08006c54
 8001594:	08001091 	.word	0x08001091
 8001598:	08006c64 	.word	0x08006c64
 800159c:	080010d5 	.word	0x080010d5

080015a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b090      	sub	sp, #64	; 0x40
 80015a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a6:	f107 0318 	add.w	r3, r7, #24
 80015aa:	2228      	movs	r2, #40	; 0x28
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f005 faec 	bl	8006b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c6:	2301      	movs	r3, #1
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ca:	2310      	movs	r3, #16
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d2:	f107 0318 	add.w	r3, r7, #24
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 fde0 	bl	800219c <HAL_RCC_OscConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015e2:	f000 f82b 	bl	800163c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e6:	230f      	movs	r3, #15
 80015e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f001 f84e 	bl	80026a0 <HAL_RCC_ClockConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800160a:	f000 f817 	bl	800163c <Error_Handler>
  }
}
 800160e:	bf00      	nop
 8001610:	3740      	adds	r7, #64	; 0x40
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d101      	bne.n	800162e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800162a:	f000 fb1f 	bl	8001c6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40012c00 	.word	0x40012c00

0800163c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001640:	b672      	cpsid	i
}
 8001642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001644:	e7fe      	b.n	8001644 <Error_Handler+0x8>
	...

08001648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_MspInit+0x68>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <HAL_MspInit+0x68>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6193      	str	r3, [r2, #24]
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_MspInit+0x68>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_MspInit+0x68>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <HAL_MspInit+0x68>)
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001670:	61d3      	str	r3, [r2, #28]
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_MspInit+0x68>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	210f      	movs	r1, #15
 8001682:	f06f 0001 	mvn.w	r0, #1
 8001686:	f000 fbc2 	bl	8001e0e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_MspInit+0x6c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <HAL_MspInit+0x6c>)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40010000 	.word	0x40010000

080016b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08c      	sub	sp, #48	; 0x30
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016ce:	4b2e      	ldr	r3, [pc, #184]	; (8001788 <HAL_InitTick+0xd0>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	4a2d      	ldr	r2, [pc, #180]	; (8001788 <HAL_InitTick+0xd0>)
 80016d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016d8:	6193      	str	r3, [r2, #24]
 80016da:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <HAL_InitTick+0xd0>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016e6:	f107 020c 	add.w	r2, r7, #12
 80016ea:	f107 0310 	add.w	r3, r7, #16
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f001 f945 	bl	8002980 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016f6:	f001 f92f 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 80016fa:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fe:	4a23      	ldr	r2, [pc, #140]	; (800178c <HAL_InitTick+0xd4>)
 8001700:	fba2 2303 	umull	r2, r3, r2, r3
 8001704:	0c9b      	lsrs	r3, r3, #18
 8001706:	3b01      	subs	r3, #1
 8001708:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800170a:	4b21      	ldr	r3, [pc, #132]	; (8001790 <HAL_InitTick+0xd8>)
 800170c:	4a21      	ldr	r2, [pc, #132]	; (8001794 <HAL_InitTick+0xdc>)
 800170e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001710:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <HAL_InitTick+0xd8>)
 8001712:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001716:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001718:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <HAL_InitTick+0xd8>)
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800171e:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <HAL_InitTick+0xd8>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_InitTick+0xd8>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_InitTick+0xd8>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001730:	4817      	ldr	r0, [pc, #92]	; (8001790 <HAL_InitTick+0xd8>)
 8001732:	f001 f973 	bl	8002a1c <HAL_TIM_Base_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800173c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001740:	2b00      	cmp	r3, #0
 8001742:	d11b      	bne.n	800177c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001744:	4812      	ldr	r0, [pc, #72]	; (8001790 <HAL_InitTick+0xd8>)
 8001746:	f001 f9b9 	bl	8002abc <HAL_TIM_Base_Start_IT>
 800174a:	4603      	mov	r3, r0
 800174c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001750:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001754:	2b00      	cmp	r3, #0
 8001756:	d111      	bne.n	800177c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001758:	2019      	movs	r0, #25
 800175a:	f000 fb74 	bl	8001e46 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	d808      	bhi.n	8001776 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001764:	2200      	movs	r2, #0
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	2019      	movs	r0, #25
 800176a:	f000 fb50 	bl	8001e0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <HAL_InitTick+0xe0>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	e002      	b.n	800177c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800177c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001780:	4618      	mov	r0, r3
 8001782:	3730      	adds	r7, #48	; 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40021000 	.word	0x40021000
 800178c:	431bde83 	.word	0x431bde83
 8001790:	20000070 	.word	0x20000070
 8001794:	40012c00 	.word	0x40012c00
 8001798:	2000001c 	.word	0x2000001c

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a0:	e7fe      	b.n	80017a0 <NMI_Handler+0x4>

080017a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <HardFault_Handler+0x4>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <MemManage_Handler+0x4>

080017ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <UsageFault_Handler+0x4>

080017ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
	...

080017c8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <TIM1_UP_IRQHandler+0x10>)
 80017ce:	f001 fb74 	bl	8002eba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000070 	.word	0x20000070

080017dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ee:	f107 0310 	add.w	r3, r7, #16
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017f8:	463b      	mov	r3, r7
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001804:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <MX_TIM2_Init+0xb8>)
 8001806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800180a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 800180c:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <MX_TIM2_Init+0xb8>)
 800180e:	2207      	movs	r2, #7
 8001810:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001812:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <MX_TIM2_Init+0xb8>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001818:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <MX_TIM2_Init+0xb8>)
 800181a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800181e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <MX_TIM2_Init+0xb8>)
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <MX_TIM2_Init+0xb8>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800182c:	481c      	ldr	r0, [pc, #112]	; (80018a0 <MX_TIM2_Init+0xb8>)
 800182e:	f001 faf5 	bl	8002e1c <HAL_TIM_IC_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001838:	f7ff ff00 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	4619      	mov	r1, r3
 800184a:	4815      	ldr	r0, [pc, #84]	; (80018a0 <MX_TIM2_Init+0xb8>)
 800184c:	f002 fa76 	bl	8003d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001856:	f7ff fef1 	bl	800163c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800185e:	2301      	movs	r3, #1
 8001860:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 8001866:	2304      	movs	r3, #4
 8001868:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800186a:	463b      	mov	r3, r7
 800186c:	2200      	movs	r2, #0
 800186e:	4619      	mov	r1, r3
 8001870:	480b      	ldr	r0, [pc, #44]	; (80018a0 <MX_TIM2_Init+0xb8>)
 8001872:	f001 fc2a 	bl	80030ca <HAL_TIM_IC_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800187c:	f7ff fede 	bl	800163c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001880:	463b      	mov	r3, r7
 8001882:	2204      	movs	r2, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4806      	ldr	r0, [pc, #24]	; (80018a0 <MX_TIM2_Init+0xb8>)
 8001888:	f001 fc1f 	bl	80030ca <HAL_TIM_IC_ConfigChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001892:	f7ff fed3 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200000b8 	.word	0x200000b8

080018a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08e      	sub	sp, #56	; 0x38
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b8:	f107 0320 	add.w	r3, r7, #32
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	615a      	str	r2, [r3, #20]
 80018d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018d4:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <MX_TIM3_Init+0xe4>)
 80018d6:	4a2d      	ldr	r2, [pc, #180]	; (800198c <MX_TIM3_Init+0xe8>)
 80018d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80018da:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <MX_TIM3_Init+0xe4>)
 80018dc:	2207      	movs	r2, #7
 80018de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	4b29      	ldr	r3, [pc, #164]	; (8001988 <MX_TIM3_Init+0xe4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80018e6:	4b28      	ldr	r3, [pc, #160]	; (8001988 <MX_TIM3_Init+0xe4>)
 80018e8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80018ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <MX_TIM3_Init+0xe4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <MX_TIM3_Init+0xe4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018fa:	4823      	ldr	r0, [pc, #140]	; (8001988 <MX_TIM3_Init+0xe4>)
 80018fc:	f001 f88e 	bl	8002a1c <HAL_TIM_Base_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001906:	f7ff fe99 	bl	800163c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001910:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001914:	4619      	mov	r1, r3
 8001916:	481c      	ldr	r0, [pc, #112]	; (8001988 <MX_TIM3_Init+0xe4>)
 8001918:	f001 fd36 	bl	8003388 <HAL_TIM_ConfigClockSource>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001922:	f7ff fe8b 	bl	800163c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001926:	4818      	ldr	r0, [pc, #96]	; (8001988 <MX_TIM3_Init+0xe4>)
 8001928:	f001 f91a 	bl	8002b60 <HAL_TIM_PWM_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001932:	f7ff fe83 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800193e:	f107 0320 	add.w	r3, r7, #32
 8001942:	4619      	mov	r1, r3
 8001944:	4810      	ldr	r0, [pc, #64]	; (8001988 <MX_TIM3_Init+0xe4>)
 8001946:	f002 f9f9 	bl	8003d3c <HAL_TIMEx_MasterConfigSynchronization>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001950:	f7ff fe74 	bl	800163c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001954:	2360      	movs	r3, #96	; 0x60
 8001956:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	2200      	movs	r2, #0
 8001968:	4619      	mov	r1, r3
 800196a:	4807      	ldr	r0, [pc, #28]	; (8001988 <MX_TIM3_Init+0xe4>)
 800196c:	f001 fc4a 	bl	8003204 <HAL_TIM_PWM_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001976:	f7ff fe61 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800197a:	4803      	ldr	r0, [pc, #12]	; (8001988 <MX_TIM3_Init+0xe4>)
 800197c:	f000 f892 	bl	8001aa4 <HAL_TIM_MspPostInit>

}
 8001980:	bf00      	nop
 8001982:	3738      	adds	r7, #56	; 0x38
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000100 	.word	0x20000100
 800198c:	40000400 	.word	0x40000400

08001990 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ae:	d14e      	bne.n	8001a4e <HAL_TIM_IC_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019b0:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <HAL_TIM_IC_MspInit+0xc8>)
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	4a28      	ldr	r2, [pc, #160]	; (8001a58 <HAL_TIM_IC_MspInit+0xc8>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	61d3      	str	r3, [r2, #28]
 80019bc:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <HAL_TIM_IC_MspInit+0xc8>)
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c8:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_TIM_IC_MspInit+0xc8>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a22      	ldr	r2, [pc, #136]	; (8001a58 <HAL_TIM_IC_MspInit+0xc8>)
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_TIM_IC_MspInit+0xc8>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e0:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_TIM_IC_MspInit+0xc8>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <HAL_TIM_IC_MspInit+0xc8>)
 80019e6:	f043 0308 	orr.w	r3, r3, #8
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <HAL_TIM_IC_MspInit+0xc8>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Echo1_Pin;
 80019f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Echo1_GPIO_Port, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4813      	ldr	r0, [pc, #76]	; (8001a5c <HAL_TIM_IC_MspInit+0xcc>)
 8001a0e:	f000 fa29 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Echo2_Pin;
 8001a12:	2308      	movs	r3, #8
 8001a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Echo2_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	480e      	ldr	r0, [pc, #56]	; (8001a60 <HAL_TIM_IC_MspInit+0xd0>)
 8001a26:	f000 fa1d 	bl	8001e64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_TIM_IC_MspInit+0xd4>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
 8001a48:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <HAL_TIM_IC_MspInit+0xd4>)
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	; 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010800 	.word	0x40010800
 8001a60:	40010c00 	.word	0x40010c00
 8001a64:	40010000 	.word	0x40010000

08001a68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <HAL_TIM_Base_MspInit+0x34>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10b      	bne.n	8001a92 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_TIM_Base_MspInit+0x38>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <HAL_TIM_Base_MspInit+0x38>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	61d3      	str	r3, [r2, #28]
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_TIM_Base_MspInit+0x38>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <HAL_TIM_MspPostInit+0x58>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d117      	bne.n	8001af4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_TIM_MspPostInit+0x5c>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <HAL_TIM_MspPostInit+0x5c>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6193      	str	r3, [r2, #24]
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_TIM_MspPostInit+0x5c>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001adc:	2340      	movs	r3, #64	; 0x40
 8001ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	4619      	mov	r1, r3
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <HAL_TIM_MspPostInit+0x60>)
 8001af0:	f000 f9b8 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001af4:	bf00      	nop
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40000400 	.word	0x40000400
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010800 	.word	0x40010800

08001b08 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <MX_USART1_UART_Init+0x50>)
 8001b10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b2e:	220c      	movs	r2, #12
 8001b30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_USART1_UART_Init+0x4c>)
 8001b40:	f002 f96c 	bl	8003e1c <HAL_UART_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b4a:	f7ff fd77 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000148 	.word	0x20000148
 8001b58:	40013800 	.word	0x40013800

08001b5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1c      	ldr	r2, [pc, #112]	; (8001be8 <HAL_UART_MspInit+0x8c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d131      	bne.n	8001be0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a1a      	ldr	r2, [pc, #104]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001b82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6193      	str	r3, [r2, #24]
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_UART_MspInit+0x90>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0310 	add.w	r3, r7, #16
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480b      	ldr	r0, [pc, #44]	; (8001bf0 <HAL_UART_MspInit+0x94>)
 8001bc2:	f000 f94f 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <HAL_UART_MspInit+0x94>)
 8001bdc:	f000 f942 	bl	8001e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001be0:	bf00      	nop
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40013800 	.word	0x40013800
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010800 	.word	0x40010800

08001bf4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bf4:	f7ff fdf2 	bl	80017dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf8:	480b      	ldr	r0, [pc, #44]	; (8001c28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bfa:	490c      	ldr	r1, [pc, #48]	; (8001c2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bfc:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c10:	4c09      	ldr	r4, [pc, #36]	; (8001c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f004 ffbd 	bl	8006b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c22:	f7ff fc41 	bl	80014a8 <main>
  bx lr
 8001c26:	4770      	bx	lr
  ldr r0, =_sdata
 8001c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c2c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001c30:	08006d0c 	.word	0x08006d0c
  ldr r2, =_sbss
 8001c34:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001c38:	20001adc 	.word	0x20001adc

08001c3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <ADC1_2_IRQHandler>
	...

08001c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_Init+0x28>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <HAL_Init+0x28>)
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c50:	2003      	movs	r0, #3
 8001c52:	f000 f8d1 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c56:	200f      	movs	r0, #15
 8001c58:	f7ff fd2e 	bl	80016b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c5c:	f7ff fcf4 	bl	8001648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40022000 	.word	0x40022000

08001c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_IncTick+0x1c>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_IncTick+0x20>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a03      	ldr	r2, [pc, #12]	; (8001c8c <HAL_IncTick+0x20>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	20000020 	.word	0x20000020
 8001c8c:	20000190 	.word	0x20000190

08001c90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b02      	ldr	r3, [pc, #8]	; (8001ca0 <HAL_GetTick+0x10>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	20000190 	.word	0x20000190

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0b      	blt.n	8001d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4906      	ldr	r1, [pc, #24]	; (8001d3c <__NVIC_EnableIRQ+0x34>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
         );
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff4f 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e20:	f7ff ff64 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f7ff ffb2 	bl	8001d94 <NVIC_EncodePriority>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff81 	bl	8001d40 <__NVIC_SetPriority>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff57 	bl	8001d08 <__NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b08b      	sub	sp, #44	; 0x2c
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e76:	e169      	b.n	800214c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	f040 8158 	bne.w	8002146 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	4a9a      	ldr	r2, [pc, #616]	; (8002104 <HAL_GPIO_Init+0x2a0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d05e      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
 8001ea0:	4a98      	ldr	r2, [pc, #608]	; (8002104 <HAL_GPIO_Init+0x2a0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d875      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001ea6:	4a98      	ldr	r2, [pc, #608]	; (8002108 <HAL_GPIO_Init+0x2a4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d058      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
 8001eac:	4a96      	ldr	r2, [pc, #600]	; (8002108 <HAL_GPIO_Init+0x2a4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d86f      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001eb2:	4a96      	ldr	r2, [pc, #600]	; (800210c <HAL_GPIO_Init+0x2a8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d052      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
 8001eb8:	4a94      	ldr	r2, [pc, #592]	; (800210c <HAL_GPIO_Init+0x2a8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d869      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001ebe:	4a94      	ldr	r2, [pc, #592]	; (8002110 <HAL_GPIO_Init+0x2ac>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d04c      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
 8001ec4:	4a92      	ldr	r2, [pc, #584]	; (8002110 <HAL_GPIO_Init+0x2ac>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d863      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001eca:	4a92      	ldr	r2, [pc, #584]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d046      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
 8001ed0:	4a90      	ldr	r2, [pc, #576]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d85d      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001ed6:	2b12      	cmp	r3, #18
 8001ed8:	d82a      	bhi.n	8001f30 <HAL_GPIO_Init+0xcc>
 8001eda:	2b12      	cmp	r3, #18
 8001edc:	d859      	bhi.n	8001f92 <HAL_GPIO_Init+0x12e>
 8001ede:	a201      	add	r2, pc, #4	; (adr r2, 8001ee4 <HAL_GPIO_Init+0x80>)
 8001ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee4:	08001f5f 	.word	0x08001f5f
 8001ee8:	08001f39 	.word	0x08001f39
 8001eec:	08001f4b 	.word	0x08001f4b
 8001ef0:	08001f8d 	.word	0x08001f8d
 8001ef4:	08001f93 	.word	0x08001f93
 8001ef8:	08001f93 	.word	0x08001f93
 8001efc:	08001f93 	.word	0x08001f93
 8001f00:	08001f93 	.word	0x08001f93
 8001f04:	08001f93 	.word	0x08001f93
 8001f08:	08001f93 	.word	0x08001f93
 8001f0c:	08001f93 	.word	0x08001f93
 8001f10:	08001f93 	.word	0x08001f93
 8001f14:	08001f93 	.word	0x08001f93
 8001f18:	08001f93 	.word	0x08001f93
 8001f1c:	08001f93 	.word	0x08001f93
 8001f20:	08001f93 	.word	0x08001f93
 8001f24:	08001f93 	.word	0x08001f93
 8001f28:	08001f41 	.word	0x08001f41
 8001f2c:	08001f55 	.word	0x08001f55
 8001f30:	4a79      	ldr	r2, [pc, #484]	; (8002118 <HAL_GPIO_Init+0x2b4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d013      	beq.n	8001f5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f36:	e02c      	b.n	8001f92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	623b      	str	r3, [r7, #32]
          break;
 8001f3e:	e029      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	3304      	adds	r3, #4
 8001f46:	623b      	str	r3, [r7, #32]
          break;
 8001f48:	e024      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	3308      	adds	r3, #8
 8001f50:	623b      	str	r3, [r7, #32]
          break;
 8001f52:	e01f      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	330c      	adds	r3, #12
 8001f5a:	623b      	str	r3, [r7, #32]
          break;
 8001f5c:	e01a      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d102      	bne.n	8001f6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f66:	2304      	movs	r3, #4
 8001f68:	623b      	str	r3, [r7, #32]
          break;
 8001f6a:	e013      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d105      	bne.n	8001f80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f74:	2308      	movs	r3, #8
 8001f76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	611a      	str	r2, [r3, #16]
          break;
 8001f7e:	e009      	b.n	8001f94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f80:	2308      	movs	r3, #8
 8001f82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	615a      	str	r2, [r3, #20]
          break;
 8001f8a:	e003      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	623b      	str	r3, [r7, #32]
          break;
 8001f90:	e000      	b.n	8001f94 <HAL_GPIO_Init+0x130>
          break;
 8001f92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	2bff      	cmp	r3, #255	; 0xff
 8001f98:	d801      	bhi.n	8001f9e <HAL_GPIO_Init+0x13a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	e001      	b.n	8001fa2 <HAL_GPIO_Init+0x13e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2bff      	cmp	r3, #255	; 0xff
 8001fa8:	d802      	bhi.n	8001fb0 <HAL_GPIO_Init+0x14c>
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	e002      	b.n	8001fb6 <HAL_GPIO_Init+0x152>
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	3b08      	subs	r3, #8
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	210f      	movs	r1, #15
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	6a39      	ldr	r1, [r7, #32]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 80b1 	beq.w	8002146 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe4:	4b4d      	ldr	r3, [pc, #308]	; (800211c <HAL_GPIO_Init+0x2b8>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	4a4c      	ldr	r2, [pc, #304]	; (800211c <HAL_GPIO_Init+0x2b8>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6193      	str	r3, [r2, #24]
 8001ff0:	4b4a      	ldr	r3, [pc, #296]	; (800211c <HAL_GPIO_Init+0x2b8>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ffc:	4a48      	ldr	r2, [pc, #288]	; (8002120 <HAL_GPIO_Init+0x2bc>)
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	3302      	adds	r3, #2
 8002004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002008:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	220f      	movs	r2, #15
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4013      	ands	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a40      	ldr	r2, [pc, #256]	; (8002124 <HAL_GPIO_Init+0x2c0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d013      	beq.n	8002050 <HAL_GPIO_Init+0x1ec>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a3f      	ldr	r2, [pc, #252]	; (8002128 <HAL_GPIO_Init+0x2c4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00d      	beq.n	800204c <HAL_GPIO_Init+0x1e8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3e      	ldr	r2, [pc, #248]	; (800212c <HAL_GPIO_Init+0x2c8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d007      	beq.n	8002048 <HAL_GPIO_Init+0x1e4>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3d      	ldr	r2, [pc, #244]	; (8002130 <HAL_GPIO_Init+0x2cc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d101      	bne.n	8002044 <HAL_GPIO_Init+0x1e0>
 8002040:	2303      	movs	r3, #3
 8002042:	e006      	b.n	8002052 <HAL_GPIO_Init+0x1ee>
 8002044:	2304      	movs	r3, #4
 8002046:	e004      	b.n	8002052 <HAL_GPIO_Init+0x1ee>
 8002048:	2302      	movs	r3, #2
 800204a:	e002      	b.n	8002052 <HAL_GPIO_Init+0x1ee>
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <HAL_GPIO_Init+0x1ee>
 8002050:	2300      	movs	r3, #0
 8002052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002054:	f002 0203 	and.w	r2, r2, #3
 8002058:	0092      	lsls	r2, r2, #2
 800205a:	4093      	lsls	r3, r2
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002062:	492f      	ldr	r1, [pc, #188]	; (8002120 <HAL_GPIO_Init+0x2bc>)
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800207c:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	492c      	ldr	r1, [pc, #176]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800208a:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	43db      	mvns	r3, r3
 8002092:	4928      	ldr	r1, [pc, #160]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 8002094:	4013      	ands	r3, r2
 8002096:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020a4:	4b23      	ldr	r3, [pc, #140]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	4922      	ldr	r1, [pc, #136]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60cb      	str	r3, [r1, #12]
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020b2:	4b20      	ldr	r3, [pc, #128]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	491e      	ldr	r1, [pc, #120]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020bc:	4013      	ands	r3, r2
 80020be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d006      	beq.n	80020da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4918      	ldr	r1, [pc, #96]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
 80020d8:	e006      	b.n	80020e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4914      	ldr	r1, [pc, #80]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d021      	beq.n	8002138 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	490e      	ldr	r1, [pc, #56]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]
 8002100:	e021      	b.n	8002146 <HAL_GPIO_Init+0x2e2>
 8002102:	bf00      	nop
 8002104:	10320000 	.word	0x10320000
 8002108:	10310000 	.word	0x10310000
 800210c:	10220000 	.word	0x10220000
 8002110:	10210000 	.word	0x10210000
 8002114:	10120000 	.word	0x10120000
 8002118:	10110000 	.word	0x10110000
 800211c:	40021000 	.word	0x40021000
 8002120:	40010000 	.word	0x40010000
 8002124:	40010800 	.word	0x40010800
 8002128:	40010c00 	.word	0x40010c00
 800212c:	40011000 	.word	0x40011000
 8002130:	40011400 	.word	0x40011400
 8002134:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_GPIO_Init+0x304>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	43db      	mvns	r3, r3
 8002140:	4909      	ldr	r1, [pc, #36]	; (8002168 <HAL_GPIO_Init+0x304>)
 8002142:	4013      	ands	r3, r2
 8002144:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	3301      	adds	r3, #1
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	fa22 f303 	lsr.w	r3, r2, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	f47f ae8e 	bne.w	8001e78 <HAL_GPIO_Init+0x14>
  }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	372c      	adds	r7, #44	; 0x2c
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	40010400 	.word	0x40010400

0800216c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
 8002178:	4613      	mov	r3, r2
 800217a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800217c:	787b      	ldrb	r3, [r7, #1]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002182:	887a      	ldrh	r2, [r7, #2]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002188:	e003      	b.n	8002192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800218a:	887b      	ldrh	r3, [r7, #2]
 800218c:	041a      	lsls	r2, r3, #16
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	611a      	str	r2, [r3, #16]
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e272      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 8087 	beq.w	80022ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021bc:	4b92      	ldr	r3, [pc, #584]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d00c      	beq.n	80021e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021c8:	4b8f      	ldr	r3, [pc, #572]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d112      	bne.n	80021fa <HAL_RCC_OscConfig+0x5e>
 80021d4:	4b8c      	ldr	r3, [pc, #560]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e0:	d10b      	bne.n	80021fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e2:	4b89      	ldr	r3, [pc, #548]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d06c      	beq.n	80022c8 <HAL_RCC_OscConfig+0x12c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d168      	bne.n	80022c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e24c      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002202:	d106      	bne.n	8002212 <HAL_RCC_OscConfig+0x76>
 8002204:	4b80      	ldr	r3, [pc, #512]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a7f      	ldr	r2, [pc, #508]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800220a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	e02e      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0x98>
 800221a:	4b7b      	ldr	r3, [pc, #492]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a7a      	ldr	r2, [pc, #488]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b78      	ldr	r3, [pc, #480]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a77      	ldr	r2, [pc, #476]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800222c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e01d      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0xbc>
 800223e:	4b72      	ldr	r3, [pc, #456]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a71      	ldr	r2, [pc, #452]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b6f      	ldr	r3, [pc, #444]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a6e      	ldr	r2, [pc, #440]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e00b      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002258:	4b6b      	ldr	r3, [pc, #428]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a6a      	ldr	r2, [pc, #424]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800225e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b68      	ldr	r3, [pc, #416]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a67      	ldr	r2, [pc, #412]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800226a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff fd0a 	bl	8001c90 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002280:	f7ff fd06 	bl	8001c90 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	; 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e200      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b5d      	ldr	r3, [pc, #372]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0xe4>
 800229e:	e014      	b.n	80022ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff fcf6 	bl	8001c90 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a8:	f7ff fcf2 	bl	8001c90 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e1ec      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ba:	4b53      	ldr	r3, [pc, #332]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x10c>
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d063      	beq.n	800239e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022d6:	4b4c      	ldr	r3, [pc, #304]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022e2:	4b49      	ldr	r3, [pc, #292]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d11c      	bne.n	8002328 <HAL_RCC_OscConfig+0x18c>
 80022ee:	4b46      	ldr	r3, [pc, #280]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d116      	bne.n	8002328 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	4b43      	ldr	r3, [pc, #268]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_RCC_OscConfig+0x176>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d001      	beq.n	8002312 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e1c0      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002312:	4b3d      	ldr	r3, [pc, #244]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4939      	ldr	r1, [pc, #228]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002326:	e03a      	b.n	800239e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002330:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7ff fcab 	bl	8001c90 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233e:	f7ff fca7 	bl	8001c90 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e1a1      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235c:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4927      	ldr	r1, [pc, #156]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]
 8002370:	e015      	b.n	800239e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_RCC_OscConfig+0x270>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7ff fc8a 	bl	8001c90 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002380:	f7ff fc86 	bl	8001c90 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e180      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002392:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d03a      	beq.n	8002420 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d019      	beq.n	80023e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <HAL_RCC_OscConfig+0x274>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b8:	f7ff fc6a 	bl	8001c90 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c0:	f7ff fc66 	bl	8001c90 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e160      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023de:	2001      	movs	r0, #1
 80023e0:	f000 fafe 	bl	80029e0 <RCC_Delay>
 80023e4:	e01c      	b.n	8002420 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_RCC_OscConfig+0x274>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ec:	f7ff fc50 	bl	8001c90 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f2:	e00f      	b.n	8002414 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f4:	f7ff fc4c 	bl	8001c90 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d908      	bls.n	8002414 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e146      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	42420000 	.word	0x42420000
 8002410:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002414:	4b92      	ldr	r3, [pc, #584]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1e9      	bne.n	80023f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80a6 	beq.w	800257a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002432:	4b8b      	ldr	r3, [pc, #556]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10d      	bne.n	800245a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	4b88      	ldr	r3, [pc, #544]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4a87      	ldr	r2, [pc, #540]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002448:	61d3      	str	r3, [r2, #28]
 800244a:	4b85      	ldr	r3, [pc, #532]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002456:	2301      	movs	r3, #1
 8002458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245a:	4b82      	ldr	r3, [pc, #520]	; (8002664 <HAL_RCC_OscConfig+0x4c8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d118      	bne.n	8002498 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002466:	4b7f      	ldr	r3, [pc, #508]	; (8002664 <HAL_RCC_OscConfig+0x4c8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a7e      	ldr	r2, [pc, #504]	; (8002664 <HAL_RCC_OscConfig+0x4c8>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002472:	f7ff fc0d 	bl	8001c90 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247a:	f7ff fc09 	bl	8001c90 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b64      	cmp	r3, #100	; 0x64
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e103      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248c:	4b75      	ldr	r3, [pc, #468]	; (8002664 <HAL_RCC_OscConfig+0x4c8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d106      	bne.n	80024ae <HAL_RCC_OscConfig+0x312>
 80024a0:	4b6f      	ldr	r3, [pc, #444]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4a6e      	ldr	r2, [pc, #440]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6213      	str	r3, [r2, #32]
 80024ac:	e02d      	b.n	800250a <HAL_RCC_OscConfig+0x36e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x334>
 80024b6:	4b6a      	ldr	r3, [pc, #424]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4a69      	ldr	r2, [pc, #420]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	6213      	str	r3, [r2, #32]
 80024c2:	4b67      	ldr	r3, [pc, #412]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	4a66      	ldr	r2, [pc, #408]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	f023 0304 	bic.w	r3, r3, #4
 80024cc:	6213      	str	r3, [r2, #32]
 80024ce:	e01c      	b.n	800250a <HAL_RCC_OscConfig+0x36e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d10c      	bne.n	80024f2 <HAL_RCC_OscConfig+0x356>
 80024d8:	4b61      	ldr	r3, [pc, #388]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4a60      	ldr	r2, [pc, #384]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	f043 0304 	orr.w	r3, r3, #4
 80024e2:	6213      	str	r3, [r2, #32]
 80024e4:	4b5e      	ldr	r3, [pc, #376]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4a5d      	ldr	r2, [pc, #372]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6213      	str	r3, [r2, #32]
 80024f0:	e00b      	b.n	800250a <HAL_RCC_OscConfig+0x36e>
 80024f2:	4b5b      	ldr	r3, [pc, #364]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a5a      	ldr	r2, [pc, #360]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6213      	str	r3, [r2, #32]
 80024fe:	4b58      	ldr	r3, [pc, #352]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4a57      	ldr	r2, [pc, #348]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f023 0304 	bic.w	r3, r3, #4
 8002508:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d015      	beq.n	800253e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7ff fbbd 	bl	8001c90 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7ff fbb9 	bl	8001c90 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e0b1      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	4b4b      	ldr	r3, [pc, #300]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0ee      	beq.n	800251a <HAL_RCC_OscConfig+0x37e>
 800253c:	e014      	b.n	8002568 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253e:	f7ff fba7 	bl	8001c90 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002544:	e00a      	b.n	800255c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002546:	f7ff fba3 	bl	8001c90 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	f241 3288 	movw	r2, #5000	; 0x1388
 8002554:	4293      	cmp	r3, r2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e09b      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255c:	4b40      	ldr	r3, [pc, #256]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1ee      	bne.n	8002546 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d105      	bne.n	800257a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256e:	4b3c      	ldr	r3, [pc, #240]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4a3b      	ldr	r2, [pc, #236]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002578:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8087 	beq.w	8002692 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002584:	4b36      	ldr	r3, [pc, #216]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	d061      	beq.n	8002654 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d146      	bne.n	8002626 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002598:	4b33      	ldr	r3, [pc, #204]	; (8002668 <HAL_RCC_OscConfig+0x4cc>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7ff fb77 	bl	8001c90 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a6:	f7ff fb73 	bl	8001c90 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e06d      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b8:	4b29      	ldr	r3, [pc, #164]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025cc:	d108      	bne.n	80025e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ce:	4b24      	ldr	r3, [pc, #144]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4921      	ldr	r1, [pc, #132]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e0:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a19      	ldr	r1, [r3, #32]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	430b      	orrs	r3, r1
 80025f2:	491b      	ldr	r1, [pc, #108]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f8:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_RCC_OscConfig+0x4cc>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7ff fb47 	bl	8001c90 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002606:	f7ff fb43 	bl	8001c90 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e03d      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x46a>
 8002624:	e035      	b.n	8002692 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HAL_RCC_OscConfig+0x4cc>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff fb30 	bl	8001c90 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7ff fb2c 	bl	8001c90 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e026      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x498>
 8002652:	e01e      	b.n	8002692 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d107      	bne.n	800266c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e019      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
 8002660:	40021000 	.word	0x40021000
 8002664:	40007000 	.word	0x40007000
 8002668:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_OscConfig+0x500>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	429a      	cmp	r2, r3
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000

080026a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0d0      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b4:	4b6a      	ldr	r3, [pc, #424]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d910      	bls.n	80026e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b67      	ldr	r3, [pc, #412]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 0207 	bic.w	r2, r3, #7
 80026ca:	4965      	ldr	r1, [pc, #404]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b63      	ldr	r3, [pc, #396]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0b8      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d020      	beq.n	8002732 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026fc:	4b59      	ldr	r3, [pc, #356]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a58      	ldr	r2, [pc, #352]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002706:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002714:	4b53      	ldr	r3, [pc, #332]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4a52      	ldr	r2, [pc, #328]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800271e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002720:	4b50      	ldr	r3, [pc, #320]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	494d      	ldr	r1, [pc, #308]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d040      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	4b47      	ldr	r3, [pc, #284]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d115      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e07f      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d107      	bne.n	800276e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275e:	4b41      	ldr	r3, [pc, #260]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e073      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276e:	4b3d      	ldr	r3, [pc, #244]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e06b      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800277e:	4b39      	ldr	r3, [pc, #228]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f023 0203 	bic.w	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4936      	ldr	r1, [pc, #216]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002790:	f7ff fa7e 	bl	8001c90 <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	e00a      	b.n	80027ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002798:	f7ff fa7a 	bl	8001c90 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e053      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	4b2d      	ldr	r3, [pc, #180]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 020c 	and.w	r2, r3, #12
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	429a      	cmp	r2, r3
 80027be:	d1eb      	bne.n	8002798 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c0:	4b27      	ldr	r3, [pc, #156]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d210      	bcs.n	80027f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b24      	ldr	r3, [pc, #144]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 0207 	bic.w	r2, r3, #7
 80027d6:	4922      	ldr	r1, [pc, #136]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b20      	ldr	r3, [pc, #128]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e032      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027fc:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4916      	ldr	r1, [pc, #88]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800281a:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	490e      	ldr	r1, [pc, #56]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800282e:	f000 f821 	bl	8002874 <HAL_RCC_GetSysClockFreq>
 8002832:	4602      	mov	r2, r0
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	490a      	ldr	r1, [pc, #40]	; (8002868 <HAL_RCC_ClockConfig+0x1c8>)
 8002840:	5ccb      	ldrb	r3, [r1, r3]
 8002842:	fa22 f303 	lsr.w	r3, r2, r3
 8002846:	4a09      	ldr	r2, [pc, #36]	; (800286c <HAL_RCC_ClockConfig+0x1cc>)
 8002848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_RCC_ClockConfig+0x1d0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe ff32 	bl	80016b8 <HAL_InitTick>

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40022000 	.word	0x40022000
 8002864:	40021000 	.word	0x40021000
 8002868:	08006cd8 	.word	0x08006cd8
 800286c:	20000018 	.word	0x20000018
 8002870:	2000001c 	.word	0x2000001c

08002874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800288e:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <HAL_RCC_GetSysClockFreq+0x94>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b04      	cmp	r3, #4
 800289c:	d002      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0x30>
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d003      	beq.n	80028aa <HAL_RCC_GetSysClockFreq+0x36>
 80028a2:	e027      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_RCC_GetSysClockFreq+0x98>)
 80028a6:	613b      	str	r3, [r7, #16]
      break;
 80028a8:	e027      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	0c9b      	lsrs	r3, r3, #18
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	4a17      	ldr	r2, [pc, #92]	; (8002910 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028b4:	5cd3      	ldrb	r3, [r2, r3]
 80028b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d010      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <HAL_RCC_GetSysClockFreq+0x94>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	0c5b      	lsrs	r3, r3, #17
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	4a11      	ldr	r2, [pc, #68]	; (8002914 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028ce:	5cd3      	ldrb	r3, [r2, r3]
 80028d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a0d      	ldr	r2, [pc, #52]	; (800290c <HAL_RCC_GetSysClockFreq+0x98>)
 80028d6:	fb03 f202 	mul.w	r2, r3, r2
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	e004      	b.n	80028ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a0c      	ldr	r2, [pc, #48]	; (8002918 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028e8:	fb02 f303 	mul.w	r3, r2, r3
 80028ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	613b      	str	r3, [r7, #16]
      break;
 80028f2:	e002      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_RCC_GetSysClockFreq+0x98>)
 80028f6:	613b      	str	r3, [r7, #16]
      break;
 80028f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fa:	693b      	ldr	r3, [r7, #16]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
 800290c:	007a1200 	.word	0x007a1200
 8002910:	08006cf0 	.word	0x08006cf0
 8002914:	08006d00 	.word	0x08006d00
 8002918:	003d0900 	.word	0x003d0900

0800291c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002920:	4b02      	ldr	r3, [pc, #8]	; (800292c <HAL_RCC_GetHCLKFreq+0x10>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	20000018 	.word	0x20000018

08002930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002934:	f7ff fff2 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	0a1b      	lsrs	r3, r3, #8
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4903      	ldr	r1, [pc, #12]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	08006ce8 	.word	0x08006ce8

08002958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800295c:	f7ff ffde 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002960:	4602      	mov	r2, r0
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	0adb      	lsrs	r3, r3, #11
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	4903      	ldr	r1, [pc, #12]	; (800297c <HAL_RCC_GetPCLK2Freq+0x24>)
 800296e:	5ccb      	ldrb	r3, [r1, r3]
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40021000 	.word	0x40021000
 800297c:	08006ce8 	.word	0x08006ce8

08002980 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	220f      	movs	r2, #15
 800298e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_RCC_GetClockConfig+0x58>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0203 	and.w	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <HAL_RCC_GetClockConfig+0x58>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_GetClockConfig+0x58>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_RCC_GetClockConfig+0x58>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	08db      	lsrs	r3, r3, #3
 80029ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_RCC_GetClockConfig+0x5c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0207 	and.w	r2, r3, #7
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40022000 	.word	0x40022000

080029e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029e8:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <RCC_Delay+0x34>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <RCC_Delay+0x38>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0a5b      	lsrs	r3, r3, #9
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	fb02 f303 	mul.w	r3, r2, r3
 80029fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029fc:	bf00      	nop
  }
  while (Delay --);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1e5a      	subs	r2, r3, #1
 8002a02:	60fa      	str	r2, [r7, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f9      	bne.n	80029fc <RCC_Delay+0x1c>
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	20000018 	.word	0x20000018
 8002a18:	10624dd3 	.word	0x10624dd3

08002a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e041      	b.n	8002ab2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff f810 	bl	8001a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3304      	adds	r3, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f000 fdbc 	bl	80035d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d001      	beq.n	8002ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e03a      	b.n	8002b4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <HAL_TIM_Base_Start_IT+0x98>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00e      	beq.n	8002b14 <HAL_TIM_Base_Start_IT+0x58>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afe:	d009      	beq.n	8002b14 <HAL_TIM_Base_Start_IT+0x58>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d004      	beq.n	8002b14 <HAL_TIM_Base_Start_IT+0x58>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a13      	ldr	r2, [pc, #76]	; (8002b5c <HAL_TIM_Base_Start_IT+0xa0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d111      	bne.n	8002b38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d010      	beq.n	8002b48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b36:	e007      	b.n	8002b48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	40012c00 	.word	0x40012c00
 8002b58:	40000400 	.word	0x40000400
 8002b5c:	40000800 	.word	0x40000800

08002b60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e041      	b.n	8002bf6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f839 	bl	8002bfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f000 fd1a 	bl	80035d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_TIM_PWM_Start+0x24>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e022      	b.n	8002c7a <HAL_TIM_PWM_Start+0x6a>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d109      	bne.n	8002c4e <HAL_TIM_PWM_Start+0x3e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	bf14      	ite	ne
 8002c46:	2301      	movne	r3, #1
 8002c48:	2300      	moveq	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	e015      	b.n	8002c7a <HAL_TIM_PWM_Start+0x6a>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d109      	bne.n	8002c68 <HAL_TIM_PWM_Start+0x58>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	bf14      	ite	ne
 8002c60:	2301      	movne	r3, #1
 8002c62:	2300      	moveq	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	e008      	b.n	8002c7a <HAL_TIM_PWM_Start+0x6a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	bf14      	ite	ne
 8002c74:	2301      	movne	r3, #1
 8002c76:	2300      	moveq	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e05e      	b.n	8002d40 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d104      	bne.n	8002c92 <HAL_TIM_PWM_Start+0x82>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c90:	e013      	b.n	8002cba <HAL_TIM_PWM_Start+0xaa>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d104      	bne.n	8002ca2 <HAL_TIM_PWM_Start+0x92>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca0:	e00b      	b.n	8002cba <HAL_TIM_PWM_Start+0xaa>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d104      	bne.n	8002cb2 <HAL_TIM_PWM_Start+0xa2>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb0:	e003      	b.n	8002cba <HAL_TIM_PWM_Start+0xaa>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	6839      	ldr	r1, [r7, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 f815 	bl	8003cf2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1e      	ldr	r2, [pc, #120]	; (8002d48 <HAL_TIM_PWM_Start+0x138>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d107      	bne.n	8002ce2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_TIM_PWM_Start+0x138>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00e      	beq.n	8002d0a <HAL_TIM_PWM_Start+0xfa>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf4:	d009      	beq.n	8002d0a <HAL_TIM_PWM_Start+0xfa>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <HAL_TIM_PWM_Start+0x13c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d004      	beq.n	8002d0a <HAL_TIM_PWM_Start+0xfa>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <HAL_TIM_PWM_Start+0x140>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d111      	bne.n	8002d2e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b06      	cmp	r3, #6
 8002d1a:	d010      	beq.n	8002d3e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2c:	e007      	b.n	8002d3e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0201 	orr.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800

08002d54 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2200      	movs	r2, #0
 8002d64:	6839      	ldr	r1, [r7, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 ffc3 	bl	8003cf2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a29      	ldr	r2, [pc, #164]	; (8002e18 <HAL_TIM_PWM_Stop+0xc4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d117      	bne.n	8002da6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6a1a      	ldr	r2, [r3, #32]
 8002d7c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10f      	bne.n	8002da6 <HAL_TIM_PWM_Stop+0x52>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6a1a      	ldr	r2, [r3, #32]
 8002d8c:	f240 4344 	movw	r3, #1092	; 0x444
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d107      	bne.n	8002da6 <HAL_TIM_PWM_Stop+0x52>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002da4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6a1a      	ldr	r2, [r3, #32]
 8002dac:	f241 1311 	movw	r3, #4369	; 0x1111
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10f      	bne.n	8002dd6 <HAL_TIM_PWM_Stop+0x82>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6a1a      	ldr	r2, [r3, #32]
 8002dbc:	f240 4344 	movw	r3, #1092	; 0x444
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d107      	bne.n	8002dd6 <HAL_TIM_PWM_Stop+0x82>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0201 	bic.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d104      	bne.n	8002de6 <HAL_TIM_PWM_Stop+0x92>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002de4:	e013      	b.n	8002e0e <HAL_TIM_PWM_Stop+0xba>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d104      	bne.n	8002df6 <HAL_TIM_PWM_Stop+0xa2>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df4:	e00b      	b.n	8002e0e <HAL_TIM_PWM_Stop+0xba>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d104      	bne.n	8002e06 <HAL_TIM_PWM_Stop+0xb2>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e04:	e003      	b.n	8002e0e <HAL_TIM_PWM_Stop+0xba>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40012c00 	.word	0x40012c00

08002e1c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e041      	b.n	8002eb2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe fda4 	bl	8001990 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f000 fbbc 	bl	80035d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d122      	bne.n	8002f16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d11b      	bne.n	8002f16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f06f 0202 	mvn.w	r2, #2
 8002ee6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7fe f90f 	bl	8001120 <HAL_TIM_IC_CaptureCallback>
 8002f02:	e005      	b.n	8002f10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fb4b 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fb51 	bl	80035b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d122      	bne.n	8002f6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d11b      	bne.n	8002f6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f06f 0204 	mvn.w	r2, #4
 8002f3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7fe f8e5 	bl	8001120 <HAL_TIM_IC_CaptureCallback>
 8002f56:	e005      	b.n	8002f64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fb21 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fb27 	bl	80035b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d122      	bne.n	8002fbe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d11b      	bne.n	8002fbe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f06f 0208 	mvn.w	r2, #8
 8002f8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2204      	movs	r2, #4
 8002f94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7fe f8bb 	bl	8001120 <HAL_TIM_IC_CaptureCallback>
 8002faa:	e005      	b.n	8002fb8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 faf7 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fafd 	bl	80035b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d122      	bne.n	8003012 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d11b      	bne.n	8003012 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f06f 0210 	mvn.w	r2, #16
 8002fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7fe f891 	bl	8001120 <HAL_TIM_IC_CaptureCallback>
 8002ffe:	e005      	b.n	800300c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 facd 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fad3 	bl	80035b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d10e      	bne.n	800303e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d107      	bne.n	800303e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f06f 0201 	mvn.w	r2, #1
 8003036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7fe faed 	bl	8001618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003048:	2b80      	cmp	r3, #128	; 0x80
 800304a:	d10e      	bne.n	800306a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	2b80      	cmp	r3, #128	; 0x80
 8003058:	d107      	bne.n	800306a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fed0 	bl	8003e0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003074:	2b40      	cmp	r3, #64	; 0x40
 8003076:	d10e      	bne.n	8003096 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	d107      	bne.n	8003096 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800308e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 fa97 	bl	80035c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d10e      	bne.n	80030c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d107      	bne.n	80030c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f06f 0220 	mvn.w	r2, #32
 80030ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fe9b 	bl	8003df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b086      	sub	sp, #24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e088      	b.n	80031fa <HAL_TIM_IC_ConfigChannel+0x130>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d11b      	bne.n	800312e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003106:	f000 fc51 	bl	80039ac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 020c 	bic.w	r2, r2, #12
 8003118:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6999      	ldr	r1, [r3, #24]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	619a      	str	r2, [r3, #24]
 800312c:	e060      	b.n	80031f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b04      	cmp	r3, #4
 8003132:	d11c      	bne.n	800316e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003144:	f000 fcba 	bl	8003abc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003156:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6999      	ldr	r1, [r3, #24]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	021a      	lsls	r2, r3, #8
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	619a      	str	r2, [r3, #24]
 800316c:	e040      	b.n	80031f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b08      	cmp	r3, #8
 8003172:	d11b      	bne.n	80031ac <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003184:	f000 fd05 	bl	8003b92 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69da      	ldr	r2, [r3, #28]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 020c 	bic.w	r2, r2, #12
 8003196:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69d9      	ldr	r1, [r3, #28]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	61da      	str	r2, [r3, #28]
 80031aa:	e021      	b.n	80031f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d11c      	bne.n	80031ec <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80031c2:	f000 fd21 	bl	8003c08 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80031d4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69d9      	ldr	r1, [r3, #28]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	021a      	lsls	r2, r3, #8
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	61da      	str	r2, [r3, #28]
 80031ea:	e001      	b.n	80031f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800321e:	2302      	movs	r3, #2
 8003220:	e0ae      	b.n	8003380 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b0c      	cmp	r3, #12
 800322e:	f200 809f 	bhi.w	8003370 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003232:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	0800326d 	.word	0x0800326d
 800323c:	08003371 	.word	0x08003371
 8003240:	08003371 	.word	0x08003371
 8003244:	08003371 	.word	0x08003371
 8003248:	080032ad 	.word	0x080032ad
 800324c:	08003371 	.word	0x08003371
 8003250:	08003371 	.word	0x08003371
 8003254:	08003371 	.word	0x08003371
 8003258:	080032ef 	.word	0x080032ef
 800325c:	08003371 	.word	0x08003371
 8003260:	08003371 	.word	0x08003371
 8003264:	08003371 	.word	0x08003371
 8003268:	0800332f 	.word	0x0800332f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fa12 	bl	800369c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0208 	orr.w	r2, r2, #8
 8003286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0204 	bic.w	r2, r2, #4
 8003296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6999      	ldr	r1, [r3, #24]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	619a      	str	r2, [r3, #24]
      break;
 80032aa:	e064      	b.n	8003376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fa58 	bl	8003768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6999      	ldr	r1, [r3, #24]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	021a      	lsls	r2, r3, #8
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	619a      	str	r2, [r3, #24]
      break;
 80032ec:	e043      	b.n	8003376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68b9      	ldr	r1, [r7, #8]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 faa1 	bl	800383c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0208 	orr.w	r2, r2, #8
 8003308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0204 	bic.w	r2, r2, #4
 8003318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69d9      	ldr	r1, [r3, #28]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	61da      	str	r2, [r3, #28]
      break;
 800332c:	e023      	b.n	8003376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	4618      	mov	r0, r3
 8003336:	f000 faeb 	bl	8003910 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69d9      	ldr	r1, [r3, #28]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	021a      	lsls	r2, r3, #8
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	61da      	str	r2, [r3, #28]
      break;
 800336e:	e002      	b.n	8003376 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	75fb      	strb	r3, [r7, #23]
      break;
 8003374:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800337e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_TIM_ConfigClockSource+0x1c>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e0b4      	b.n	800350e <HAL_TIM_ConfigClockSource+0x186>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033dc:	d03e      	beq.n	800345c <HAL_TIM_ConfigClockSource+0xd4>
 80033de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e2:	f200 8087 	bhi.w	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 80033e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ea:	f000 8086 	beq.w	80034fa <HAL_TIM_ConfigClockSource+0x172>
 80033ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f2:	d87f      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 80033f4:	2b70      	cmp	r3, #112	; 0x70
 80033f6:	d01a      	beq.n	800342e <HAL_TIM_ConfigClockSource+0xa6>
 80033f8:	2b70      	cmp	r3, #112	; 0x70
 80033fa:	d87b      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 80033fc:	2b60      	cmp	r3, #96	; 0x60
 80033fe:	d050      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003400:	2b60      	cmp	r3, #96	; 0x60
 8003402:	d877      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003404:	2b50      	cmp	r3, #80	; 0x50
 8003406:	d03c      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0xfa>
 8003408:	2b50      	cmp	r3, #80	; 0x50
 800340a:	d873      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 800340c:	2b40      	cmp	r3, #64	; 0x40
 800340e:	d058      	beq.n	80034c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003410:	2b40      	cmp	r3, #64	; 0x40
 8003412:	d86f      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003414:	2b30      	cmp	r3, #48	; 0x30
 8003416:	d064      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003418:	2b30      	cmp	r3, #48	; 0x30
 800341a:	d86b      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 800341c:	2b20      	cmp	r3, #32
 800341e:	d060      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003420:	2b20      	cmp	r3, #32
 8003422:	d867      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d05c      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003428:	2b10      	cmp	r3, #16
 800342a:	d05a      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x15a>
 800342c:	e062      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800343e:	f000 fc39 	bl	8003cb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003450:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	609a      	str	r2, [r3, #8]
      break;
 800345a:	e04f      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800346c:	f000 fc22 	bl	8003cb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800347e:	609a      	str	r2, [r3, #8]
      break;
 8003480:	e03c      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800348e:	461a      	mov	r2, r3
 8003490:	f000 fae6 	bl	8003a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2150      	movs	r1, #80	; 0x50
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fbf0 	bl	8003c80 <TIM_ITRx_SetConfig>
      break;
 80034a0:	e02c      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ae:	461a      	mov	r2, r3
 80034b0:	f000 fb40 	bl	8003b34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2160      	movs	r1, #96	; 0x60
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fbe0 	bl	8003c80 <TIM_ITRx_SetConfig>
      break;
 80034c0:	e01c      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ce:	461a      	mov	r2, r3
 80034d0:	f000 fac6 	bl	8003a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2140      	movs	r1, #64	; 0x40
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fbd0 	bl	8003c80 <TIM_ITRx_SetConfig>
      break;
 80034e0:	e00c      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4619      	mov	r1, r3
 80034ec:	4610      	mov	r0, r2
 80034ee:	f000 fbc7 	bl	8003c80 <TIM_ITRx_SetConfig>
      break;
 80034f2:	e003      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      break;
 80034f8:	e000      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800350c:	7bfb      	ldrb	r3, [r7, #15]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b0c      	cmp	r3, #12
 800352a:	d831      	bhi.n	8003590 <HAL_TIM_ReadCapturedValue+0x78>
 800352c:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <HAL_TIM_ReadCapturedValue+0x1c>)
 800352e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003532:	bf00      	nop
 8003534:	08003569 	.word	0x08003569
 8003538:	08003591 	.word	0x08003591
 800353c:	08003591 	.word	0x08003591
 8003540:	08003591 	.word	0x08003591
 8003544:	08003573 	.word	0x08003573
 8003548:	08003591 	.word	0x08003591
 800354c:	08003591 	.word	0x08003591
 8003550:	08003591 	.word	0x08003591
 8003554:	0800357d 	.word	0x0800357d
 8003558:	08003591 	.word	0x08003591
 800355c:	08003591 	.word	0x08003591
 8003560:	08003591 	.word	0x08003591
 8003564:	08003587 	.word	0x08003587
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356e:	60fb      	str	r3, [r7, #12]

      break;
 8003570:	e00f      	b.n	8003592 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	60fb      	str	r3, [r7, #12]

      break;
 800357a:	e00a      	b.n	8003592 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	60fb      	str	r3, [r7, #12]

      break;
 8003584:	e005      	b.n	8003592 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	60fb      	str	r3, [r7, #12]

      break;
 800358e:	e000      	b.n	8003592 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003590:	bf00      	nop
  }

  return tmpreg;
 8003592:	68fb      	ldr	r3, [r7, #12]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop

080035a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr

080035b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr
	...

080035d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a29      	ldr	r2, [pc, #164]	; (8003690 <TIM_Base_SetConfig+0xb8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00b      	beq.n	8003608 <TIM_Base_SetConfig+0x30>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f6:	d007      	beq.n	8003608 <TIM_Base_SetConfig+0x30>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a26      	ldr	r2, [pc, #152]	; (8003694 <TIM_Base_SetConfig+0xbc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d003      	beq.n	8003608 <TIM_Base_SetConfig+0x30>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a25      	ldr	r2, [pc, #148]	; (8003698 <TIM_Base_SetConfig+0xc0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d108      	bne.n	800361a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a1c      	ldr	r2, [pc, #112]	; (8003690 <TIM_Base_SetConfig+0xb8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00b      	beq.n	800363a <TIM_Base_SetConfig+0x62>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003628:	d007      	beq.n	800363a <TIM_Base_SetConfig+0x62>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a19      	ldr	r2, [pc, #100]	; (8003694 <TIM_Base_SetConfig+0xbc>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d003      	beq.n	800363a <TIM_Base_SetConfig+0x62>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a18      	ldr	r2, [pc, #96]	; (8003698 <TIM_Base_SetConfig+0xc0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d108      	bne.n	800364c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a07      	ldr	r2, [pc, #28]	; (8003690 <TIM_Base_SetConfig+0xb8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d103      	bne.n	8003680 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	615a      	str	r2, [r3, #20]
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40000400 	.word	0x40000400
 8003698:	40000800 	.word	0x40000800

0800369c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f023 0201 	bic.w	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0303 	bic.w	r3, r3, #3
 80036d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f023 0302 	bic.w	r3, r3, #2
 80036e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a1c      	ldr	r2, [pc, #112]	; (8003764 <TIM_OC1_SetConfig+0xc8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d10c      	bne.n	8003712 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f023 0308 	bic.w	r3, r3, #8
 80036fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f023 0304 	bic.w	r3, r3, #4
 8003710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a13      	ldr	r2, [pc, #76]	; (8003764 <TIM_OC1_SetConfig+0xc8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d111      	bne.n	800373e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	621a      	str	r2, [r3, #32]
}
 8003758:	bf00      	nop
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40012c00 	.word	0x40012c00

08003768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f023 0210 	bic.w	r2, r3, #16
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f023 0320 	bic.w	r3, r3, #32
 80037b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <TIM_OC2_SetConfig+0xd0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d10d      	bne.n	80037e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a14      	ldr	r2, [pc, #80]	; (8003838 <TIM_OC2_SetConfig+0xd0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d113      	bne.n	8003814 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr
 8003838:	40012c00 	.word	0x40012c00

0800383c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a1d      	ldr	r2, [pc, #116]	; (800390c <TIM_OC3_SetConfig+0xd0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d10d      	bne.n	80038b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a14      	ldr	r2, [pc, #80]	; (800390c <TIM_OC3_SetConfig+0xd0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d113      	bne.n	80038e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	621a      	str	r2, [r3, #32]
}
 8003900:	bf00      	nop
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40012c00 	.word	0x40012c00

08003910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800395a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	031b      	lsls	r3, r3, #12
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a0f      	ldr	r2, [pc, #60]	; (80039a8 <TIM_OC4_SetConfig+0x98>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d109      	bne.n	8003984 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003976:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	621a      	str	r2, [r3, #32]
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr
 80039a8:	40012c00 	.word	0x40012c00

080039ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f023 0201 	bic.w	r2, r3, #1
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4a1f      	ldr	r2, [pc, #124]	; (8003a54 <TIM_TI1_SetConfig+0xa8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00b      	beq.n	80039f2 <TIM_TI1_SetConfig+0x46>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e0:	d007      	beq.n	80039f2 <TIM_TI1_SetConfig+0x46>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4a1c      	ldr	r2, [pc, #112]	; (8003a58 <TIM_TI1_SetConfig+0xac>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d003      	beq.n	80039f2 <TIM_TI1_SetConfig+0x46>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4a1b      	ldr	r2, [pc, #108]	; (8003a5c <TIM_TI1_SetConfig+0xb0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d101      	bne.n	80039f6 <TIM_TI1_SetConfig+0x4a>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <TIM_TI1_SetConfig+0x4c>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f023 0303 	bic.w	r3, r3, #3
 8003a02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	e003      	b.n	8003a16 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f023 030a 	bic.w	r3, r3, #10
 8003a30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f003 030a 	and.w	r3, r3, #10
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	621a      	str	r2, [r3, #32]
}
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40000400 	.word	0x40000400
 8003a5c:	40000800 	.word	0x40000800

08003a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f023 0201 	bic.w	r2, r3, #1
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f023 030a 	bic.w	r3, r3, #10
 8003a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f023 0210 	bic.w	r2, r3, #16
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	031b      	lsls	r3, r3, #12
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b0e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	621a      	str	r2, [r3, #32]
}
 8003b2a:	bf00      	nop
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f023 0210 	bic.w	r2, r3, #16
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	031b      	lsls	r3, r3, #12
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	621a      	str	r2, [r3, #32]
}
 8003b88:	bf00      	nop
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr

08003b92 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b087      	sub	sp, #28
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f023 0303 	bic.w	r3, r3, #3
 8003bbe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003be2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	621a      	str	r2, [r3, #32]
}
 8003bfe:	bf00      	nop
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c34:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	021b      	lsls	r3, r3, #8
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c46:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	031b      	lsls	r3, r3, #12
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c5a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	031b      	lsls	r3, r3, #12
 8003c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	621a      	str	r2, [r3, #32]
}
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr

08003c80 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f043 0307 	orr.w	r3, r3, #7
 8003ca2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	609a      	str	r2, [r3, #8]
}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	021a      	lsls	r2, r3, #8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	609a      	str	r2, [r3, #8]
}
 8003ce8:	bf00      	nop
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr

08003cf2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b087      	sub	sp, #28
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f003 031f 	and.w	r3, r3, #31
 8003d04:	2201      	movs	r2, #1
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1a      	ldr	r2, [r3, #32]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	43db      	mvns	r3, r3
 8003d14:	401a      	ands	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a1a      	ldr	r2, [r3, #32]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	621a      	str	r2, [r3, #32]
}
 8003d30:	bf00      	nop
 8003d32:	371c      	adds	r7, #28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e046      	b.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a16      	ldr	r2, [pc, #88]	; (8003dec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00e      	beq.n	8003db6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da0:	d009      	beq.n	8003db6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a12      	ldr	r2, [pc, #72]	; (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d004      	beq.n	8003db6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a10      	ldr	r2, [pc, #64]	; (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d10c      	bne.n	8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr
 8003dec:	40012c00 	.word	0x40012c00
 8003df0:	40000400 	.word	0x40000400
 8003df4:	40000800 	.word	0x40000800

08003df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr

08003e0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr

08003e1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e042      	b.n	8003eb4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fd fe8a 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2224      	movs	r2, #36	; 0x24
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f92b 	bl	80040bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08a      	sub	sp, #40	; 0x28
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d17c      	bne.n	8003fd6 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_UART_Receive+0x2c>
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e075      	b.n	8003fd8 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2222      	movs	r2, #34	; 0x22
 8003ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f00:	f7fd fec6 	bl	8001c90 <HAL_GetTick>
 8003f04:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	88fa      	ldrh	r2, [r7, #6]
 8003f0a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	88fa      	ldrh	r2, [r7, #6]
 8003f10:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1a:	d108      	bne.n	8003f2e <HAL_UART_Receive+0x72>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d104      	bne.n	8003f2e <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	e003      	b.n	8003f36 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f36:	e043      	b.n	8003fc0 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2120      	movs	r1, #32
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f84c 	bl	8003fe0 <UART_WaitOnFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e042      	b.n	8003fd8 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10c      	bne.n	8003f72 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	3302      	adds	r3, #2
 8003f6e:	61bb      	str	r3, [r7, #24]
 8003f70:	e01f      	b.n	8003fb2 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f7a:	d007      	beq.n	8003f8c <HAL_UART_Receive+0xd0>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <HAL_UART_Receive+0xde>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d106      	bne.n	8003f9a <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	e008      	b.n	8003fac <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1b6      	bne.n	8003f38 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
  }
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3720      	adds	r7, #32
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b090      	sub	sp, #64	; 0x40
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	4613      	mov	r3, r2
 8003fee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff0:	e050      	b.n	8004094 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff8:	d04c      	beq.n	8004094 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d007      	beq.n	8004010 <UART_WaitOnFlagUntilTimeout+0x30>
 8004000:	f7fd fe46 	bl	8001c90 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800400c:	429a      	cmp	r2, r3
 800400e:	d241      	bcs.n	8004094 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	330c      	adds	r3, #12
 8004016:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	e853 3f00 	ldrex	r3, [r3]
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004030:	637a      	str	r2, [r7, #52]	; 0x34
 8004032:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e5      	bne.n	8004010 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3314      	adds	r3, #20
 800404a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	e853 3f00 	ldrex	r3, [r3]
 8004052:	613b      	str	r3, [r7, #16]
   return(result);
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	63bb      	str	r3, [r7, #56]	; 0x38
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3314      	adds	r3, #20
 8004062:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004064:	623a      	str	r2, [r7, #32]
 8004066:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	69f9      	ldr	r1, [r7, #28]
 800406a:	6a3a      	ldr	r2, [r7, #32]
 800406c:	e841 2300 	strex	r3, r2, [r1]
 8004070:	61bb      	str	r3, [r7, #24]
   return(result);
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e5      	bne.n	8004044 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e00f      	b.n	80040b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4013      	ands	r3, r2
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d09f      	beq.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3740      	adds	r7, #64	; 0x40
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040f6:	f023 030c 	bic.w	r3, r3, #12
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6812      	ldr	r2, [r2, #0]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	430b      	orrs	r3, r1
 8004102:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a2c      	ldr	r2, [pc, #176]	; (80041d0 <UART_SetConfig+0x114>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d103      	bne.n	800412c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004124:	f7fe fc18 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	e002      	b.n	8004132 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800412c:	f7fe fc00 	bl	8002930 <HAL_RCC_GetPCLK1Freq>
 8004130:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	009a      	lsls	r2, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	fbb2 f3f3 	udiv	r3, r2, r3
 8004148:	4a22      	ldr	r2, [pc, #136]	; (80041d4 <UART_SetConfig+0x118>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	0119      	lsls	r1, r3, #4
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	009a      	lsls	r2, r3, #2
 800415c:	441a      	add	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	fbb2 f2f3 	udiv	r2, r2, r3
 8004168:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <UART_SetConfig+0x118>)
 800416a:	fba3 0302 	umull	r0, r3, r3, r2
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2064      	movs	r0, #100	; 0x64
 8004172:	fb00 f303 	mul.w	r3, r0, r3
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	3332      	adds	r3, #50	; 0x32
 800417c:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <UART_SetConfig+0x118>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004188:	4419      	add	r1, r3
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009a      	lsls	r2, r3, #2
 8004194:	441a      	add	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <UART_SetConfig+0x118>)
 80041a2:	fba3 0302 	umull	r0, r3, r3, r2
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	2064      	movs	r0, #100	; 0x64
 80041aa:	fb00 f303 	mul.w	r3, r0, r3
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	3332      	adds	r3, #50	; 0x32
 80041b4:	4a07      	ldr	r2, [pc, #28]	; (80041d4 <UART_SetConfig+0x118>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	f003 020f 	and.w	r2, r3, #15
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	440a      	add	r2, r1
 80041c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40013800 	.word	0x40013800
 80041d4:	51eb851f 	.word	0x51eb851f

080041d8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041de:	f3ef 8305 	mrs	r3, IPSR
 80041e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80041e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10f      	bne.n	800420a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ea:	f3ef 8310 	mrs	r3, PRIMASK
 80041ee:	607b      	str	r3, [r7, #4]
  return(result);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <osKernelInitialize+0x32>
 80041f6:	4b10      	ldr	r3, [pc, #64]	; (8004238 <osKernelInitialize+0x60>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d109      	bne.n	8004212 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041fe:	f3ef 8311 	mrs	r3, BASEPRI
 8004202:	603b      	str	r3, [r7, #0]
  return(result);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800420a:	f06f 0305 	mvn.w	r3, #5
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	e00c      	b.n	800422c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004212:	4b09      	ldr	r3, [pc, #36]	; (8004238 <osKernelInitialize+0x60>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d105      	bne.n	8004226 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800421a:	4b07      	ldr	r3, [pc, #28]	; (8004238 <osKernelInitialize+0x60>)
 800421c:	2201      	movs	r2, #1
 800421e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	e002      	b.n	800422c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004226:	f04f 33ff 	mov.w	r3, #4294967295
 800422a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800422c:	68fb      	ldr	r3, [r7, #12]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	20000194 	.word	0x20000194

0800423c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004242:	f3ef 8305 	mrs	r3, IPSR
 8004246:	60bb      	str	r3, [r7, #8]
  return(result);
 8004248:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10f      	bne.n	800426e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800424e:	f3ef 8310 	mrs	r3, PRIMASK
 8004252:	607b      	str	r3, [r7, #4]
  return(result);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d109      	bne.n	800426e <osKernelStart+0x32>
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <osKernelStart+0x64>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d109      	bne.n	8004276 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004262:	f3ef 8311 	mrs	r3, BASEPRI
 8004266:	603b      	str	r3, [r7, #0]
  return(result);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <osKernelStart+0x3a>
    stat = osErrorISR;
 800426e:	f06f 0305 	mvn.w	r3, #5
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	e00e      	b.n	8004294 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004276:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <osKernelStart+0x64>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d107      	bne.n	800428e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800427e:	4b08      	ldr	r3, [pc, #32]	; (80042a0 <osKernelStart+0x64>)
 8004280:	2202      	movs	r2, #2
 8004282:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004284:	f001 f878 	bl	8005378 <vTaskStartScheduler>
      stat = osOK;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e002      	b.n	8004294 <osKernelStart+0x58>
    } else {
      stat = osError;
 800428e:	f04f 33ff 	mov.w	r3, #4294967295
 8004292:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004294:	68fb      	ldr	r3, [r7, #12]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000194 	.word	0x20000194

080042a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b092      	sub	sp, #72	; 0x48
 80042a8:	af04      	add	r7, sp, #16
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042b4:	f3ef 8305 	mrs	r3, IPSR
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f040 8094 	bne.w	80043ea <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c2:	f3ef 8310 	mrs	r3, PRIMASK
 80042c6:	623b      	str	r3, [r7, #32]
  return(result);
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f040 808d 	bne.w	80043ea <osThreadNew+0x146>
 80042d0:	4b48      	ldr	r3, [pc, #288]	; (80043f4 <osThreadNew+0x150>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d106      	bne.n	80042e6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042d8:	f3ef 8311 	mrs	r3, BASEPRI
 80042dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f040 8082 	bne.w	80043ea <osThreadNew+0x146>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d07e      	beq.n	80043ea <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80042f0:	2318      	movs	r3, #24
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80042f4:	2300      	movs	r3, #0
 80042f6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80042f8:	f107 031b 	add.w	r3, r7, #27
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80042fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d045      	beq.n	8004396 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <osThreadNew+0x74>
        name = attr->name;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <osThreadNew+0x9a>
 800432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432e:	2b38      	cmp	r3, #56	; 0x38
 8004330:	d805      	bhi.n	800433e <osThreadNew+0x9a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <osThreadNew+0x9e>
        return (NULL);
 800433e:	2300      	movs	r3, #0
 8004340:	e054      	b.n	80043ec <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	089b      	lsrs	r3, r3, #2
 8004350:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00e      	beq.n	8004378 <osThreadNew+0xd4>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	2b5b      	cmp	r3, #91	; 0x5b
 8004360:	d90a      	bls.n	8004378 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004366:	2b00      	cmp	r3, #0
 8004368:	d006      	beq.n	8004378 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <osThreadNew+0xd4>
        mem = 1;
 8004372:	2301      	movs	r3, #1
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28
 8004376:	e010      	b.n	800439a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10c      	bne.n	800439a <osThreadNew+0xf6>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d108      	bne.n	800439a <osThreadNew+0xf6>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d104      	bne.n	800439a <osThreadNew+0xf6>
          mem = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	62bb      	str	r3, [r7, #40]	; 0x28
 8004394:	e001      	b.n	800439a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	2b01      	cmp	r3, #1
 800439e:	d110      	bne.n	80043c2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043a8:	9202      	str	r2, [sp, #8]
 80043aa:	9301      	str	r3, [sp, #4]
 80043ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fe12 	bl	8004fe0 <xTaskCreateStatic>
 80043bc:	4603      	mov	r3, r0
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e013      	b.n	80043ea <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d110      	bne.n	80043ea <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	f107 0314 	add.w	r3, r7, #20
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 fe5c 	bl	8005098 <xTaskCreate>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d001      	beq.n	80043ea <osThreadNew+0x146>
          hTask = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80043ea:	697b      	ldr	r3, [r7, #20]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3738      	adds	r7, #56	; 0x38
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000194 	.word	0x20000194

080043f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004400:	f3ef 8305 	mrs	r3, IPSR
 8004404:	613b      	str	r3, [r7, #16]
  return(result);
 8004406:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10f      	bne.n	800442c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800440c:	f3ef 8310 	mrs	r3, PRIMASK
 8004410:	60fb      	str	r3, [r7, #12]
  return(result);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d109      	bne.n	800442c <osDelay+0x34>
 8004418:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <osDelay+0x58>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d109      	bne.n	8004434 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004420:	f3ef 8311 	mrs	r3, BASEPRI
 8004424:	60bb      	str	r3, [r7, #8]
  return(result);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <osDelay+0x3c>
    stat = osErrorISR;
 800442c:	f06f 0305 	mvn.w	r3, #5
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	e007      	b.n	8004444 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <osDelay+0x4c>
      vTaskDelay(ticks);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 ff66 	bl	8005310 <vTaskDelay>
    }
  }

  return (stat);
 8004444:	697b      	ldr	r3, [r7, #20]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000194 	.word	0x20000194

08004454 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4a06      	ldr	r2, [pc, #24]	; (800447c <vApplicationGetIdleTaskMemory+0x28>)
 8004464:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4a05      	ldr	r2, [pc, #20]	; (8004480 <vApplicationGetIdleTaskMemory+0x2c>)
 800446a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2280      	movs	r2, #128	; 0x80
 8004470:	601a      	str	r2, [r3, #0]
}
 8004472:	bf00      	nop
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr
 800447c:	20000198 	.word	0x20000198
 8004480:	200001f4 	.word	0x200001f4

08004484 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4a07      	ldr	r2, [pc, #28]	; (80044b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004494:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4a06      	ldr	r2, [pc, #24]	; (80044b4 <vApplicationGetTimerTaskMemory+0x30>)
 800449a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044a2:	601a      	str	r2, [r3, #0]
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	200003f4 	.word	0x200003f4
 80044b4:	20000450 	.word	0x20000450

080044b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f103 0208 	add.w	r2, r3, #8
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f04f 32ff 	mov.w	r2, #4294967295
 80044d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f103 0208 	add.w	r2, r3, #8
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f103 0208 	add.w	r2, r3, #8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr

080044f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr

0800450e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800450e:	b480      	push	{r7}
 8004510:	b085      	sub	sp, #20
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	601a      	str	r2, [r3, #0]
}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr

08004554 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456a:	d103      	bne.n	8004574 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	e00c      	b.n	800458e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3308      	adds	r3, #8
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	e002      	b.n	8004582 <vListInsert+0x2e>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	429a      	cmp	r2, r3
 800458c:	d2f6      	bcs.n	800457c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	601a      	str	r2, [r3, #0]
}
 80045ba:	bf00      	nop
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr

080045c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6892      	ldr	r2, [r2, #8]
 80045da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6852      	ldr	r2, [r2, #4]
 80045e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d103      	bne.n	80045f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	1e5a      	subs	r2, r3, #1
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
	...

08004618 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10a      	bne.n	8004642 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800463e:	bf00      	nop
 8004640:	e7fe      	b.n	8004640 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004642:	f001 ffcb 	bl	80065dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464e:	68f9      	ldr	r1, [r7, #12]
 8004650:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004652:	fb01 f303 	mul.w	r3, r1, r3
 8004656:	441a      	add	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004672:	3b01      	subs	r3, #1
 8004674:	68f9      	ldr	r1, [r7, #12]
 8004676:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	441a      	add	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	22ff      	movs	r2, #255	; 0xff
 8004686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	22ff      	movs	r2, #255	; 0xff
 800468e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d114      	bne.n	80046c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01a      	beq.n	80046d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3310      	adds	r3, #16
 80046a4:	4618      	mov	r0, r3
 80046a6:	f001 f8f1 	bl	800588c <xTaskRemoveFromEventList>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d012      	beq.n	80046d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80046b0:	4b0c      	ldr	r3, [pc, #48]	; (80046e4 <xQueueGenericReset+0xcc>)
 80046b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	e009      	b.n	80046d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	3310      	adds	r3, #16
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff fef6 	bl	80044b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3324      	adds	r3, #36	; 0x24
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff fef1 	bl	80044b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80046d6:	f001 ffb1 	bl	800663c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80046da:	2301      	movs	r3, #1
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	e000ed04 	.word	0xe000ed04

080046e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08e      	sub	sp, #56	; 0x38
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800470e:	bf00      	nop
 8004710:	e7fe      	b.n	8004710 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10a      	bne.n	800472e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
}
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <xQueueGenericCreateStatic+0x52>
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <xQueueGenericCreateStatic+0x56>
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <xQueueGenericCreateStatic+0x58>
 800473e:	2300      	movs	r3, #0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	623b      	str	r3, [r7, #32]
}
 8004756:	bf00      	nop
 8004758:	e7fe      	b.n	8004758 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d102      	bne.n	8004766 <xQueueGenericCreateStatic+0x7e>
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <xQueueGenericCreateStatic+0x82>
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <xQueueGenericCreateStatic+0x84>
 800476a:	2300      	movs	r3, #0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10a      	bne.n	8004786 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	61fb      	str	r3, [r7, #28]
}
 8004782:	bf00      	nop
 8004784:	e7fe      	b.n	8004784 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004786:	2350      	movs	r3, #80	; 0x50
 8004788:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b50      	cmp	r3, #80	; 0x50
 800478e:	d00a      	beq.n	80047a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	61bb      	str	r3, [r7, #24]
}
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00d      	beq.n	80047cc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80047b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047b8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f805 	bl	80047d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3730      	adds	r7, #48	; 0x30
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d103      	bne.n	80047f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	e002      	b.n	80047f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004804:	2101      	movs	r1, #1
 8004806:	69b8      	ldr	r0, [r7, #24]
 8004808:	f7ff ff06 	bl	8004618 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	78fa      	ldrb	r2, [r7, #3]
 8004810:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08e      	sub	sp, #56	; 0x38
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800482a:	2300      	movs	r3, #0
 800482c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <xQueueGenericSend+0x32>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d103      	bne.n	800485c <xQueueGenericSend+0x40>
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <xQueueGenericSend+0x44>
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <xQueueGenericSend+0x46>
 8004860:	2300      	movs	r3, #0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10a      	bne.n	800487c <xQueueGenericSend+0x60>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004878:	bf00      	nop
 800487a:	e7fe      	b.n	800487a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d103      	bne.n	800488a <xQueueGenericSend+0x6e>
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <xQueueGenericSend+0x72>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <xQueueGenericSend+0x74>
 800488e:	2300      	movs	r3, #0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <xQueueGenericSend+0x8e>
	__asm volatile
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	623b      	str	r3, [r7, #32]
}
 80048a6:	bf00      	nop
 80048a8:	e7fe      	b.n	80048a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048aa:	f001 f9b1 	bl	8005c10 <xTaskGetSchedulerState>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d102      	bne.n	80048ba <xQueueGenericSend+0x9e>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <xQueueGenericSend+0xa2>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <xQueueGenericSend+0xa4>
 80048be:	2300      	movs	r3, #0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <xQueueGenericSend+0xbe>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	61fb      	str	r3, [r7, #28]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048da:	f001 fe7f 	bl	80065dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <xQueueGenericSend+0xd4>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d129      	bne.n	8004944 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048f6:	f000 fa07 	bl	8004d08 <prvCopyDataToQueue>
 80048fa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	2b00      	cmp	r3, #0
 8004902:	d010      	beq.n	8004926 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	3324      	adds	r3, #36	; 0x24
 8004908:	4618      	mov	r0, r3
 800490a:	f000 ffbf 	bl	800588c <xTaskRemoveFromEventList>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d013      	beq.n	800493c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004914:	4b3f      	ldr	r3, [pc, #252]	; (8004a14 <xQueueGenericSend+0x1f8>)
 8004916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	e00a      	b.n	800493c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d007      	beq.n	800493c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800492c:	4b39      	ldr	r3, [pc, #228]	; (8004a14 <xQueueGenericSend+0x1f8>)
 800492e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800493c:	f001 fe7e 	bl	800663c <vPortExitCritical>
				return pdPASS;
 8004940:	2301      	movs	r3, #1
 8004942:	e063      	b.n	8004a0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d103      	bne.n	8004952 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800494a:	f001 fe77 	bl	800663c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800494e:	2300      	movs	r3, #0
 8004950:	e05c      	b.n	8004a0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004954:	2b00      	cmp	r3, #0
 8004956:	d106      	bne.n	8004966 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004958:	f107 0314 	add.w	r3, r7, #20
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fff9 	bl	8005954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004962:	2301      	movs	r3, #1
 8004964:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004966:	f001 fe69 	bl	800663c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800496a:	f000 fd6b 	bl	8005444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800496e:	f001 fe35 	bl	80065dc <vPortEnterCritical>
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004978:	b25b      	sxtb	r3, r3
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497e:	d103      	bne.n	8004988 <xQueueGenericSend+0x16c>
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800498e:	b25b      	sxtb	r3, r3
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004994:	d103      	bne.n	800499e <xQueueGenericSend+0x182>
 8004996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800499e:	f001 fe4d 	bl	800663c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049a2:	1d3a      	adds	r2, r7, #4
 80049a4:	f107 0314 	add.w	r3, r7, #20
 80049a8:	4611      	mov	r1, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 ffe8 	bl	8005980 <xTaskCheckForTimeOut>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d124      	bne.n	8004a00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049b8:	f000 fa9e 	bl	8004ef8 <prvIsQueueFull>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d018      	beq.n	80049f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	3310      	adds	r3, #16
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	4611      	mov	r1, r2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 ff0e 	bl	80057ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049d2:	f000 fa29 	bl	8004e28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049d6:	f000 fd43 	bl	8005460 <xTaskResumeAll>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f47f af7c 	bne.w	80048da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80049e2:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <xQueueGenericSend+0x1f8>)
 80049e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	e772      	b.n	80048da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049f6:	f000 fa17 	bl	8004e28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049fa:	f000 fd31 	bl	8005460 <xTaskResumeAll>
 80049fe:	e76c      	b.n	80048da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a02:	f000 fa11 	bl	8004e28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a06:	f000 fd2b 	bl	8005460 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a0a:	2300      	movs	r3, #0
		}
	}
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3738      	adds	r7, #56	; 0x38
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08e      	sub	sp, #56	; 0x38
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d103      	bne.n	8004a54 <xQueueGenericSendFromISR+0x3c>
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <xQueueGenericSendFromISR+0x40>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <xQueueGenericSendFromISR+0x42>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	623b      	str	r3, [r7, #32]
}
 8004a70:	bf00      	nop
 8004a72:	e7fe      	b.n	8004a72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d103      	bne.n	8004a82 <xQueueGenericSendFromISR+0x6a>
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d101      	bne.n	8004a86 <xQueueGenericSendFromISR+0x6e>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <xQueueGenericSendFromISR+0x70>
 8004a86:	2300      	movs	r3, #0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	61fb      	str	r3, [r7, #28]
}
 8004a9e:	bf00      	nop
 8004aa0:	e7fe      	b.n	8004aa0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004aa2:	f001 fe5d 	bl	8006760 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004aa6:	f3ef 8211 	mrs	r2, BASEPRI
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	61ba      	str	r2, [r7, #24]
 8004abc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004abe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d302      	bcc.n	8004ad4 <xQueueGenericSendFromISR+0xbc>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d12c      	bne.n	8004b2e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ae4:	f000 f910 	bl	8004d08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ae8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d112      	bne.n	8004b18 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d016      	beq.n	8004b28 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afc:	3324      	adds	r3, #36	; 0x24
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fec4 	bl	800588c <xTaskRemoveFromEventList>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00e      	beq.n	8004b28 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00b      	beq.n	8004b28 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e007      	b.n	8004b28 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	b25a      	sxtb	r2, r3
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004b2c:	e001      	b.n	8004b32 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	637b      	str	r3, [r7, #52]	; 0x34
 8004b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b34:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3738      	adds	r7, #56	; 0x38
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08c      	sub	sp, #48	; 0x30
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b54:	2300      	movs	r3, #0
 8004b56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <xQueueReceive+0x30>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	623b      	str	r3, [r7, #32]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d103      	bne.n	8004b86 <xQueueReceive+0x3e>
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <xQueueReceive+0x42>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <xQueueReceive+0x44>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <xQueueReceive+0x5e>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	61fb      	str	r3, [r7, #28]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ba6:	f001 f833 	bl	8005c10 <xTaskGetSchedulerState>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d102      	bne.n	8004bb6 <xQueueReceive+0x6e>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <xQueueReceive+0x72>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <xQueueReceive+0x74>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10a      	bne.n	8004bd6 <xQueueReceive+0x8e>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	61bb      	str	r3, [r7, #24]
}
 8004bd2:	bf00      	nop
 8004bd4:	e7fe      	b.n	8004bd4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bd6:	f001 fd01 	bl	80065dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01f      	beq.n	8004c26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bea:	f000 f8f7 	bl	8004ddc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	1e5a      	subs	r2, r3, #1
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00f      	beq.n	8004c1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	3310      	adds	r3, #16
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fe42 	bl	800588c <xTaskRemoveFromEventList>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d007      	beq.n	8004c1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c0e:	4b3d      	ldr	r3, [pc, #244]	; (8004d04 <xQueueReceive+0x1bc>)
 8004c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c1e:	f001 fd0d 	bl	800663c <vPortExitCritical>
				return pdPASS;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e069      	b.n	8004cfa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d103      	bne.n	8004c34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c2c:	f001 fd06 	bl	800663c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e062      	b.n	8004cfa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c3a:	f107 0310 	add.w	r3, r7, #16
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fe88 	bl	8005954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c44:	2301      	movs	r3, #1
 8004c46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c48:	f001 fcf8 	bl	800663c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c4c:	f000 fbfa 	bl	8005444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c50:	f001 fcc4 	bl	80065dc <vPortEnterCritical>
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c5a:	b25b      	sxtb	r3, r3
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d103      	bne.n	8004c6a <xQueueReceive+0x122>
 8004c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c70:	b25b      	sxtb	r3, r3
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c76:	d103      	bne.n	8004c80 <xQueueReceive+0x138>
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c80:	f001 fcdc 	bl	800663c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c84:	1d3a      	adds	r2, r7, #4
 8004c86:	f107 0310 	add.w	r3, r7, #16
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fe77 	bl	8005980 <xTaskCheckForTimeOut>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d123      	bne.n	8004ce0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c9a:	f000 f917 	bl	8004ecc <prvIsQueueEmpty>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d017      	beq.n	8004cd4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	3324      	adds	r3, #36	; 0x24
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	4611      	mov	r1, r2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fd9d 	bl	80057ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb4:	f000 f8b8 	bl	8004e28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cb8:	f000 fbd2 	bl	8005460 <xTaskResumeAll>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d189      	bne.n	8004bd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004cc2:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <xQueueReceive+0x1bc>)
 8004cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	e780      	b.n	8004bd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cd6:	f000 f8a7 	bl	8004e28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cda:	f000 fbc1 	bl	8005460 <xTaskResumeAll>
 8004cde:	e77a      	b.n	8004bd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ce2:	f000 f8a1 	bl	8004e28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ce6:	f000 fbbb 	bl	8005460 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cec:	f000 f8ee 	bl	8004ecc <prvIsQueueEmpty>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f43f af6f 	beq.w	8004bd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cf8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3730      	adds	r7, #48	; 0x30
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	e000ed04 	.word	0xe000ed04

08004d08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d14:	2300      	movs	r3, #0
 8004d16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10d      	bne.n	8004d42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d14d      	bne.n	8004dca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 ff8a 	bl	8005c4c <xTaskPriorityDisinherit>
 8004d38:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	605a      	str	r2, [r3, #4]
 8004d40:	e043      	b.n	8004dca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d119      	bne.n	8004d7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6898      	ldr	r0, [r3, #8]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	461a      	mov	r2, r3
 8004d52:	68b9      	ldr	r1, [r7, #8]
 8004d54:	f001 ff46 	bl	8006be4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	441a      	add	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d32b      	bcc.n	8004dca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	609a      	str	r2, [r3, #8]
 8004d7a:	e026      	b.n	8004dca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	68d8      	ldr	r0, [r3, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	461a      	mov	r2, r3
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	f001 ff2c 	bl	8006be4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	425b      	negs	r3, r3
 8004d96:	441a      	add	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d207      	bcs.n	8004db8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	425b      	negs	r3, r3
 8004db2:	441a      	add	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d105      	bne.n	8004dca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004dd2:	697b      	ldr	r3, [r7, #20]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d018      	beq.n	8004e20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	441a      	add	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d303      	bcc.n	8004e10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68d9      	ldr	r1, [r3, #12]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	461a      	mov	r2, r3
 8004e1a:	6838      	ldr	r0, [r7, #0]
 8004e1c:	f001 fee2 	bl	8006be4 <memcpy>
	}
}
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e30:	f001 fbd4 	bl	80065dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e3c:	e011      	b.n	8004e62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d012      	beq.n	8004e6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3324      	adds	r3, #36	; 0x24
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fd1e 	bl	800588c <xTaskRemoveFromEventList>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e56:	f000 fdf5 	bl	8005a44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	dce9      	bgt.n	8004e3e <prvUnlockQueue+0x16>
 8004e6a:	e000      	b.n	8004e6e <prvUnlockQueue+0x46>
					break;
 8004e6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	22ff      	movs	r2, #255	; 0xff
 8004e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e76:	f001 fbe1 	bl	800663c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e7a:	f001 fbaf 	bl	80065dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e86:	e011      	b.n	8004eac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d012      	beq.n	8004eb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3310      	adds	r3, #16
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fcf9 	bl	800588c <xTaskRemoveFromEventList>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ea0:	f000 fdd0 	bl	8005a44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ea4:	7bbb      	ldrb	r3, [r7, #14]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	dce9      	bgt.n	8004e88 <prvUnlockQueue+0x60>
 8004eb4:	e000      	b.n	8004eb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004eb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	22ff      	movs	r2, #255	; 0xff
 8004ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ec0:	f001 fbbc 	bl	800663c <vPortExitCritical>
}
 8004ec4:	bf00      	nop
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ed4:	f001 fb82 	bl	80065dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d102      	bne.n	8004ee6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	e001      	b.n	8004eea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004eea:	f001 fba7 	bl	800663c <vPortExitCritical>

	return xReturn;
 8004eee:	68fb      	ldr	r3, [r7, #12]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f00:	f001 fb6c 	bl	80065dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d102      	bne.n	8004f16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f10:	2301      	movs	r3, #1
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e001      	b.n	8004f1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f1a:	f001 fb8f 	bl	800663c <vPortExitCritical>

	return xReturn;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	e014      	b.n	8004f62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f38:	4a0e      	ldr	r2, [pc, #56]	; (8004f74 <vQueueAddToRegistry+0x4c>)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10b      	bne.n	8004f5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f44:	490b      	ldr	r1, [pc, #44]	; (8004f74 <vQueueAddToRegistry+0x4c>)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f4e:	4a09      	ldr	r2, [pc, #36]	; (8004f74 <vQueueAddToRegistry+0x4c>)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	4413      	add	r3, r2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f5a:	e006      	b.n	8004f6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b07      	cmp	r3, #7
 8004f66:	d9e7      	bls.n	8004f38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr
 8004f74:	20000850 	.word	0x20000850

08004f78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f88:	f001 fb28 	bl	80065dc <vPortEnterCritical>
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f92:	b25b      	sxtb	r3, r3
 8004f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f98:	d103      	bne.n	8004fa2 <vQueueWaitForMessageRestricted+0x2a>
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fa8:	b25b      	sxtb	r3, r3
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fae:	d103      	bne.n	8004fb8 <vQueueWaitForMessageRestricted+0x40>
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fb8:	f001 fb40 	bl	800663c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d106      	bne.n	8004fd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	3324      	adds	r3, #36	; 0x24
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fc31 	bl	8005834 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004fd2:	6978      	ldr	r0, [r7, #20]
 8004fd4:	f7ff ff28 	bl	8004e28 <prvUnlockQueue>
	}
 8004fd8:	bf00      	nop
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08e      	sub	sp, #56	; 0x38
 8004fe4:	af04      	add	r7, sp, #16
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10a      	bne.n	800500a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	623b      	str	r3, [r7, #32]
}
 8005006:	bf00      	nop
 8005008:	e7fe      	b.n	8005008 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800500a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <xTaskCreateStatic+0x46>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	61fb      	str	r3, [r7, #28]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005026:	235c      	movs	r3, #92	; 0x5c
 8005028:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b5c      	cmp	r3, #92	; 0x5c
 800502e:	d00a      	beq.n	8005046 <xTaskCreateStatic+0x66>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	61bb      	str	r3, [r7, #24]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01e      	beq.n	800508a <xTaskCreateStatic+0xaa>
 800504c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504e:	2b00      	cmp	r3, #0
 8005050:	d01b      	beq.n	800508a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800505a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005064:	2300      	movs	r3, #0
 8005066:	9303      	str	r3, [sp, #12]
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	9302      	str	r3, [sp, #8]
 800506c:	f107 0314 	add.w	r3, r7, #20
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 f850 	bl	8005122 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005082:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005084:	f000 f8d4 	bl	8005230 <prvAddNewTaskToReadyList>
 8005088:	e001      	b.n	800508e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800508e:	697b      	ldr	r3, [r7, #20]
	}
 8005090:	4618      	mov	r0, r3
 8005092:	3728      	adds	r7, #40	; 0x28
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08c      	sub	sp, #48	; 0x30
 800509c:	af04      	add	r7, sp, #16
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	4613      	mov	r3, r2
 80050a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050a8:	88fb      	ldrh	r3, [r7, #6]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f001 fb95 	bl	80067dc <pvPortMalloc>
 80050b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00e      	beq.n	80050d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80050ba:	205c      	movs	r0, #92	; 0x5c
 80050bc:	f001 fb8e 	bl	80067dc <pvPortMalloc>
 80050c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	631a      	str	r2, [r3, #48]	; 0x30
 80050ce:	e005      	b.n	80050dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050d0:	6978      	ldr	r0, [r7, #20]
 80050d2:	f001 fc47 	bl	8006964 <vPortFree>
 80050d6:	e001      	b.n	80050dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d017      	beq.n	8005112 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050ea:	88fa      	ldrh	r2, [r7, #6]
 80050ec:	2300      	movs	r3, #0
 80050ee:	9303      	str	r3, [sp, #12]
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	9302      	str	r3, [sp, #8]
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	9301      	str	r3, [sp, #4]
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	68b9      	ldr	r1, [r7, #8]
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f80e 	bl	8005122 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005106:	69f8      	ldr	r0, [r7, #28]
 8005108:	f000 f892 	bl	8005230 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800510c:	2301      	movs	r3, #1
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	e002      	b.n	8005118 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005112:	f04f 33ff 	mov.w	r3, #4294967295
 8005116:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005118:	69bb      	ldr	r3, [r7, #24]
	}
 800511a:	4618      	mov	r0, r3
 800511c:	3720      	adds	r7, #32
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b088      	sub	sp, #32
 8005126:	af00      	add	r7, sp, #0
 8005128:	60f8      	str	r0, [r7, #12]
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	607a      	str	r2, [r7, #4]
 800512e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	461a      	mov	r2, r3
 800513a:	21a5      	movs	r1, #165	; 0xa5
 800513c:	f001 fd26 	bl	8006b8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800514a:	3b01      	subs	r3, #1
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	f023 0307 	bic.w	r3, r3, #7
 8005158:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <prvInitialiseNewTask+0x58>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	617b      	str	r3, [r7, #20]
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
 800517e:	e012      	b.n	80051a6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	4413      	add	r3, r2
 8005186:	7819      	ldrb	r1, [r3, #0]
 8005188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	3334      	adds	r3, #52	; 0x34
 8005190:	460a      	mov	r2, r1
 8005192:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	4413      	add	r3, r2
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d006      	beq.n	80051ae <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	3301      	adds	r3, #1
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	2b0f      	cmp	r3, #15
 80051aa:	d9e9      	bls.n	8005180 <prvInitialiseNewTask+0x5e>
 80051ac:	e000      	b.n	80051b0 <prvInitialiseNewTask+0x8e>
		{
			break;
 80051ae:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	2b37      	cmp	r3, #55	; 0x37
 80051bc:	d901      	bls.n	80051c2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051be:	2337      	movs	r3, #55	; 0x37
 80051c0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051cc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	2200      	movs	r2, #0
 80051d2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d6:	3304      	adds	r3, #4
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff f98c 	bl	80044f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	3318      	adds	r3, #24
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff f987 	bl	80044f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051fc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	2200      	movs	r2, #0
 8005202:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	68f9      	ldr	r1, [r7, #12]
 8005210:	69b8      	ldr	r0, [r7, #24]
 8005212:	f001 f8ef 	bl	80063f4 <pxPortInitialiseStack>
 8005216:	4602      	mov	r2, r0
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005226:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005228:	bf00      	nop
 800522a:	3720      	adds	r7, #32
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005238:	f001 f9d0 	bl	80065dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800523c:	4b2d      	ldr	r3, [pc, #180]	; (80052f4 <prvAddNewTaskToReadyList+0xc4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3301      	adds	r3, #1
 8005242:	4a2c      	ldr	r2, [pc, #176]	; (80052f4 <prvAddNewTaskToReadyList+0xc4>)
 8005244:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005246:	4b2c      	ldr	r3, [pc, #176]	; (80052f8 <prvAddNewTaskToReadyList+0xc8>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800524e:	4a2a      	ldr	r2, [pc, #168]	; (80052f8 <prvAddNewTaskToReadyList+0xc8>)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005254:	4b27      	ldr	r3, [pc, #156]	; (80052f4 <prvAddNewTaskToReadyList+0xc4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d110      	bne.n	800527e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800525c:	f000 fc16 	bl	8005a8c <prvInitialiseTaskLists>
 8005260:	e00d      	b.n	800527e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005262:	4b26      	ldr	r3, [pc, #152]	; (80052fc <prvAddNewTaskToReadyList+0xcc>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d109      	bne.n	800527e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800526a:	4b23      	ldr	r3, [pc, #140]	; (80052f8 <prvAddNewTaskToReadyList+0xc8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	429a      	cmp	r2, r3
 8005276:	d802      	bhi.n	800527e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005278:	4a1f      	ldr	r2, [pc, #124]	; (80052f8 <prvAddNewTaskToReadyList+0xc8>)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800527e:	4b20      	ldr	r3, [pc, #128]	; (8005300 <prvAddNewTaskToReadyList+0xd0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <prvAddNewTaskToReadyList+0xd0>)
 8005286:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005288:	4b1d      	ldr	r3, [pc, #116]	; (8005300 <prvAddNewTaskToReadyList+0xd0>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	4b1b      	ldr	r3, [pc, #108]	; (8005304 <prvAddNewTaskToReadyList+0xd4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d903      	bls.n	80052a4 <prvAddNewTaskToReadyList+0x74>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	4a18      	ldr	r2, [pc, #96]	; (8005304 <prvAddNewTaskToReadyList+0xd4>)
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a8:	4613      	mov	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4a15      	ldr	r2, [pc, #84]	; (8005308 <prvAddNewTaskToReadyList+0xd8>)
 80052b2:	441a      	add	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3304      	adds	r3, #4
 80052b8:	4619      	mov	r1, r3
 80052ba:	4610      	mov	r0, r2
 80052bc:	f7ff f927 	bl	800450e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052c0:	f001 f9bc 	bl	800663c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052c4:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <prvAddNewTaskToReadyList+0xcc>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00e      	beq.n	80052ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052cc:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <prvAddNewTaskToReadyList+0xc8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d207      	bcs.n	80052ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052da:	4b0c      	ldr	r3, [pc, #48]	; (800530c <prvAddNewTaskToReadyList+0xdc>)
 80052dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20000d64 	.word	0x20000d64
 80052f8:	20000890 	.word	0x20000890
 80052fc:	20000d70 	.word	0x20000d70
 8005300:	20000d80 	.word	0x20000d80
 8005304:	20000d6c 	.word	0x20000d6c
 8005308:	20000894 	.word	0x20000894
 800530c:	e000ed04 	.word	0xe000ed04

08005310 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d017      	beq.n	8005352 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005322:	4b13      	ldr	r3, [pc, #76]	; (8005370 <vTaskDelay+0x60>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <vTaskDelay+0x30>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	60bb      	str	r3, [r7, #8]
}
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005340:	f000 f880 	bl	8005444 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005344:	2100      	movs	r1, #0
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fcee 	bl	8005d28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800534c:	f000 f888 	bl	8005460 <xTaskResumeAll>
 8005350:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d107      	bne.n	8005368 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005358:	4b06      	ldr	r3, [pc, #24]	; (8005374 <vTaskDelay+0x64>)
 800535a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20000d8c 	.word	0x20000d8c
 8005374:	e000ed04 	.word	0xe000ed04

08005378 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	; 0x28
 800537c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800537e:	2300      	movs	r3, #0
 8005380:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005382:	2300      	movs	r3, #0
 8005384:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005386:	463a      	mov	r2, r7
 8005388:	1d39      	adds	r1, r7, #4
 800538a:	f107 0308 	add.w	r3, r7, #8
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff f860 	bl	8004454 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	9202      	str	r2, [sp, #8]
 800539c:	9301      	str	r3, [sp, #4]
 800539e:	2300      	movs	r3, #0
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	2300      	movs	r3, #0
 80053a4:	460a      	mov	r2, r1
 80053a6:	4921      	ldr	r1, [pc, #132]	; (800542c <vTaskStartScheduler+0xb4>)
 80053a8:	4821      	ldr	r0, [pc, #132]	; (8005430 <vTaskStartScheduler+0xb8>)
 80053aa:	f7ff fe19 	bl	8004fe0 <xTaskCreateStatic>
 80053ae:	4603      	mov	r3, r0
 80053b0:	4a20      	ldr	r2, [pc, #128]	; (8005434 <vTaskStartScheduler+0xbc>)
 80053b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053b4:	4b1f      	ldr	r3, [pc, #124]	; (8005434 <vTaskStartScheduler+0xbc>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053bc:	2301      	movs	r3, #1
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	e001      	b.n	80053c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d102      	bne.n	80053d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80053cc:	f000 fd00 	bl	8005dd0 <xTimerCreateTimerTask>
 80053d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d116      	bne.n	8005406 <vTaskStartScheduler+0x8e>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	613b      	str	r3, [r7, #16]
}
 80053ea:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053ec:	4b12      	ldr	r3, [pc, #72]	; (8005438 <vTaskStartScheduler+0xc0>)
 80053ee:	f04f 32ff 	mov.w	r2, #4294967295
 80053f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053f4:	4b11      	ldr	r3, [pc, #68]	; (800543c <vTaskStartScheduler+0xc4>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80053fa:	4b11      	ldr	r3, [pc, #68]	; (8005440 <vTaskStartScheduler+0xc8>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005400:	f001 f87a 	bl	80064f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005404:	e00e      	b.n	8005424 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540c:	d10a      	bne.n	8005424 <vTaskStartScheduler+0xac>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	60fb      	str	r3, [r7, #12]
}
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <vTaskStartScheduler+0xaa>
}
 8005424:	bf00      	nop
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	08006c74 	.word	0x08006c74
 8005430:	08005a5d 	.word	0x08005a5d
 8005434:	20000d88 	.word	0x20000d88
 8005438:	20000d84 	.word	0x20000d84
 800543c:	20000d70 	.word	0x20000d70
 8005440:	20000d68 	.word	0x20000d68

08005444 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005448:	4b04      	ldr	r3, [pc, #16]	; (800545c <vTaskSuspendAll+0x18>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3301      	adds	r3, #1
 800544e:	4a03      	ldr	r2, [pc, #12]	; (800545c <vTaskSuspendAll+0x18>)
 8005450:	6013      	str	r3, [r2, #0]
}
 8005452:	bf00      	nop
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	20000d8c 	.word	0x20000d8c

08005460 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800546a:	2300      	movs	r3, #0
 800546c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800546e:	4b42      	ldr	r3, [pc, #264]	; (8005578 <xTaskResumeAll+0x118>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10a      	bne.n	800548c <xTaskResumeAll+0x2c>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	603b      	str	r3, [r7, #0]
}
 8005488:	bf00      	nop
 800548a:	e7fe      	b.n	800548a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800548c:	f001 f8a6 	bl	80065dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005490:	4b39      	ldr	r3, [pc, #228]	; (8005578 <xTaskResumeAll+0x118>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3b01      	subs	r3, #1
 8005496:	4a38      	ldr	r2, [pc, #224]	; (8005578 <xTaskResumeAll+0x118>)
 8005498:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800549a:	4b37      	ldr	r3, [pc, #220]	; (8005578 <xTaskResumeAll+0x118>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d162      	bne.n	8005568 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054a2:	4b36      	ldr	r3, [pc, #216]	; (800557c <xTaskResumeAll+0x11c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d05e      	beq.n	8005568 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054aa:	e02f      	b.n	800550c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80054ac:	4b34      	ldr	r3, [pc, #208]	; (8005580 <xTaskResumeAll+0x120>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3318      	adds	r3, #24
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff f883 	bl	80045c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff f87e 	bl	80045c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054cc:	4b2d      	ldr	r3, [pc, #180]	; (8005584 <xTaskResumeAll+0x124>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d903      	bls.n	80054dc <xTaskResumeAll+0x7c>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	4a2a      	ldr	r2, [pc, #168]	; (8005584 <xTaskResumeAll+0x124>)
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4a27      	ldr	r2, [pc, #156]	; (8005588 <xTaskResumeAll+0x128>)
 80054ea:	441a      	add	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3304      	adds	r3, #4
 80054f0:	4619      	mov	r1, r3
 80054f2:	4610      	mov	r0, r2
 80054f4:	f7ff f80b 	bl	800450e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fc:	4b23      	ldr	r3, [pc, #140]	; (800558c <xTaskResumeAll+0x12c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	429a      	cmp	r2, r3
 8005504:	d302      	bcc.n	800550c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005506:	4b22      	ldr	r3, [pc, #136]	; (8005590 <xTaskResumeAll+0x130>)
 8005508:	2201      	movs	r2, #1
 800550a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800550c:	4b1c      	ldr	r3, [pc, #112]	; (8005580 <xTaskResumeAll+0x120>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1cb      	bne.n	80054ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800551a:	f000 fb55 	bl	8005bc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800551e:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <xTaskResumeAll+0x134>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d010      	beq.n	800554c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800552a:	f000 f845 	bl	80055b8 <xTaskIncrementTick>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005534:	4b16      	ldr	r3, [pc, #88]	; (8005590 <xTaskResumeAll+0x130>)
 8005536:	2201      	movs	r2, #1
 8005538:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3b01      	subs	r3, #1
 800553e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f1      	bne.n	800552a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <xTaskResumeAll+0x134>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800554c:	4b10      	ldr	r3, [pc, #64]	; (8005590 <xTaskResumeAll+0x130>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d009      	beq.n	8005568 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005554:	2301      	movs	r3, #1
 8005556:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005558:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <xTaskResumeAll+0x138>)
 800555a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005568:	f001 f868 	bl	800663c <vPortExitCritical>

	return xAlreadyYielded;
 800556c:	68bb      	ldr	r3, [r7, #8]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20000d8c 	.word	0x20000d8c
 800557c:	20000d64 	.word	0x20000d64
 8005580:	20000d24 	.word	0x20000d24
 8005584:	20000d6c 	.word	0x20000d6c
 8005588:	20000894 	.word	0x20000894
 800558c:	20000890 	.word	0x20000890
 8005590:	20000d78 	.word	0x20000d78
 8005594:	20000d74 	.word	0x20000d74
 8005598:	e000ed04 	.word	0xe000ed04

0800559c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055a2:	4b04      	ldr	r3, [pc, #16]	; (80055b4 <xTaskGetTickCount+0x18>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055a8:	687b      	ldr	r3, [r7, #4]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr
 80055b4:	20000d68 	.word	0x20000d68

080055b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055be:	2300      	movs	r3, #0
 80055c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055c2:	4b51      	ldr	r3, [pc, #324]	; (8005708 <xTaskIncrementTick+0x150>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f040 808e 	bne.w	80056e8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055cc:	4b4f      	ldr	r3, [pc, #316]	; (800570c <xTaskIncrementTick+0x154>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3301      	adds	r3, #1
 80055d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055d4:	4a4d      	ldr	r2, [pc, #308]	; (800570c <xTaskIncrementTick+0x154>)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d120      	bne.n	8005622 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80055e0:	4b4b      	ldr	r3, [pc, #300]	; (8005710 <xTaskIncrementTick+0x158>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <xTaskIncrementTick+0x48>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	603b      	str	r3, [r7, #0]
}
 80055fc:	bf00      	nop
 80055fe:	e7fe      	b.n	80055fe <xTaskIncrementTick+0x46>
 8005600:	4b43      	ldr	r3, [pc, #268]	; (8005710 <xTaskIncrementTick+0x158>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	4b43      	ldr	r3, [pc, #268]	; (8005714 <xTaskIncrementTick+0x15c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a41      	ldr	r2, [pc, #260]	; (8005710 <xTaskIncrementTick+0x158>)
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	4a41      	ldr	r2, [pc, #260]	; (8005714 <xTaskIncrementTick+0x15c>)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	4b40      	ldr	r3, [pc, #256]	; (8005718 <xTaskIncrementTick+0x160>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	4a3f      	ldr	r2, [pc, #252]	; (8005718 <xTaskIncrementTick+0x160>)
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	f000 fad3 	bl	8005bc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005622:	4b3e      	ldr	r3, [pc, #248]	; (800571c <xTaskIncrementTick+0x164>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	429a      	cmp	r2, r3
 800562a:	d34e      	bcc.n	80056ca <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800562c:	4b38      	ldr	r3, [pc, #224]	; (8005710 <xTaskIncrementTick+0x158>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <xTaskIncrementTick+0x82>
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <xTaskIncrementTick+0x84>
 800563a:	2300      	movs	r3, #0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d004      	beq.n	800564a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005640:	4b36      	ldr	r3, [pc, #216]	; (800571c <xTaskIncrementTick+0x164>)
 8005642:	f04f 32ff 	mov.w	r2, #4294967295
 8005646:	601a      	str	r2, [r3, #0]
					break;
 8005648:	e03f      	b.n	80056ca <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800564a:	4b31      	ldr	r3, [pc, #196]	; (8005710 <xTaskIncrementTick+0x158>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	429a      	cmp	r2, r3
 8005660:	d203      	bcs.n	800566a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005662:	4a2e      	ldr	r2, [pc, #184]	; (800571c <xTaskIncrementTick+0x164>)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6013      	str	r3, [r2, #0]
						break;
 8005668:	e02f      	b.n	80056ca <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	3304      	adds	r3, #4
 800566e:	4618      	mov	r0, r3
 8005670:	f7fe ffa8 	bl	80045c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	2b00      	cmp	r3, #0
 800567a:	d004      	beq.n	8005686 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	3318      	adds	r3, #24
 8005680:	4618      	mov	r0, r3
 8005682:	f7fe ff9f 	bl	80045c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568a:	4b25      	ldr	r3, [pc, #148]	; (8005720 <xTaskIncrementTick+0x168>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d903      	bls.n	800569a <xTaskIncrementTick+0xe2>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005696:	4a22      	ldr	r2, [pc, #136]	; (8005720 <xTaskIncrementTick+0x168>)
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4a1f      	ldr	r2, [pc, #124]	; (8005724 <xTaskIncrementTick+0x16c>)
 80056a8:	441a      	add	r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	3304      	adds	r3, #4
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f7fe ff2c 	bl	800450e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ba:	4b1b      	ldr	r3, [pc, #108]	; (8005728 <xTaskIncrementTick+0x170>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d3b3      	bcc.n	800562c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80056c4:	2301      	movs	r3, #1
 80056c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056c8:	e7b0      	b.n	800562c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056ca:	4b17      	ldr	r3, [pc, #92]	; (8005728 <xTaskIncrementTick+0x170>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d0:	4914      	ldr	r1, [pc, #80]	; (8005724 <xTaskIncrementTick+0x16c>)
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d907      	bls.n	80056f2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80056e2:	2301      	movs	r3, #1
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e004      	b.n	80056f2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80056e8:	4b10      	ldr	r3, [pc, #64]	; (800572c <xTaskIncrementTick+0x174>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3301      	adds	r3, #1
 80056ee:	4a0f      	ldr	r2, [pc, #60]	; (800572c <xTaskIncrementTick+0x174>)
 80056f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80056f2:	4b0f      	ldr	r3, [pc, #60]	; (8005730 <xTaskIncrementTick+0x178>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80056fa:	2301      	movs	r3, #1
 80056fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80056fe:	697b      	ldr	r3, [r7, #20]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	20000d8c 	.word	0x20000d8c
 800570c:	20000d68 	.word	0x20000d68
 8005710:	20000d1c 	.word	0x20000d1c
 8005714:	20000d20 	.word	0x20000d20
 8005718:	20000d7c 	.word	0x20000d7c
 800571c:	20000d84 	.word	0x20000d84
 8005720:	20000d6c 	.word	0x20000d6c
 8005724:	20000894 	.word	0x20000894
 8005728:	20000890 	.word	0x20000890
 800572c:	20000d74 	.word	0x20000d74
 8005730:	20000d78 	.word	0x20000d78

08005734 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800573a:	4b27      	ldr	r3, [pc, #156]	; (80057d8 <vTaskSwitchContext+0xa4>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005742:	4b26      	ldr	r3, [pc, #152]	; (80057dc <vTaskSwitchContext+0xa8>)
 8005744:	2201      	movs	r2, #1
 8005746:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005748:	e041      	b.n	80057ce <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800574a:	4b24      	ldr	r3, [pc, #144]	; (80057dc <vTaskSwitchContext+0xa8>)
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005750:	4b23      	ldr	r3, [pc, #140]	; (80057e0 <vTaskSwitchContext+0xac>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	e010      	b.n	800577a <vTaskSwitchContext+0x46>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <vTaskSwitchContext+0x40>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	607b      	str	r3, [r7, #4]
}
 8005770:	bf00      	nop
 8005772:	e7fe      	b.n	8005772 <vTaskSwitchContext+0x3e>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3b01      	subs	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	491a      	ldr	r1, [pc, #104]	; (80057e4 <vTaskSwitchContext+0xb0>)
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0e4      	beq.n	8005758 <vTaskSwitchContext+0x24>
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4a12      	ldr	r2, [pc, #72]	; (80057e4 <vTaskSwitchContext+0xb0>)
 800579a:	4413      	add	r3, r2
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	605a      	str	r2, [r3, #4]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	3308      	adds	r3, #8
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d104      	bne.n	80057be <vTaskSwitchContext+0x8a>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	605a      	str	r2, [r3, #4]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	4a08      	ldr	r2, [pc, #32]	; (80057e8 <vTaskSwitchContext+0xb4>)
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	4a05      	ldr	r2, [pc, #20]	; (80057e0 <vTaskSwitchContext+0xac>)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6013      	str	r3, [r2, #0]
}
 80057ce:	bf00      	nop
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr
 80057d8:	20000d8c 	.word	0x20000d8c
 80057dc:	20000d78 	.word	0x20000d78
 80057e0:	20000d6c 	.word	0x20000d6c
 80057e4:	20000894 	.word	0x20000894
 80057e8:	20000890 	.word	0x20000890

080057ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	60fb      	str	r3, [r7, #12]
}
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005812:	4b07      	ldr	r3, [pc, #28]	; (8005830 <vTaskPlaceOnEventList+0x44>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3318      	adds	r3, #24
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fe fe9a 	bl	8004554 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005820:	2101      	movs	r1, #1
 8005822:	6838      	ldr	r0, [r7, #0]
 8005824:	f000 fa80 	bl	8005d28 <prvAddCurrentTaskToDelayedList>
}
 8005828:	bf00      	nop
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	20000890 	.word	0x20000890

08005834 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10a      	bne.n	800585c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	617b      	str	r3, [r7, #20]
}
 8005858:	bf00      	nop
 800585a:	e7fe      	b.n	800585a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800585c:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <vTaskPlaceOnEventListRestricted+0x54>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3318      	adds	r3, #24
 8005862:	4619      	mov	r1, r3
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7fe fe52 	bl	800450e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005870:	f04f 33ff 	mov.w	r3, #4294967295
 8005874:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	68b8      	ldr	r0, [r7, #8]
 800587a:	f000 fa55 	bl	8005d28 <prvAddCurrentTaskToDelayedList>
	}
 800587e:	bf00      	nop
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20000890 	.word	0x20000890

0800588c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	60fb      	str	r3, [r7, #12]
}
 80058b4:	bf00      	nop
 80058b6:	e7fe      	b.n	80058b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	3318      	adds	r3, #24
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fe fe81 	bl	80045c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c2:	4b1e      	ldr	r3, [pc, #120]	; (800593c <xTaskRemoveFromEventList+0xb0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d11d      	bne.n	8005906 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	3304      	adds	r3, #4
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe fe78 	bl	80045c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d8:	4b19      	ldr	r3, [pc, #100]	; (8005940 <xTaskRemoveFromEventList+0xb4>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d903      	bls.n	80058e8 <xTaskRemoveFromEventList+0x5c>
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	4a16      	ldr	r2, [pc, #88]	; (8005940 <xTaskRemoveFromEventList+0xb4>)
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4a13      	ldr	r2, [pc, #76]	; (8005944 <xTaskRemoveFromEventList+0xb8>)
 80058f6:	441a      	add	r2, r3
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f7fe fe05 	bl	800450e <vListInsertEnd>
 8005904:	e005      	b.n	8005912 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	3318      	adds	r3, #24
 800590a:	4619      	mov	r1, r3
 800590c:	480e      	ldr	r0, [pc, #56]	; (8005948 <xTaskRemoveFromEventList+0xbc>)
 800590e:	f7fe fdfe 	bl	800450e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005916:	4b0d      	ldr	r3, [pc, #52]	; (800594c <xTaskRemoveFromEventList+0xc0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	429a      	cmp	r2, r3
 800591e:	d905      	bls.n	800592c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005920:	2301      	movs	r3, #1
 8005922:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005924:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <xTaskRemoveFromEventList+0xc4>)
 8005926:	2201      	movs	r2, #1
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e001      	b.n	8005930 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005930:	697b      	ldr	r3, [r7, #20]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000d8c 	.word	0x20000d8c
 8005940:	20000d6c 	.word	0x20000d6c
 8005944:	20000894 	.word	0x20000894
 8005948:	20000d24 	.word	0x20000d24
 800594c:	20000890 	.word	0x20000890
 8005950:	20000d78 	.word	0x20000d78

08005954 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800595c:	4b06      	ldr	r3, [pc, #24]	; (8005978 <vTaskInternalSetTimeOutState+0x24>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <vTaskInternalSetTimeOutState+0x28>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	605a      	str	r2, [r3, #4]
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	20000d7c 	.word	0x20000d7c
 800597c:	20000d68 	.word	0x20000d68

08005980 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	613b      	str	r3, [r7, #16]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	60fb      	str	r3, [r7, #12]
}
 80059be:	bf00      	nop
 80059c0:	e7fe      	b.n	80059c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80059c2:	f000 fe0b 	bl	80065dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059c6:	4b1d      	ldr	r3, [pc, #116]	; (8005a3c <xTaskCheckForTimeOut+0xbc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059de:	d102      	bne.n	80059e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61fb      	str	r3, [r7, #28]
 80059e4:	e023      	b.n	8005a2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	4b15      	ldr	r3, [pc, #84]	; (8005a40 <xTaskCheckForTimeOut+0xc0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d007      	beq.n	8005a02 <xTaskCheckForTimeOut+0x82>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d302      	bcc.n	8005a02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80059fc:	2301      	movs	r3, #1
 80059fe:	61fb      	str	r3, [r7, #28]
 8005a00:	e015      	b.n	8005a2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d20b      	bcs.n	8005a24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	1ad2      	subs	r2, r2, r3
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff ff9b 	bl	8005954 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	61fb      	str	r3, [r7, #28]
 8005a22:	e004      	b.n	8005a2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a2e:	f000 fe05 	bl	800663c <vPortExitCritical>

	return xReturn;
 8005a32:	69fb      	ldr	r3, [r7, #28]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3720      	adds	r7, #32
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20000d68 	.word	0x20000d68
 8005a40:	20000d7c 	.word	0x20000d7c

08005a44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a48:	4b03      	ldr	r3, [pc, #12]	; (8005a58 <vTaskMissedYield+0x14>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
}
 8005a4e:	bf00      	nop
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bc80      	pop	{r7}
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	20000d78 	.word	0x20000d78

08005a5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a64:	f000 f852 	bl	8005b0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a68:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <prvIdleTask+0x28>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d9f9      	bls.n	8005a64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a70:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <prvIdleTask+0x2c>)
 8005a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a80:	e7f0      	b.n	8005a64 <prvIdleTask+0x8>
 8005a82:	bf00      	nop
 8005a84:	20000894 	.word	0x20000894
 8005a88:	e000ed04 	.word	0xe000ed04

08005a8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a92:	2300      	movs	r3, #0
 8005a94:	607b      	str	r3, [r7, #4]
 8005a96:	e00c      	b.n	8005ab2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4a12      	ldr	r2, [pc, #72]	; (8005aec <prvInitialiseTaskLists+0x60>)
 8005aa4:	4413      	add	r3, r2
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe fd06 	bl	80044b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	607b      	str	r3, [r7, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b37      	cmp	r3, #55	; 0x37
 8005ab6:	d9ef      	bls.n	8005a98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ab8:	480d      	ldr	r0, [pc, #52]	; (8005af0 <prvInitialiseTaskLists+0x64>)
 8005aba:	f7fe fcfd 	bl	80044b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005abe:	480d      	ldr	r0, [pc, #52]	; (8005af4 <prvInitialiseTaskLists+0x68>)
 8005ac0:	f7fe fcfa 	bl	80044b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ac4:	480c      	ldr	r0, [pc, #48]	; (8005af8 <prvInitialiseTaskLists+0x6c>)
 8005ac6:	f7fe fcf7 	bl	80044b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005aca:	480c      	ldr	r0, [pc, #48]	; (8005afc <prvInitialiseTaskLists+0x70>)
 8005acc:	f7fe fcf4 	bl	80044b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ad0:	480b      	ldr	r0, [pc, #44]	; (8005b00 <prvInitialiseTaskLists+0x74>)
 8005ad2:	f7fe fcf1 	bl	80044b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <prvInitialiseTaskLists+0x78>)
 8005ad8:	4a05      	ldr	r2, [pc, #20]	; (8005af0 <prvInitialiseTaskLists+0x64>)
 8005ada:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <prvInitialiseTaskLists+0x7c>)
 8005ade:	4a05      	ldr	r2, [pc, #20]	; (8005af4 <prvInitialiseTaskLists+0x68>)
 8005ae0:	601a      	str	r2, [r3, #0]
}
 8005ae2:	bf00      	nop
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20000894 	.word	0x20000894
 8005af0:	20000cf4 	.word	0x20000cf4
 8005af4:	20000d08 	.word	0x20000d08
 8005af8:	20000d24 	.word	0x20000d24
 8005afc:	20000d38 	.word	0x20000d38
 8005b00:	20000d50 	.word	0x20000d50
 8005b04:	20000d1c 	.word	0x20000d1c
 8005b08:	20000d20 	.word	0x20000d20

08005b0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b12:	e019      	b.n	8005b48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b14:	f000 fd62 	bl	80065dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005b18:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <prvCheckTasksWaitingTermination+0x50>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3304      	adds	r3, #4
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fe fd4d 	bl	80045c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b2a:	4b0d      	ldr	r3, [pc, #52]	; (8005b60 <prvCheckTasksWaitingTermination+0x54>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	4a0b      	ldr	r2, [pc, #44]	; (8005b60 <prvCheckTasksWaitingTermination+0x54>)
 8005b32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b34:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <prvCheckTasksWaitingTermination+0x58>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	4a0a      	ldr	r2, [pc, #40]	; (8005b64 <prvCheckTasksWaitingTermination+0x58>)
 8005b3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b3e:	f000 fd7d 	bl	800663c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f810 	bl	8005b68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b48:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <prvCheckTasksWaitingTermination+0x58>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e1      	bne.n	8005b14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b50:	bf00      	nop
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000d38 	.word	0x20000d38
 8005b60:	20000d64 	.word	0x20000d64
 8005b64:	20000d4c 	.word	0x20000d4c

08005b68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d108      	bne.n	8005b8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fef0 	bl	8006964 <vPortFree>
				vPortFree( pxTCB );
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 feed 	bl	8006964 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b8a:	e018      	b.n	8005bbe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d103      	bne.n	8005b9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fee4 	bl	8006964 <vPortFree>
	}
 8005b9c:	e00f      	b.n	8005bbe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d00a      	beq.n	8005bbe <prvDeleteTCB+0x56>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	60fb      	str	r3, [r7, #12]
}
 8005bba:	bf00      	nop
 8005bbc:	e7fe      	b.n	8005bbc <prvDeleteTCB+0x54>
	}
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bce:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <prvResetNextTaskUnblockTime+0x40>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <prvResetNextTaskUnblockTime+0x14>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <prvResetNextTaskUnblockTime+0x16>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d004      	beq.n	8005bec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005be2:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <prvResetNextTaskUnblockTime+0x44>)
 8005be4:	f04f 32ff 	mov.w	r2, #4294967295
 8005be8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005bea:	e008      	b.n	8005bfe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <prvResetNextTaskUnblockTime+0x40>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	4a04      	ldr	r2, [pc, #16]	; (8005c0c <prvResetNextTaskUnblockTime+0x44>)
 8005bfc:	6013      	str	r3, [r2, #0]
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bc80      	pop	{r7}
 8005c06:	4770      	bx	lr
 8005c08:	20000d1c 	.word	0x20000d1c
 8005c0c:	20000d84 	.word	0x20000d84

08005c10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <xTaskGetSchedulerState+0x34>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d102      	bne.n	8005c24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	e008      	b.n	8005c36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c24:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <xTaskGetSchedulerState+0x38>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d102      	bne.n	8005c32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	607b      	str	r3, [r7, #4]
 8005c30:	e001      	b.n	8005c36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c32:	2300      	movs	r3, #0
 8005c34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c36:	687b      	ldr	r3, [r7, #4]
	}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	20000d70 	.word	0x20000d70
 8005c48:	20000d8c 	.word	0x20000d8c

08005c4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d056      	beq.n	8005d10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c62:	4b2e      	ldr	r3, [pc, #184]	; (8005d1c <xTaskPriorityDisinherit+0xd0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d00a      	beq.n	8005c82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	60fb      	str	r3, [r7, #12]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	60bb      	str	r3, [r7, #8]
}
 8005c9c:	bf00      	nop
 8005c9e:	e7fe      	b.n	8005c9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca4:	1e5a      	subs	r2, r3, #1
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d02c      	beq.n	8005d10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d128      	bne.n	8005d10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fe fc7e 	bl	80045c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce0:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <xTaskPriorityDisinherit+0xd4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d903      	bls.n	8005cf0 <xTaskPriorityDisinherit+0xa4>
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	4a0c      	ldr	r2, [pc, #48]	; (8005d20 <xTaskPriorityDisinherit+0xd4>)
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4a09      	ldr	r2, [pc, #36]	; (8005d24 <xTaskPriorityDisinherit+0xd8>)
 8005cfe:	441a      	add	r2, r3
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	3304      	adds	r3, #4
 8005d04:	4619      	mov	r1, r3
 8005d06:	4610      	mov	r0, r2
 8005d08:	f7fe fc01 	bl	800450e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d10:	697b      	ldr	r3, [r7, #20]
	}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000890 	.word	0x20000890
 8005d20:	20000d6c 	.word	0x20000d6c
 8005d24:	20000894 	.word	0x20000894

08005d28 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d32:	4b21      	ldr	r3, [pc, #132]	; (8005db8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d38:	4b20      	ldr	r3, [pc, #128]	; (8005dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fe fc40 	bl	80045c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	d10a      	bne.n	8005d62 <prvAddCurrentTaskToDelayedList+0x3a>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d007      	beq.n	8005d62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d52:	4b1a      	ldr	r3, [pc, #104]	; (8005dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3304      	adds	r3, #4
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4819      	ldr	r0, [pc, #100]	; (8005dc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d5c:	f7fe fbd7 	bl	800450e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d60:	e026      	b.n	8005db0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4413      	add	r3, r2
 8005d68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d6a:	4b14      	ldr	r3, [pc, #80]	; (8005dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d209      	bcs.n	8005d8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d7a:	4b12      	ldr	r3, [pc, #72]	; (8005dc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3304      	adds	r3, #4
 8005d84:	4619      	mov	r1, r3
 8005d86:	4610      	mov	r0, r2
 8005d88:	f7fe fbe4 	bl	8004554 <vListInsert>
}
 8005d8c:	e010      	b.n	8005db0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d8e:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	4b0a      	ldr	r3, [pc, #40]	; (8005dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3304      	adds	r3, #4
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	f7fe fbda 	bl	8004554 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005da0:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d202      	bcs.n	8005db0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005daa:	4a08      	ldr	r2, [pc, #32]	; (8005dcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	6013      	str	r3, [r2, #0]
}
 8005db0:	bf00      	nop
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20000d68 	.word	0x20000d68
 8005dbc:	20000890 	.word	0x20000890
 8005dc0:	20000d50 	.word	0x20000d50
 8005dc4:	20000d20 	.word	0x20000d20
 8005dc8:	20000d1c 	.word	0x20000d1c
 8005dcc:	20000d84 	.word	0x20000d84

08005dd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	; 0x28
 8005dd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005dda:	f000 facb 	bl	8006374 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005dde:	4b1c      	ldr	r3, [pc, #112]	; (8005e50 <xTimerCreateTimerTask+0x80>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d021      	beq.n	8005e2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005dee:	1d3a      	adds	r2, r7, #4
 8005df0:	f107 0108 	add.w	r1, r7, #8
 8005df4:	f107 030c 	add.w	r3, r7, #12
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe fb43 	bl	8004484 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	9202      	str	r2, [sp, #8]
 8005e06:	9301      	str	r3, [sp, #4]
 8005e08:	2302      	movs	r3, #2
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	460a      	mov	r2, r1
 8005e10:	4910      	ldr	r1, [pc, #64]	; (8005e54 <xTimerCreateTimerTask+0x84>)
 8005e12:	4811      	ldr	r0, [pc, #68]	; (8005e58 <xTimerCreateTimerTask+0x88>)
 8005e14:	f7ff f8e4 	bl	8004fe0 <xTaskCreateStatic>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	4a10      	ldr	r2, [pc, #64]	; (8005e5c <xTimerCreateTimerTask+0x8c>)
 8005e1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e1e:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <xTimerCreateTimerTask+0x8c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e26:	2301      	movs	r3, #1
 8005e28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	613b      	str	r3, [r7, #16]
}
 8005e42:	bf00      	nop
 8005e44:	e7fe      	b.n	8005e44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e46:	697b      	ldr	r3, [r7, #20]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20000dc0 	.word	0x20000dc0
 8005e54:	08006c7c 	.word	0x08006c7c
 8005e58:	08005f7d 	.word	0x08005f7d
 8005e5c:	20000dc4 	.word	0x20000dc4

08005e60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08a      	sub	sp, #40	; 0x28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10a      	bne.n	8005e8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	623b      	str	r3, [r7, #32]
}
 8005e8a:	bf00      	nop
 8005e8c:	e7fe      	b.n	8005e8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e8e:	4b1a      	ldr	r3, [pc, #104]	; (8005ef8 <xTimerGenericCommand+0x98>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d02a      	beq.n	8005eec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b05      	cmp	r3, #5
 8005ea6:	dc18      	bgt.n	8005eda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ea8:	f7ff feb2 	bl	8005c10 <xTaskGetSchedulerState>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d109      	bne.n	8005ec6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005eb2:	4b11      	ldr	r3, [pc, #68]	; (8005ef8 <xTimerGenericCommand+0x98>)
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	f107 0110 	add.w	r1, r7, #16
 8005eba:	2300      	movs	r3, #0
 8005ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ebe:	f7fe fcad 	bl	800481c <xQueueGenericSend>
 8005ec2:	6278      	str	r0, [r7, #36]	; 0x24
 8005ec4:	e012      	b.n	8005eec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ec6:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <xTimerGenericCommand+0x98>)
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	f107 0110 	add.w	r1, r7, #16
 8005ece:	2300      	movs	r3, #0
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f7fe fca3 	bl	800481c <xQueueGenericSend>
 8005ed6:	6278      	str	r0, [r7, #36]	; 0x24
 8005ed8:	e008      	b.n	8005eec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005eda:	4b07      	ldr	r3, [pc, #28]	; (8005ef8 <xTimerGenericCommand+0x98>)
 8005edc:	6818      	ldr	r0, [r3, #0]
 8005ede:	f107 0110 	add.w	r1, r7, #16
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	f7fe fd97 	bl	8004a18 <xQueueGenericSendFromISR>
 8005eea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3728      	adds	r7, #40	; 0x28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20000dc0 	.word	0x20000dc0

08005efc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af02      	add	r7, sp, #8
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f06:	4b1c      	ldr	r3, [pc, #112]	; (8005f78 <prvProcessExpiredTimer+0x7c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fe fb55 	bl	80045c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d122      	bne.n	8005f68 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	18d1      	adds	r1, r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	6978      	ldr	r0, [r7, #20]
 8005f30:	f000 f8c8 	bl	80060c4 <prvInsertTimerInActiveList>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d016      	beq.n	8005f68 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	2300      	movs	r3, #0
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	2100      	movs	r1, #0
 8005f44:	6978      	ldr	r0, [r7, #20]
 8005f46:	f7ff ff8b 	bl	8005e60 <xTimerGenericCommand>
 8005f4a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	60fb      	str	r3, [r7, #12]
}
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	6978      	ldr	r0, [r7, #20]
 8005f6e:	4798      	blx	r3
}
 8005f70:	bf00      	nop
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	20000db8 	.word	0x20000db8

08005f7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f84:	f107 0308 	add.w	r3, r7, #8
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 f857 	bl	800603c <prvGetNextExpireTime>
 8005f8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4619      	mov	r1, r3
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 f803 	bl	8005fa0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f9a:	f000 f8d5 	bl	8006148 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f9e:	e7f1      	b.n	8005f84 <prvTimerTask+0x8>

08005fa0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005faa:	f7ff fa4b 	bl	8005444 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fae:	f107 0308 	add.w	r3, r7, #8
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 f866 	bl	8006084 <prvSampleTimeNow>
 8005fb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d130      	bne.n	8006022 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10a      	bne.n	8005fdc <prvProcessTimerOrBlockTask+0x3c>
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d806      	bhi.n	8005fdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005fce:	f7ff fa47 	bl	8005460 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005fd2:	68f9      	ldr	r1, [r7, #12]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7ff ff91 	bl	8005efc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005fda:	e024      	b.n	8006026 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d008      	beq.n	8005ff4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005fe2:	4b13      	ldr	r3, [pc, #76]	; (8006030 <prvProcessTimerOrBlockTask+0x90>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	bf0c      	ite	eq
 8005fec:	2301      	moveq	r3, #1
 8005fee:	2300      	movne	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ff4:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <prvProcessTimerOrBlockTask+0x94>)
 8005ff6:	6818      	ldr	r0, [r3, #0]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	4619      	mov	r1, r3
 8006002:	f7fe ffb9 	bl	8004f78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006006:	f7ff fa2b 	bl	8005460 <xTaskResumeAll>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006010:	4b09      	ldr	r3, [pc, #36]	; (8006038 <prvProcessTimerOrBlockTask+0x98>)
 8006012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	f3bf 8f6f 	isb	sy
}
 8006020:	e001      	b.n	8006026 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006022:	f7ff fa1d 	bl	8005460 <xTaskResumeAll>
}
 8006026:	bf00      	nop
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	20000dbc 	.word	0x20000dbc
 8006034:	20000dc0 	.word	0x20000dc0
 8006038:	e000ed04 	.word	0xe000ed04

0800603c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006044:	4b0e      	ldr	r3, [pc, #56]	; (8006080 <prvGetNextExpireTime+0x44>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	bf0c      	ite	eq
 800604e:	2301      	moveq	r3, #1
 8006050:	2300      	movne	r3, #0
 8006052:	b2db      	uxtb	r3, r3
 8006054:	461a      	mov	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d105      	bne.n	800606e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006062:	4b07      	ldr	r3, [pc, #28]	; (8006080 <prvGetNextExpireTime+0x44>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	e001      	b.n	8006072 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006072:	68fb      	ldr	r3, [r7, #12]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	bc80      	pop	{r7}
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20000db8 	.word	0x20000db8

08006084 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800608c:	f7ff fa86 	bl	800559c <xTaskGetTickCount>
 8006090:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006092:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <prvSampleTimeNow+0x3c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	429a      	cmp	r2, r3
 800609a:	d205      	bcs.n	80060a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800609c:	f000 f908 	bl	80062b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	e002      	b.n	80060ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80060ae:	4a04      	ldr	r2, [pc, #16]	; (80060c0 <prvSampleTimeNow+0x3c>)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80060b4:	68fb      	ldr	r3, [r7, #12]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20000dc8 	.word	0x20000dc8

080060c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d812      	bhi.n	8006110 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	1ad2      	subs	r2, r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d302      	bcc.n	80060fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80060f8:	2301      	movs	r3, #1
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	e01b      	b.n	8006136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060fe:	4b10      	ldr	r3, [pc, #64]	; (8006140 <prvInsertTimerInActiveList+0x7c>)
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	3304      	adds	r3, #4
 8006106:	4619      	mov	r1, r3
 8006108:	4610      	mov	r0, r2
 800610a:	f7fe fa23 	bl	8004554 <vListInsert>
 800610e:	e012      	b.n	8006136 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	429a      	cmp	r2, r3
 8006116:	d206      	bcs.n	8006126 <prvInsertTimerInActiveList+0x62>
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d302      	bcc.n	8006126 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006120:	2301      	movs	r3, #1
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	e007      	b.n	8006136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006126:	4b07      	ldr	r3, [pc, #28]	; (8006144 <prvInsertTimerInActiveList+0x80>)
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3304      	adds	r3, #4
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f7fe fa0f 	bl	8004554 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006136:	697b      	ldr	r3, [r7, #20]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20000dbc 	.word	0x20000dbc
 8006144:	20000db8 	.word	0x20000db8

08006148 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08e      	sub	sp, #56	; 0x38
 800614c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800614e:	e09d      	b.n	800628c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	da18      	bge.n	8006188 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006156:	1d3b      	adds	r3, r7, #4
 8006158:	3304      	adds	r3, #4
 800615a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10a      	bne.n	8006178 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	61fb      	str	r3, [r7, #28]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800617e:	6850      	ldr	r0, [r2, #4]
 8006180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006182:	6892      	ldr	r2, [r2, #8]
 8006184:	4611      	mov	r1, r2
 8006186:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	db7e      	blt.n	800628c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d004      	beq.n	80061a4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	3304      	adds	r3, #4
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fa10 	bl	80045c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061a4:	463b      	mov	r3, r7
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff ff6c 	bl	8006084 <prvSampleTimeNow>
 80061ac:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b09      	cmp	r3, #9
 80061b2:	d86a      	bhi.n	800628a <prvProcessReceivedCommands+0x142>
 80061b4:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <prvProcessReceivedCommands+0x74>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	080061e5 	.word	0x080061e5
 80061c0:	080061e5 	.word	0x080061e5
 80061c4:	080061e5 	.word	0x080061e5
 80061c8:	0800628d 	.word	0x0800628d
 80061cc:	08006241 	.word	0x08006241
 80061d0:	08006279 	.word	0x08006279
 80061d4:	080061e5 	.word	0x080061e5
 80061d8:	080061e5 	.word	0x080061e5
 80061dc:	0800628d 	.word	0x0800628d
 80061e0:	08006241 	.word	0x08006241
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	18d1      	adds	r1, r2, r3
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f2:	f7ff ff67 	bl	80060c4 <prvInsertTimerInActiveList>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d047      	beq.n	800628c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006202:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d13f      	bne.n	800628c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	441a      	add	r2, r3
 8006214:	2300      	movs	r3, #0
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	2300      	movs	r3, #0
 800621a:	2100      	movs	r1, #0
 800621c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800621e:	f7ff fe1f 	bl	8005e60 <xTimerGenericCommand>
 8006222:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d130      	bne.n	800628c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	61bb      	str	r3, [r7, #24]
}
 800623c:	bf00      	nop
 800623e:	e7fe      	b.n	800623e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10a      	bne.n	8006264 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	617b      	str	r3, [r7, #20]
}
 8006260:	bf00      	nop
 8006262:	e7fe      	b.n	8006262 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006266:	699a      	ldr	r2, [r3, #24]
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	18d1      	adds	r1, r2, r3
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006272:	f7ff ff27 	bl	80060c4 <prvInsertTimerInActiveList>
					break;
 8006276:	e009      	b.n	800628c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d104      	bne.n	800628c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006284:	f000 fb6e 	bl	8006964 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006288:	e000      	b.n	800628c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800628a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800628c:	4b07      	ldr	r3, [pc, #28]	; (80062ac <prvProcessReceivedCommands+0x164>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	1d39      	adds	r1, r7, #4
 8006292:	2200      	movs	r2, #0
 8006294:	4618      	mov	r0, r3
 8006296:	f7fe fc57 	bl	8004b48 <xQueueReceive>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	f47f af57 	bne.w	8006150 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80062a2:	bf00      	nop
 80062a4:	bf00      	nop
 80062a6:	3730      	adds	r7, #48	; 0x30
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000dc0 	.word	0x20000dc0

080062b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b088      	sub	sp, #32
 80062b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062b6:	e045      	b.n	8006344 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062b8:	4b2c      	ldr	r3, [pc, #176]	; (800636c <prvSwitchTimerLists+0xbc>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062c2:	4b2a      	ldr	r3, [pc, #168]	; (800636c <prvSwitchTimerLists+0xbc>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3304      	adds	r3, #4
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fe f977 	bl	80045c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d12e      	bne.n	8006344 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4413      	add	r3, r2
 80062ee:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d90e      	bls.n	8006316 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006304:	4b19      	ldr	r3, [pc, #100]	; (800636c <prvSwitchTimerLists+0xbc>)
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3304      	adds	r3, #4
 800630c:	4619      	mov	r1, r3
 800630e:	4610      	mov	r0, r2
 8006310:	f7fe f920 	bl	8004554 <vListInsert>
 8006314:	e016      	b.n	8006344 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006316:	2300      	movs	r3, #0
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	2300      	movs	r3, #0
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	2100      	movs	r1, #0
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f7ff fd9d 	bl	8005e60 <xTimerGenericCommand>
 8006326:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <prvSwitchTimerLists+0x94>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	603b      	str	r3, [r7, #0]
}
 8006340:	bf00      	nop
 8006342:	e7fe      	b.n	8006342 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006344:	4b09      	ldr	r3, [pc, #36]	; (800636c <prvSwitchTimerLists+0xbc>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1b4      	bne.n	80062b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800634e:	4b07      	ldr	r3, [pc, #28]	; (800636c <prvSwitchTimerLists+0xbc>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006354:	4b06      	ldr	r3, [pc, #24]	; (8006370 <prvSwitchTimerLists+0xc0>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a04      	ldr	r2, [pc, #16]	; (800636c <prvSwitchTimerLists+0xbc>)
 800635a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800635c:	4a04      	ldr	r2, [pc, #16]	; (8006370 <prvSwitchTimerLists+0xc0>)
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	6013      	str	r3, [r2, #0]
}
 8006362:	bf00      	nop
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20000db8 	.word	0x20000db8
 8006370:	20000dbc 	.word	0x20000dbc

08006374 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800637a:	f000 f92f 	bl	80065dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800637e:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <prvCheckForValidListAndQueue+0x60>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d120      	bne.n	80063c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006386:	4814      	ldr	r0, [pc, #80]	; (80063d8 <prvCheckForValidListAndQueue+0x64>)
 8006388:	f7fe f896 	bl	80044b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800638c:	4813      	ldr	r0, [pc, #76]	; (80063dc <prvCheckForValidListAndQueue+0x68>)
 800638e:	f7fe f893 	bl	80044b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006392:	4b13      	ldr	r3, [pc, #76]	; (80063e0 <prvCheckForValidListAndQueue+0x6c>)
 8006394:	4a10      	ldr	r2, [pc, #64]	; (80063d8 <prvCheckForValidListAndQueue+0x64>)
 8006396:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006398:	4b12      	ldr	r3, [pc, #72]	; (80063e4 <prvCheckForValidListAndQueue+0x70>)
 800639a:	4a10      	ldr	r2, [pc, #64]	; (80063dc <prvCheckForValidListAndQueue+0x68>)
 800639c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800639e:	2300      	movs	r3, #0
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <prvCheckForValidListAndQueue+0x74>)
 80063a4:	4a11      	ldr	r2, [pc, #68]	; (80063ec <prvCheckForValidListAndQueue+0x78>)
 80063a6:	2110      	movs	r1, #16
 80063a8:	200a      	movs	r0, #10
 80063aa:	f7fe f99d 	bl	80046e8 <xQueueGenericCreateStatic>
 80063ae:	4603      	mov	r3, r0
 80063b0:	4a08      	ldr	r2, [pc, #32]	; (80063d4 <prvCheckForValidListAndQueue+0x60>)
 80063b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80063b4:	4b07      	ldr	r3, [pc, #28]	; (80063d4 <prvCheckForValidListAndQueue+0x60>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d005      	beq.n	80063c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80063bc:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <prvCheckForValidListAndQueue+0x60>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	490b      	ldr	r1, [pc, #44]	; (80063f0 <prvCheckForValidListAndQueue+0x7c>)
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fe fdb0 	bl	8004f28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063c8:	f000 f938 	bl	800663c <vPortExitCritical>
}
 80063cc:	bf00      	nop
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20000dc0 	.word	0x20000dc0
 80063d8:	20000d90 	.word	0x20000d90
 80063dc:	20000da4 	.word	0x20000da4
 80063e0:	20000db8 	.word	0x20000db8
 80063e4:	20000dbc 	.word	0x20000dbc
 80063e8:	20000e6c 	.word	0x20000e6c
 80063ec:	20000dcc 	.word	0x20000dcc
 80063f0:	08006c84 	.word	0x08006c84

080063f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3b04      	subs	r3, #4
 8006404:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800640c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3b04      	subs	r3, #4
 8006412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f023 0201 	bic.w	r2, r3, #1
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	3b04      	subs	r3, #4
 8006422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006424:	4a08      	ldr	r2, [pc, #32]	; (8006448 <pxPortInitialiseStack+0x54>)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3b14      	subs	r3, #20
 800642e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3b20      	subs	r3, #32
 800643a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800643c:	68fb      	ldr	r3, [r7, #12]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr
 8006448:	0800644d 	.word	0x0800644d

0800644c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006452:	2300      	movs	r3, #0
 8006454:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006456:	4b12      	ldr	r3, [pc, #72]	; (80064a0 <prvTaskExitError+0x54>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645e:	d00a      	beq.n	8006476 <prvTaskExitError+0x2a>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	60fb      	str	r3, [r7, #12]
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <prvTaskExitError+0x28>
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	60bb      	str	r3, [r7, #8]
}
 8006488:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800648a:	bf00      	nop
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0fc      	beq.n	800648c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006492:	bf00      	nop
 8006494:	bf00      	nop
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	bc80      	pop	{r7}
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	20000024 	.word	0x20000024
	...

080064b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064b0:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <pxCurrentTCBConst2>)
 80064b2:	6819      	ldr	r1, [r3, #0]
 80064b4:	6808      	ldr	r0, [r1, #0]
 80064b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064ba:	f380 8809 	msr	PSP, r0
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f04f 0000 	mov.w	r0, #0
 80064c6:	f380 8811 	msr	BASEPRI, r0
 80064ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80064ce:	4770      	bx	lr

080064d0 <pxCurrentTCBConst2>:
 80064d0:	20000890 	.word	0x20000890
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop

080064d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80064d8:	4806      	ldr	r0, [pc, #24]	; (80064f4 <prvPortStartFirstTask+0x1c>)
 80064da:	6800      	ldr	r0, [r0, #0]
 80064dc:	6800      	ldr	r0, [r0, #0]
 80064de:	f380 8808 	msr	MSP, r0
 80064e2:	b662      	cpsie	i
 80064e4:	b661      	cpsie	f
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	df00      	svc	0
 80064f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064f2:	bf00      	nop
 80064f4:	e000ed08 	.word	0xe000ed08

080064f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064fe:	4b32      	ldr	r3, [pc, #200]	; (80065c8 <xPortStartScheduler+0xd0>)
 8006500:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	b2db      	uxtb	r3, r3
 8006508:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	22ff      	movs	r2, #255	; 0xff
 800650e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	b2db      	uxtb	r3, r3
 800651c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006520:	b2da      	uxtb	r2, r3
 8006522:	4b2a      	ldr	r3, [pc, #168]	; (80065cc <xPortStartScheduler+0xd4>)
 8006524:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006526:	4b2a      	ldr	r3, [pc, #168]	; (80065d0 <xPortStartScheduler+0xd8>)
 8006528:	2207      	movs	r2, #7
 800652a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800652c:	e009      	b.n	8006542 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800652e:	4b28      	ldr	r3, [pc, #160]	; (80065d0 <xPortStartScheduler+0xd8>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3b01      	subs	r3, #1
 8006534:	4a26      	ldr	r2, [pc, #152]	; (80065d0 <xPortStartScheduler+0xd8>)
 8006536:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	b2db      	uxtb	r3, r3
 8006540:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006542:	78fb      	ldrb	r3, [r7, #3]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654a:	2b80      	cmp	r3, #128	; 0x80
 800654c:	d0ef      	beq.n	800652e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800654e:	4b20      	ldr	r3, [pc, #128]	; (80065d0 <xPortStartScheduler+0xd8>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f1c3 0307 	rsb	r3, r3, #7
 8006556:	2b04      	cmp	r3, #4
 8006558:	d00a      	beq.n	8006570 <xPortStartScheduler+0x78>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	60bb      	str	r3, [r7, #8]
}
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006570:	4b17      	ldr	r3, [pc, #92]	; (80065d0 <xPortStartScheduler+0xd8>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	021b      	lsls	r3, r3, #8
 8006576:	4a16      	ldr	r2, [pc, #88]	; (80065d0 <xPortStartScheduler+0xd8>)
 8006578:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800657a:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <xPortStartScheduler+0xd8>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006582:	4a13      	ldr	r2, [pc, #76]	; (80065d0 <xPortStartScheduler+0xd8>)
 8006584:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	b2da      	uxtb	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800658e:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <xPortStartScheduler+0xdc>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a10      	ldr	r2, [pc, #64]	; (80065d4 <xPortStartScheduler+0xdc>)
 8006594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006598:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800659a:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <xPortStartScheduler+0xdc>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a0d      	ldr	r2, [pc, #52]	; (80065d4 <xPortStartScheduler+0xdc>)
 80065a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80065a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065a6:	f000 f8b9 	bl	800671c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065aa:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <xPortStartScheduler+0xe0>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065b0:	f7ff ff92 	bl	80064d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065b4:	f7ff f8be 	bl	8005734 <vTaskSwitchContext>
	prvTaskExitError();
 80065b8:	f7ff ff48 	bl	800644c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	e000e400 	.word	0xe000e400
 80065cc:	20000ebc 	.word	0x20000ebc
 80065d0:	20000ec0 	.word	0x20000ec0
 80065d4:	e000ed20 	.word	0xe000ed20
 80065d8:	20000024 	.word	0x20000024

080065dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
	__asm volatile
 80065e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	607b      	str	r3, [r7, #4]
}
 80065f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065f6:	4b0f      	ldr	r3, [pc, #60]	; (8006634 <vPortEnterCritical+0x58>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3301      	adds	r3, #1
 80065fc:	4a0d      	ldr	r2, [pc, #52]	; (8006634 <vPortEnterCritical+0x58>)
 80065fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006600:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <vPortEnterCritical+0x58>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d10f      	bne.n	8006628 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006608:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <vPortEnterCritical+0x5c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <vPortEnterCritical+0x4c>
	__asm volatile
 8006612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	603b      	str	r3, [r7, #0]
}
 8006624:	bf00      	nop
 8006626:	e7fe      	b.n	8006626 <vPortEnterCritical+0x4a>
	}
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	bc80      	pop	{r7}
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	20000024 	.word	0x20000024
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006642:	4b11      	ldr	r3, [pc, #68]	; (8006688 <vPortExitCritical+0x4c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10a      	bne.n	8006660 <vPortExitCritical+0x24>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	607b      	str	r3, [r7, #4]
}
 800665c:	bf00      	nop
 800665e:	e7fe      	b.n	800665e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006660:	4b09      	ldr	r3, [pc, #36]	; (8006688 <vPortExitCritical+0x4c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3b01      	subs	r3, #1
 8006666:	4a08      	ldr	r2, [pc, #32]	; (8006688 <vPortExitCritical+0x4c>)
 8006668:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800666a:	4b07      	ldr	r3, [pc, #28]	; (8006688 <vPortExitCritical+0x4c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d105      	bne.n	800667e <vPortExitCritical+0x42>
 8006672:	2300      	movs	r3, #0
 8006674:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	f383 8811 	msr	BASEPRI, r3
}
 800667c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	bc80      	pop	{r7}
 8006686:	4770      	bx	lr
 8006688:	20000024 	.word	0x20000024
 800668c:	00000000 	.word	0x00000000

08006690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006690:	f3ef 8009 	mrs	r0, PSP
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <pxCurrentTCBConst>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066a0:	6010      	str	r0, [r2, #0]
 80066a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80066a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066aa:	f380 8811 	msr	BASEPRI, r0
 80066ae:	f7ff f841 	bl	8005734 <vTaskSwitchContext>
 80066b2:	f04f 0000 	mov.w	r0, #0
 80066b6:	f380 8811 	msr	BASEPRI, r0
 80066ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80066be:	6819      	ldr	r1, [r3, #0]
 80066c0:	6808      	ldr	r0, [r1, #0]
 80066c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066c6:	f380 8809 	msr	PSP, r0
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	4770      	bx	lr

080066d0 <pxCurrentTCBConst>:
 80066d0:	20000890 	.word	0x20000890
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
}
 80066f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066f2:	f7fe ff61 	bl	80055b8 <xTaskIncrementTick>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <SysTick_Handler+0x40>)
 80066fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	2300      	movs	r3, #0
 8006706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f383 8811 	msr	BASEPRI, r3
}
 800670e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006720:	4b0a      	ldr	r3, [pc, #40]	; (800674c <vPortSetupTimerInterrupt+0x30>)
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006726:	4b0a      	ldr	r3, [pc, #40]	; (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800672c:	4b09      	ldr	r3, [pc, #36]	; (8006754 <vPortSetupTimerInterrupt+0x38>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a09      	ldr	r2, [pc, #36]	; (8006758 <vPortSetupTimerInterrupt+0x3c>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	099b      	lsrs	r3, r3, #6
 8006738:	4a08      	ldr	r2, [pc, #32]	; (800675c <vPortSetupTimerInterrupt+0x40>)
 800673a:	3b01      	subs	r3, #1
 800673c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800673e:	4b03      	ldr	r3, [pc, #12]	; (800674c <vPortSetupTimerInterrupt+0x30>)
 8006740:	2207      	movs	r2, #7
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	46bd      	mov	sp, r7
 8006748:	bc80      	pop	{r7}
 800674a:	4770      	bx	lr
 800674c:	e000e010 	.word	0xe000e010
 8006750:	e000e018 	.word	0xe000e018
 8006754:	20000018 	.word	0x20000018
 8006758:	10624dd3 	.word	0x10624dd3
 800675c:	e000e014 	.word	0xe000e014

08006760 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006766:	f3ef 8305 	mrs	r3, IPSR
 800676a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b0f      	cmp	r3, #15
 8006770:	d914      	bls.n	800679c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006772:	4a16      	ldr	r2, [pc, #88]	; (80067cc <vPortValidateInterruptPriority+0x6c>)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800677c:	4b14      	ldr	r3, [pc, #80]	; (80067d0 <vPortValidateInterruptPriority+0x70>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	7afa      	ldrb	r2, [r7, #11]
 8006782:	429a      	cmp	r2, r3
 8006784:	d20a      	bcs.n	800679c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	607b      	str	r3, [r7, #4]
}
 8006798:	bf00      	nop
 800679a:	e7fe      	b.n	800679a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800679c:	4b0d      	ldr	r3, [pc, #52]	; (80067d4 <vPortValidateInterruptPriority+0x74>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067a4:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <vPortValidateInterruptPriority+0x78>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d90a      	bls.n	80067c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	603b      	str	r3, [r7, #0]
}
 80067be:	bf00      	nop
 80067c0:	e7fe      	b.n	80067c0 <vPortValidateInterruptPriority+0x60>
	}
 80067c2:	bf00      	nop
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bc80      	pop	{r7}
 80067ca:	4770      	bx	lr
 80067cc:	e000e3f0 	.word	0xe000e3f0
 80067d0:	20000ebc 	.word	0x20000ebc
 80067d4:	e000ed0c 	.word	0xe000ed0c
 80067d8:	20000ec0 	.word	0x20000ec0

080067dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08a      	sub	sp, #40	; 0x28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067e4:	2300      	movs	r3, #0
 80067e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067e8:	f7fe fe2c 	bl	8005444 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067ec:	4b58      	ldr	r3, [pc, #352]	; (8006950 <pvPortMalloc+0x174>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067f4:	f000 f910 	bl	8006a18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067f8:	4b56      	ldr	r3, [pc, #344]	; (8006954 <pvPortMalloc+0x178>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4013      	ands	r3, r2
 8006800:	2b00      	cmp	r3, #0
 8006802:	f040 808e 	bne.w	8006922 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01d      	beq.n	8006848 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800680c:	2208      	movs	r2, #8
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4413      	add	r3, r2
 8006812:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	2b00      	cmp	r3, #0
 800681c:	d014      	beq.n	8006848 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f023 0307 	bic.w	r3, r3, #7
 8006824:	3308      	adds	r3, #8
 8006826:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <pvPortMalloc+0x6c>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	617b      	str	r3, [r7, #20]
}
 8006844:	bf00      	nop
 8006846:	e7fe      	b.n	8006846 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d069      	beq.n	8006922 <pvPortMalloc+0x146>
 800684e:	4b42      	ldr	r3, [pc, #264]	; (8006958 <pvPortMalloc+0x17c>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	429a      	cmp	r2, r3
 8006856:	d864      	bhi.n	8006922 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006858:	4b40      	ldr	r3, [pc, #256]	; (800695c <pvPortMalloc+0x180>)
 800685a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800685c:	4b3f      	ldr	r3, [pc, #252]	; (800695c <pvPortMalloc+0x180>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006862:	e004      	b.n	800686e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	429a      	cmp	r2, r3
 8006876:	d903      	bls.n	8006880 <pvPortMalloc+0xa4>
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1f1      	bne.n	8006864 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006880:	4b33      	ldr	r3, [pc, #204]	; (8006950 <pvPortMalloc+0x174>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006886:	429a      	cmp	r2, r3
 8006888:	d04b      	beq.n	8006922 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2208      	movs	r2, #8
 8006890:	4413      	add	r3, r2
 8006892:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	1ad2      	subs	r2, r2, r3
 80068a4:	2308      	movs	r3, #8
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d91f      	bls.n	80068ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4413      	add	r3, r2
 80068b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <pvPortMalloc+0xf8>
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	613b      	str	r3, [r7, #16]
}
 80068d0:	bf00      	nop
 80068d2:	e7fe      	b.n	80068d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	1ad2      	subs	r2, r2, r3
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068e6:	69b8      	ldr	r0, [r7, #24]
 80068e8:	f000 f8f8 	bl	8006adc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068ec:	4b1a      	ldr	r3, [pc, #104]	; (8006958 <pvPortMalloc+0x17c>)
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	4a18      	ldr	r2, [pc, #96]	; (8006958 <pvPortMalloc+0x17c>)
 80068f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068fa:	4b17      	ldr	r3, [pc, #92]	; (8006958 <pvPortMalloc+0x17c>)
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	4b18      	ldr	r3, [pc, #96]	; (8006960 <pvPortMalloc+0x184>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d203      	bcs.n	800690e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006906:	4b14      	ldr	r3, [pc, #80]	; (8006958 <pvPortMalloc+0x17c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a15      	ldr	r2, [pc, #84]	; (8006960 <pvPortMalloc+0x184>)
 800690c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	4b10      	ldr	r3, [pc, #64]	; (8006954 <pvPortMalloc+0x178>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	431a      	orrs	r2, r3
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006922:	f7fe fd9d 	bl	8005460 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00a      	beq.n	8006946 <pvPortMalloc+0x16a>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	60fb      	str	r3, [r7, #12]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <pvPortMalloc+0x168>
	return pvReturn;
 8006946:	69fb      	ldr	r3, [r7, #28]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3728      	adds	r7, #40	; 0x28
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	20001acc 	.word	0x20001acc
 8006954:	20001ad8 	.word	0x20001ad8
 8006958:	20001ad0 	.word	0x20001ad0
 800695c:	20001ac4 	.word	0x20001ac4
 8006960:	20001ad4 	.word	0x20001ad4

08006964 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d048      	beq.n	8006a08 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006976:	2308      	movs	r3, #8
 8006978:	425b      	negs	r3, r3
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	4413      	add	r3, r2
 800697e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	4b21      	ldr	r3, [pc, #132]	; (8006a10 <vPortFree+0xac>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4013      	ands	r3, r2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10a      	bne.n	80069a8 <vPortFree+0x44>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	60fb      	str	r3, [r7, #12]
}
 80069a4:	bf00      	nop
 80069a6:	e7fe      	b.n	80069a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00a      	beq.n	80069c6 <vPortFree+0x62>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	60bb      	str	r3, [r7, #8]
}
 80069c2:	bf00      	nop
 80069c4:	e7fe      	b.n	80069c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	4b11      	ldr	r3, [pc, #68]	; (8006a10 <vPortFree+0xac>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4013      	ands	r3, r2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d019      	beq.n	8006a08 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d115      	bne.n	8006a08 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <vPortFree+0xac>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	43db      	mvns	r3, r3
 80069e6:	401a      	ands	r2, r3
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069ec:	f7fe fd2a 	bl	8005444 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	4b07      	ldr	r3, [pc, #28]	; (8006a14 <vPortFree+0xb0>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4413      	add	r3, r2
 80069fa:	4a06      	ldr	r2, [pc, #24]	; (8006a14 <vPortFree+0xb0>)
 80069fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069fe:	6938      	ldr	r0, [r7, #16]
 8006a00:	f000 f86c 	bl	8006adc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a04:	f7fe fd2c 	bl	8005460 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a08:	bf00      	nop
 8006a0a:	3718      	adds	r7, #24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20001ad8 	.word	0x20001ad8
 8006a14:	20001ad0 	.word	0x20001ad0

08006a18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006a22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a24:	4b27      	ldr	r3, [pc, #156]	; (8006ac4 <prvHeapInit+0xac>)
 8006a26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00c      	beq.n	8006a4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	3307      	adds	r3, #7
 8006a36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0307 	bic.w	r3, r3, #7
 8006a3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	4a1f      	ldr	r2, [pc, #124]	; (8006ac4 <prvHeapInit+0xac>)
 8006a48:	4413      	add	r3, r2
 8006a4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a50:	4a1d      	ldr	r2, [pc, #116]	; (8006ac8 <prvHeapInit+0xb0>)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a56:	4b1c      	ldr	r3, [pc, #112]	; (8006ac8 <prvHeapInit+0xb0>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	4413      	add	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a64:	2208      	movs	r2, #8
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	1a9b      	subs	r3, r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 0307 	bic.w	r3, r3, #7
 8006a72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4a15      	ldr	r2, [pc, #84]	; (8006acc <prvHeapInit+0xb4>)
 8006a78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a7a:	4b14      	ldr	r3, [pc, #80]	; (8006acc <prvHeapInit+0xb4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a82:	4b12      	ldr	r3, [pc, #72]	; (8006acc <prvHeapInit+0xb4>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2200      	movs	r2, #0
 8006a88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	1ad2      	subs	r2, r2, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a98:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <prvHeapInit+0xb4>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	4a0a      	ldr	r2, [pc, #40]	; (8006ad0 <prvHeapInit+0xb8>)
 8006aa6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	4a09      	ldr	r2, [pc, #36]	; (8006ad4 <prvHeapInit+0xbc>)
 8006aae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ab0:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <prvHeapInit+0xc0>)
 8006ab2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ab6:	601a      	str	r2, [r3, #0]
}
 8006ab8:	bf00      	nop
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bc80      	pop	{r7}
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	20000ec4 	.word	0x20000ec4
 8006ac8:	20001ac4 	.word	0x20001ac4
 8006acc:	20001acc 	.word	0x20001acc
 8006ad0:	20001ad4 	.word	0x20001ad4
 8006ad4:	20001ad0 	.word	0x20001ad0
 8006ad8:	20001ad8 	.word	0x20001ad8

08006adc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ae4:	4b27      	ldr	r3, [pc, #156]	; (8006b84 <prvInsertBlockIntoFreeList+0xa8>)
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	e002      	b.n	8006af0 <prvInsertBlockIntoFreeList+0x14>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d8f7      	bhi.n	8006aea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	4413      	add	r3, r2
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d108      	bne.n	8006b1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	441a      	add	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	441a      	add	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d118      	bne.n	8006b64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	4b14      	ldr	r3, [pc, #80]	; (8006b88 <prvInsertBlockIntoFreeList+0xac>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d00d      	beq.n	8006b5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	441a      	add	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	e008      	b.n	8006b6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b5a:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <prvInsertBlockIntoFreeList+0xac>)
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	e003      	b.n	8006b6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d002      	beq.n	8006b7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b7a:	bf00      	nop
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr
 8006b84:	20001ac4 	.word	0x20001ac4
 8006b88:	20001acc 	.word	0x20001acc

08006b8c <memset>:
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	4402      	add	r2, r0
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d100      	bne.n	8006b96 <memset+0xa>
 8006b94:	4770      	bx	lr
 8006b96:	f803 1b01 	strb.w	r1, [r3], #1
 8006b9a:	e7f9      	b.n	8006b90 <memset+0x4>

08006b9c <__libc_init_array>:
 8006b9c:	b570      	push	{r4, r5, r6, lr}
 8006b9e:	2600      	movs	r6, #0
 8006ba0:	4d0c      	ldr	r5, [pc, #48]	; (8006bd4 <__libc_init_array+0x38>)
 8006ba2:	4c0d      	ldr	r4, [pc, #52]	; (8006bd8 <__libc_init_array+0x3c>)
 8006ba4:	1b64      	subs	r4, r4, r5
 8006ba6:	10a4      	asrs	r4, r4, #2
 8006ba8:	42a6      	cmp	r6, r4
 8006baa:	d109      	bne.n	8006bc0 <__libc_init_array+0x24>
 8006bac:	f000 f828 	bl	8006c00 <_init>
 8006bb0:	2600      	movs	r6, #0
 8006bb2:	4d0a      	ldr	r5, [pc, #40]	; (8006bdc <__libc_init_array+0x40>)
 8006bb4:	4c0a      	ldr	r4, [pc, #40]	; (8006be0 <__libc_init_array+0x44>)
 8006bb6:	1b64      	subs	r4, r4, r5
 8006bb8:	10a4      	asrs	r4, r4, #2
 8006bba:	42a6      	cmp	r6, r4
 8006bbc:	d105      	bne.n	8006bca <__libc_init_array+0x2e>
 8006bbe:	bd70      	pop	{r4, r5, r6, pc}
 8006bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc4:	4798      	blx	r3
 8006bc6:	3601      	adds	r6, #1
 8006bc8:	e7ee      	b.n	8006ba8 <__libc_init_array+0xc>
 8006bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bce:	4798      	blx	r3
 8006bd0:	3601      	adds	r6, #1
 8006bd2:	e7f2      	b.n	8006bba <__libc_init_array+0x1e>
 8006bd4:	08006d04 	.word	0x08006d04
 8006bd8:	08006d04 	.word	0x08006d04
 8006bdc:	08006d04 	.word	0x08006d04
 8006be0:	08006d08 	.word	0x08006d08

08006be4 <memcpy>:
 8006be4:	440a      	add	r2, r1
 8006be6:	4291      	cmp	r1, r2
 8006be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bec:	d100      	bne.n	8006bf0 <memcpy+0xc>
 8006bee:	4770      	bx	lr
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bf6:	4291      	cmp	r1, r2
 8006bf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bfc:	d1f9      	bne.n	8006bf2 <memcpy+0xe>
 8006bfe:	bd10      	pop	{r4, pc}

08006c00 <_init>:
 8006c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c02:	bf00      	nop
 8006c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c06:	bc08      	pop	{r3}
 8006c08:	469e      	mov	lr, r3
 8006c0a:	4770      	bx	lr

08006c0c <_fini>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	bf00      	nop
 8006c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c12:	bc08      	pop	{r3}
 8006c14:	469e      	mov	lr, r3
 8006c16:	4770      	bx	lr
