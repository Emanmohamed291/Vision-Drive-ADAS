
servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e68  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005f78  08005f78  00006f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006034  08006034  00008028  2**0
                  CONTENTS
  4 .ARM          00000000  08006034  08006034  00008028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006034  08006034  00008028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006034  08006034  00007034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006038  08006038  00007038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  0800603c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a90  20000028  08006064  00008028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ab8  08006064  00008ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ed3  00000000  00000000  00008051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a63  00000000  00000000  0001ef24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  00022988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f63  00000000  00000000  00023d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019891  00000000  00000000  00024ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019fc2  00000000  00000000  0003e574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093b78  00000000  00000000  00058536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec0ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005154  00000000  00000000  000ec0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000f1248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000028 	.word	0x20000028
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f60 	.word	0x08005f60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000002c 	.word	0x2000002c
 800014c:	08005f60 	.word	0x08005f60

08000150 <DCMotor_Start>:
/****************************/

/*APIs Implementation*/

DCMotorErrorStatus_t DCMotor_Start(uint32_t Copy_u32DCMotor)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 8000158:	2300      	movs	r3, #0
 800015a:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2b01      	cmp	r3, #1
 8000160:	d902      	bls.n	8000168 <DCMotor_Start+0x18>
    {
    	Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000162:	2301      	movs	r3, #1
 8000164:	73fb      	strb	r3, [r7, #15]
 8000166:	e05a      	b.n	800021e <DCMotor_Start+0xce>
    }
    else
    {
    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 8000168:	492f      	ldr	r1, [pc, #188]	@ (8000228 <DCMotor_Start+0xd8>)
 800016a:	687a      	ldr	r2, [r7, #4]
 800016c:	4613      	mov	r3, r2
 800016e:	009b      	lsls	r3, r3, #2
 8000170:	4413      	add	r3, r2
 8000172:	009b      	lsls	r3, r3, #2
 8000174:	440b      	add	r3, r1
 8000176:	3310      	adds	r3, #16
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	2b02      	cmp	r3, #2
 800017c:	d14d      	bne.n	800021a <DCMotor_Start+0xca>
    		case Timer_2:
    		    __HAL_TIM_SET_COMPARE(&htim2,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    			HAL_TIM_PWM_Start(&htim2, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		case Timer_3:
    		    __HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 800017e:	492a      	ldr	r1, [pc, #168]	@ (8000228 <DCMotor_Start+0xd8>)
 8000180:	687a      	ldr	r2, [r7, #4]
 8000182:	4613      	mov	r3, r2
 8000184:	009b      	lsls	r3, r3, #2
 8000186:	4413      	add	r3, r2
 8000188:	009b      	lsls	r3, r3, #2
 800018a:	440b      	add	r3, r1
 800018c:	3311      	adds	r3, #17
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d107      	bne.n	80001a4 <DCMotor_Start+0x54>
 8000194:	4b25      	ldr	r3, [pc, #148]	@ (800022c <DCMotor_Start+0xdc>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4925      	ldr	r1, [pc, #148]	@ (8000230 <DCMotor_Start+0xe0>)
 800019a:	687a      	ldr	r2, [r7, #4]
 800019c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80001a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80001a2:	e02c      	b.n	80001fe <DCMotor_Start+0xae>
 80001a4:	4920      	ldr	r1, [pc, #128]	@ (8000228 <DCMotor_Start+0xd8>)
 80001a6:	687a      	ldr	r2, [r7, #4]
 80001a8:	4613      	mov	r3, r2
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	4413      	add	r3, r2
 80001ae:	009b      	lsls	r3, r3, #2
 80001b0:	440b      	add	r3, r1
 80001b2:	3311      	adds	r3, #17
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	2b04      	cmp	r3, #4
 80001b8:	d107      	bne.n	80001ca <DCMotor_Start+0x7a>
 80001ba:	4b1c      	ldr	r3, [pc, #112]	@ (800022c <DCMotor_Start+0xdc>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	491c      	ldr	r1, [pc, #112]	@ (8000230 <DCMotor_Start+0xe0>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001c6:	6393      	str	r3, [r2, #56]	@ 0x38
 80001c8:	e019      	b.n	80001fe <DCMotor_Start+0xae>
 80001ca:	4917      	ldr	r1, [pc, #92]	@ (8000228 <DCMotor_Start+0xd8>)
 80001cc:	687a      	ldr	r2, [r7, #4]
 80001ce:	4613      	mov	r3, r2
 80001d0:	009b      	lsls	r3, r3, #2
 80001d2:	4413      	add	r3, r2
 80001d4:	009b      	lsls	r3, r3, #2
 80001d6:	440b      	add	r3, r1
 80001d8:	3311      	adds	r3, #17
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	2b08      	cmp	r3, #8
 80001de:	d107      	bne.n	80001f0 <DCMotor_Start+0xa0>
 80001e0:	4b12      	ldr	r3, [pc, #72]	@ (800022c <DCMotor_Start+0xdc>)
 80001e2:	681a      	ldr	r2, [r3, #0]
 80001e4:	4912      	ldr	r1, [pc, #72]	@ (8000230 <DCMotor_Start+0xe0>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ec:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80001ee:	e006      	b.n	80001fe <DCMotor_Start+0xae>
 80001f0:	4b0e      	ldr	r3, [pc, #56]	@ (800022c <DCMotor_Start+0xdc>)
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	490e      	ldr	r1, [pc, #56]	@ (8000230 <DCMotor_Start+0xe0>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fc:	6413      	str	r3, [r2, #64]	@ 0x40
    		    HAL_TIM_PWM_Start(&htim3, DCMotors[Copy_u32DCMotor].Enable_Channel);
 80001fe:	490a      	ldr	r1, [pc, #40]	@ (8000228 <DCMotor_Start+0xd8>)
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	4613      	mov	r3, r2
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	4413      	add	r3, r2
 8000208:	009b      	lsls	r3, r3, #2
 800020a:	440b      	add	r3, r1
 800020c:	3311      	adds	r3, #17
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	4619      	mov	r1, r3
 8000212:	4806      	ldr	r0, [pc, #24]	@ (800022c <DCMotor_Start+0xdc>)
 8000214:	f001 feb2 	bl	8001f7c <HAL_TIM_PWM_Start>
    		    break;
 8000218:	e001      	b.n	800021e <DCMotor_Start+0xce>
    		/*case Timer_4:
    		    __HAL_TIM_SET_COMPARE(&htim4,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    HAL_TIM_PWM_Start(&htim4, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 800021a:	2301      	movs	r3, #1
 800021c:	73fb      	strb	r3, [r7, #15]
    	}
    }
    return Ret_ErrorStatus;
 800021e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000220:	4618      	mov	r0, r3
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	08005fbc 	.word	0x08005fbc
 800022c:	200000dc 	.word	0x200000dc
 8000230:	20000000 	.word	0x20000000

08000234 <DCMotor_Stop>:



DCMotorErrorStatus_t DCMotor_Stop(uint32_t Copy_u32DCMotor)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 800023c:	2300      	movs	r3, #0
 800023e:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2b01      	cmp	r3, #1
 8000244:	d902      	bls.n	800024c <DCMotor_Stop+0x18>
    {
      	Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000246:	2301      	movs	r3, #1
 8000248:	73fb      	strb	r3, [r7, #15]
 800024a:	e01a      	b.n	8000282 <DCMotor_Stop+0x4e>
    }
    else
    {
    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 800024c:	490f      	ldr	r1, [pc, #60]	@ (800028c <DCMotor_Stop+0x58>)
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	4613      	mov	r3, r2
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	4413      	add	r3, r2
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	440b      	add	r3, r1
 800025a:	3310      	adds	r3, #16
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b02      	cmp	r3, #2
 8000260:	d10d      	bne.n	800027e <DCMotor_Stop+0x4a>
    			break;
    		case Timer_2:
    			HAL_TIM_PWM_Stop(&htim2, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		case Timer_3:
    			HAL_TIM_PWM_Stop(&htim3, DCMotors[Copy_u32DCMotor].Enable_Channel);
 8000262:	490a      	ldr	r1, [pc, #40]	@ (800028c <DCMotor_Stop+0x58>)
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	4613      	mov	r3, r2
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	4413      	add	r3, r2
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	440b      	add	r3, r1
 8000270:	3311      	adds	r3, #17
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	4619      	mov	r1, r3
 8000276:	4806      	ldr	r0, [pc, #24]	@ (8000290 <DCMotor_Stop+0x5c>)
 8000278:	f001 ff22 	bl	80020c0 <HAL_TIM_PWM_Stop>
    		    break;
 800027c:	e001      	b.n	8000282 <DCMotor_Stop+0x4e>
    		/*case Timer_4:
    			HAL_TIM_PWM_Stop(&htim4, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 800027e:	2301      	movs	r3, #1
 8000280:	73fb      	strb	r3, [r7, #15]
    	}

    }
    return Ret_ErrorStatus;
 8000282:	7bfb      	ldrb	r3, [r7, #15]
}
 8000284:	4618      	mov	r0, r3
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	08005fbc 	.word	0x08005fbc
 8000290:	200000dc 	.word	0x200000dc

08000294 <DCMotor_StartReverse>:
	    }
	    return Ret_ErrorStatus;
}

DCMotorErrorStatus_t DCMotor_StartReverse(uint32_t Copy_u32DCMotor)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 800029c:	2300      	movs	r3, #0
 800029e:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d902      	bls.n	80002ac <DCMotor_StartReverse+0x18>
    {
        Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 80002a6:	2301      	movs	r3, #1
 80002a8:	73fb      	strb	r3, [r7, #15]
 80002aa:	e087      	b.n	80003bc <DCMotor_StartReverse+0x128>
    }
    else
    {
    	HAL_GPIO_WritePin((GPIO_TypeDef *)DCMotors[Copy_u32DCMotor].Input_1.Port, DCMotors[Copy_u32DCMotor].Input_1.Pin, GPIO_PIN_RESET);
 80002ac:	4946      	ldr	r1, [pc, #280]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	4613      	mov	r3, r2
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	4413      	add	r3, r2
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	440b      	add	r3, r1
 80002ba:	3304      	adds	r3, #4
 80002bc:	6818      	ldr	r0, [r3, #0]
 80002be:	4942      	ldr	r1, [pc, #264]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	4613      	mov	r3, r2
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	4413      	add	r3, r2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	440b      	add	r3, r1
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	b29b      	uxth	r3, r3
 80002d0:	2200      	movs	r2, #0
 80002d2:	4619      	mov	r1, r3
 80002d4:	f001 f900 	bl	80014d8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin((GPIO_TypeDef *)DCMotors[Copy_u32DCMotor].Input_2.Port, DCMotors[Copy_u32DCMotor].Input_2.Pin, GPIO_PIN_SET);
 80002d8:	493b      	ldr	r1, [pc, #236]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	4613      	mov	r3, r2
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	4413      	add	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	440b      	add	r3, r1
 80002e6:	330c      	adds	r3, #12
 80002e8:	6818      	ldr	r0, [r3, #0]
 80002ea:	4937      	ldr	r1, [pc, #220]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	4613      	mov	r3, r2
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	4413      	add	r3, r2
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	440b      	add	r3, r1
 80002f8:	3308      	adds	r3, #8
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	2201      	movs	r2, #1
 8000300:	4619      	mov	r1, r3
 8000302:	f001 f8e9 	bl	80014d8 <HAL_GPIO_WritePin>


    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 8000306:	4930      	ldr	r1, [pc, #192]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	4613      	mov	r3, r2
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	4413      	add	r3, r2
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	440b      	add	r3, r1
 8000314:	3310      	adds	r3, #16
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b02      	cmp	r3, #2
 800031a:	d14d      	bne.n	80003b8 <DCMotor_StartReverse+0x124>
    		case Timer_2:
    		    __HAL_TIM_SET_COMPARE(&htim2,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    			HAL_TIM_PWM_Start(&htim2, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		case Timer_3:
    		    __HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 800031c:	492a      	ldr	r1, [pc, #168]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	4613      	mov	r3, r2
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	4413      	add	r3, r2
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	440b      	add	r3, r1
 800032a:	3311      	adds	r3, #17
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d107      	bne.n	8000342 <DCMotor_StartReverse+0xae>
 8000332:	4b26      	ldr	r3, [pc, #152]	@ (80003cc <DCMotor_StartReverse+0x138>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4926      	ldr	r1, [pc, #152]	@ (80003d0 <DCMotor_StartReverse+0x13c>)
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800033e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000340:	e02c      	b.n	800039c <DCMotor_StartReverse+0x108>
 8000342:	4921      	ldr	r1, [pc, #132]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	4613      	mov	r3, r2
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	4413      	add	r3, r2
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	440b      	add	r3, r1
 8000350:	3311      	adds	r3, #17
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b04      	cmp	r3, #4
 8000356:	d107      	bne.n	8000368 <DCMotor_StartReverse+0xd4>
 8000358:	4b1c      	ldr	r3, [pc, #112]	@ (80003cc <DCMotor_StartReverse+0x138>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	491c      	ldr	r1, [pc, #112]	@ (80003d0 <DCMotor_StartReverse+0x13c>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000364:	6393      	str	r3, [r2, #56]	@ 0x38
 8000366:	e019      	b.n	800039c <DCMotor_StartReverse+0x108>
 8000368:	4917      	ldr	r1, [pc, #92]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	4613      	mov	r3, r2
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	4413      	add	r3, r2
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	440b      	add	r3, r1
 8000376:	3311      	adds	r3, #17
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b08      	cmp	r3, #8
 800037c:	d107      	bne.n	800038e <DCMotor_StartReverse+0xfa>
 800037e:	4b13      	ldr	r3, [pc, #76]	@ (80003cc <DCMotor_StartReverse+0x138>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	4913      	ldr	r1, [pc, #76]	@ (80003d0 <DCMotor_StartReverse+0x13c>)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800038a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800038c:	e006      	b.n	800039c <DCMotor_StartReverse+0x108>
 800038e:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <DCMotor_StartReverse+0x138>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	490f      	ldr	r1, [pc, #60]	@ (80003d0 <DCMotor_StartReverse+0x13c>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800039a:	6413      	str	r3, [r2, #64]	@ 0x40
    		    HAL_TIM_PWM_Start(&htim3, DCMotors[Copy_u32DCMotor].Enable_Channel);
 800039c:	490a      	ldr	r1, [pc, #40]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	4613      	mov	r3, r2
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	4413      	add	r3, r2
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	440b      	add	r3, r1
 80003aa:	3311      	adds	r3, #17
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	4619      	mov	r1, r3
 80003b0:	4806      	ldr	r0, [pc, #24]	@ (80003cc <DCMotor_StartReverse+0x138>)
 80003b2:	f001 fde3 	bl	8001f7c <HAL_TIM_PWM_Start>
    		    break;
 80003b6:	e001      	b.n	80003bc <DCMotor_StartReverse+0x128>
    		/*case Timer_4:
    		    __HAL_TIM_SET_COMPARE(&htim4,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    HAL_TIM_PWM_Start(&htim4, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 80003b8:	2301      	movs	r3, #1
 80003ba:	73fb      	strb	r3, [r7, #15]
    	}

    }
    return Ret_ErrorStatus;
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3710      	adds	r7, #16
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	08005fbc 	.word	0x08005fbc
 80003cc:	200000dc 	.word	0x200000dc
 80003d0:	20000000 	.word	0x20000000

080003d4 <DCMotor_SetSpeed>:


DCMotorErrorStatus_t DCMotor_SetSpeed(uint32_t Copy_u32DCMotor, uint32_t Copy_u32SpeedPercentage)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 80003de:	2300      	movs	r3, #0
 80003e0:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d902      	bls.n	80003ee <DCMotor_SetSpeed+0x1a>
    {
        Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 80003e8:	2301      	movs	r3, #1
 80003ea:	73fb      	strb	r3, [r7, #15]
 80003ec:	e05a      	b.n	80004a4 <DCMotor_SetSpeed+0xd0>
    }
    else
    {
    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 80003ee:	4930      	ldr	r1, [pc, #192]	@ (80004b0 <DCMotor_SetSpeed+0xdc>)
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	4613      	mov	r3, r2
 80003f4:	009b      	lsls	r3, r3, #2
 80003f6:	4413      	add	r3, r2
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	440b      	add	r3, r1
 80003fc:	3310      	adds	r3, #16
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b02      	cmp	r3, #2
 8000402:	d14d      	bne.n	80004a0 <DCMotor_SetSpeed+0xcc>
    		case Timer_2:
    			Motor_Speed[Copy_u32DCMotor] = (MAX_SPEED*Copy_u32SpeedPercentage)/100;
    			__HAL_TIM_SET_COMPARE(&htim2,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    break;*/
    		case Timer_3:
    			Motor_Speed[Copy_u32DCMotor] = (MAX_SPEED*Copy_u32SpeedPercentage)/100;
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	f242 7210 	movw	r2, #10000	@ 0x2710
 800040a:	fb02 f303 	mul.w	r3, r2, r3
 800040e:	4a29      	ldr	r2, [pc, #164]	@ (80004b4 <DCMotor_SetSpeed+0xe0>)
 8000410:	fba2 2303 	umull	r2, r3, r2, r3
 8000414:	095a      	lsrs	r2, r3, #5
 8000416:	4928      	ldr	r1, [pc, #160]	@ (80004b8 <DCMotor_SetSpeed+0xe4>)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 800041e:	4924      	ldr	r1, [pc, #144]	@ (80004b0 <DCMotor_SetSpeed+0xdc>)
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	4613      	mov	r3, r2
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	440b      	add	r3, r1
 800042c:	3311      	adds	r3, #17
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d107      	bne.n	8000444 <DCMotor_SetSpeed+0x70>
 8000434:	4b21      	ldr	r3, [pc, #132]	@ (80004bc <DCMotor_SetSpeed+0xe8>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	491f      	ldr	r1, [pc, #124]	@ (80004b8 <DCMotor_SetSpeed+0xe4>)
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000440:	635a      	str	r2, [r3, #52]	@ 0x34
    		    break;
 8000442:	e02f      	b.n	80004a4 <DCMotor_SetSpeed+0xd0>
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 8000444:	491a      	ldr	r1, [pc, #104]	@ (80004b0 <DCMotor_SetSpeed+0xdc>)
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	4613      	mov	r3, r2
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	4413      	add	r3, r2
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	440b      	add	r3, r1
 8000452:	3311      	adds	r3, #17
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b04      	cmp	r3, #4
 8000458:	d107      	bne.n	800046a <DCMotor_SetSpeed+0x96>
 800045a:	4b18      	ldr	r3, [pc, #96]	@ (80004bc <DCMotor_SetSpeed+0xe8>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	4916      	ldr	r1, [pc, #88]	@ (80004b8 <DCMotor_SetSpeed+0xe4>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000466:	6393      	str	r3, [r2, #56]	@ 0x38
    		    break;
 8000468:	e01c      	b.n	80004a4 <DCMotor_SetSpeed+0xd0>
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 800046a:	4911      	ldr	r1, [pc, #68]	@ (80004b0 <DCMotor_SetSpeed+0xdc>)
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	4613      	mov	r3, r2
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	4413      	add	r3, r2
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	440b      	add	r3, r1
 8000478:	3311      	adds	r3, #17
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b08      	cmp	r3, #8
 800047e:	d107      	bne.n	8000490 <DCMotor_SetSpeed+0xbc>
 8000480:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <DCMotor_SetSpeed+0xe8>)
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	490c      	ldr	r1, [pc, #48]	@ (80004b8 <DCMotor_SetSpeed+0xe4>)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800048c:	63d3      	str	r3, [r2, #60]	@ 0x3c
    		    break;
 800048e:	e009      	b.n	80004a4 <DCMotor_SetSpeed+0xd0>
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 8000490:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <DCMotor_SetSpeed+0xe8>)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	4908      	ldr	r1, [pc, #32]	@ (80004b8 <DCMotor_SetSpeed+0xe4>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800049c:	6413      	str	r3, [r2, #64]	@ 0x40
    		    break;
 800049e:	e001      	b.n	80004a4 <DCMotor_SetSpeed+0xd0>
    		/*case Timer_4:
    			Motor_Speed[Copy_u32DCMotor] = (MAX_SPEED*Copy_u32SpeedPercentage)/100;
    			__HAL_TIM_SET_COMPARE(&htim4,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 80004a0:	2301      	movs	r3, #1
 80004a2:	73fb      	strb	r3, [r7, #15]
    	}

    }
    return Ret_ErrorStatus;
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	08005fbc 	.word	0x08005fbc
 80004b4:	51eb851f 	.word	0x51eb851f
 80004b8:	20000000 	.word	0x20000000
 80004bc:	200000dc 	.word	0x200000dc

080004c0 <BL_ReadByteSync>:
#include "HAL/bluetooth.h"

volatile uint8_t Data[1] = {0};

uint8_t BL_ReadByteSync()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, Data, 1, 2);
 80004ca:	2302      	movs	r3, #2
 80004cc:	2201      	movs	r2, #1
 80004ce:	4914      	ldr	r1, [pc, #80]	@ (8000520 <BL_ReadByteSync+0x60>)
 80004d0:	4814      	ldr	r0, [pc, #80]	@ (8000524 <BL_ReadByteSync+0x64>)
 80004d2:	f002 fe6d 	bl	80031b0 <HAL_UART_Receive>
 80004d6:	4603      	mov	r3, r0
 80004d8:	71bb      	strb	r3, [r7, #6]
	    if (status == HAL_OK) {
 80004da:	79bb      	ldrb	r3, [r7, #6]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d102      	bne.n	80004e6 <BL_ReadByteSync+0x26>
	        temp = Data[0];
 80004e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <BL_ReadByteSync+0x60>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	71fb      	strb	r3, [r7, #7]
	    }

	if(temp == 'F')
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	2b46      	cmp	r3, #70	@ 0x46
 80004ea:	d105      	bne.n	80004f8 <BL_ReadByteSync+0x38>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004f2:	480d      	ldr	r0, [pc, #52]	@ (8000528 <BL_ReadByteSync+0x68>)
 80004f4:	f000 fff0 	bl	80014d8 <HAL_GPIO_WritePin>
	}

	if(Data[0] == 'B')
 80004f8:	4b09      	ldr	r3, [pc, #36]	@ (8000520 <BL_ReadByteSync+0x60>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	2b42      	cmp	r3, #66	@ 0x42
 8000500:	d105      	bne.n	800050e <BL_ReadByteSync+0x4e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000508:	4807      	ldr	r0, [pc, #28]	@ (8000528 <BL_ReadByteSync+0x68>)
 800050a:	f000 ffe5 	bl	80014d8 <HAL_GPIO_WritePin>
	}

	Data[0] = 0;
 800050e:	4b04      	ldr	r3, [pc, #16]	@ (8000520 <BL_ReadByteSync+0x60>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
	return temp;
 8000514:	79fb      	ldrb	r3, [r7, #7]
}
 8000516:	4618      	mov	r0, r3
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000044 	.word	0x20000044
 8000524:	20000124 	.word	0x20000124
 8000528:	40011000 	.word	0x40011000

0800052c <get_data_task>:


struct CarState CarInfo = {0, forward, 0, idle};

void get_data_task(void * pvParameters)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	//uint8_t Data = 0;
	while(1)
	{
		CarInfo.DriverInput = BL_ReadByteSync();
 8000534:	f7ff ffc4 	bl	80004c0 <BL_ReadByteSync>
 8000538:	4603      	mov	r3, r0
 800053a:	461a      	mov	r2, r3
 800053c:	4b03      	ldr	r3, [pc, #12]	@ (800054c <get_data_task+0x20>)
 800053e:	701a      	strb	r2, [r3, #0]
		//HAL_USART_Receive(&husart1, &Data, 1, 1);
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		vTaskDelay(pdMS_TO_TICKS(10));
 8000540:	200a      	movs	r0, #10
 8000542:	f004 f875 	bl	8004630 <vTaskDelay>
		CarInfo.DriverInput = BL_ReadByteSync();
 8000546:	bf00      	nop
 8000548:	e7f4      	b.n	8000534 <get_data_task+0x8>
 800054a:	bf00      	nop
 800054c:	20000008 	.word	0x20000008

08000550 <drive_task>:
	}
}

void drive_task(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
	int steer_counter = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]

	//DCMotorInit();
	//DCMotor_Start(DRIVING_MOTOR);
	DCMotor_SetSpeed(STEERING_MOTOR, 50);
 800055a:	2132      	movs	r1, #50	@ 0x32
 800055c:	2001      	movs	r0, #1
 800055e:	f7ff ff39 	bl	80003d4 <DCMotor_SetSpeed>

	while(1)
	{
		switch(CarInfo.DriverInput)
 8000562:	4b6f      	ldr	r3, [pc, #444]	@ (8000720 <drive_task+0x1d0>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2bff      	cmp	r3, #255	@ 0xff
 8000568:	d075      	beq.n	8000656 <drive_task+0x106>
 800056a:	2bff      	cmp	r3, #255	@ 0xff
 800056c:	f300 80d0 	bgt.w	8000710 <drive_task+0x1c0>
 8000570:	2b39      	cmp	r3, #57	@ 0x39
 8000572:	dc6b      	bgt.n	800064c <drive_task+0xfc>
 8000574:	2b30      	cmp	r3, #48	@ 0x30
 8000576:	f280 80b2 	bge.w	80006de <drive_task+0x18e>
			DCMotor_Stop(DRIVING_MOTOR);
			DCMotor_Stop(STEERING_MOTOR);
			CarInfo.DriverInput=idle;
			break;

		default: break;
 800057a:	e0c9      	b.n	8000710 <drive_task+0x1c0>
		switch(CarInfo.DriverInput)
 800057c:	3b42      	subs	r3, #66	@ 0x42
 800057e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000580:	f200 80c6 	bhi.w	8000710 <drive_task+0x1c0>
 8000584:	a201      	add	r2, pc, #4	@ (adr r2, 800058c <drive_task+0x3c>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	0800068d 	.word	0x0800068d
 8000590:	08000711 	.word	0x08000711
 8000594:	08000711 	.word	0x08000711
 8000598:	08000711 	.word	0x08000711
 800059c:	08000669 	.word	0x08000669
 80005a0:	08000711 	.word	0x08000711
 80005a4:	08000711 	.word	0x08000711
 80005a8:	08000711 	.word	0x08000711
 80005ac:	08000711 	.word	0x08000711
 80005b0:	08000711 	.word	0x08000711
 80005b4:	080006c5 	.word	0x080006c5
 80005b8:	08000711 	.word	0x08000711
 80005bc:	08000711 	.word	0x08000711
 80005c0:	08000711 	.word	0x08000711
 80005c4:	08000711 	.word	0x08000711
 80005c8:	08000711 	.word	0x08000711
 80005cc:	080006b1 	.word	0x080006b1
 80005d0:	080006fd 	.word	0x080006fd
 80005d4:	08000711 	.word	0x08000711
 80005d8:	08000711 	.word	0x08000711
 80005dc:	08000711 	.word	0x08000711
 80005e0:	08000711 	.word	0x08000711
 80005e4:	08000711 	.word	0x08000711
 80005e8:	08000711 	.word	0x08000711
 80005ec:	08000711 	.word	0x08000711
 80005f0:	08000711 	.word	0x08000711
 80005f4:	08000711 	.word	0x08000711
 80005f8:	08000711 	.word	0x08000711
 80005fc:	08000711 	.word	0x08000711
 8000600:	08000711 	.word	0x08000711
 8000604:	08000711 	.word	0x08000711
 8000608:	08000711 	.word	0x08000711
 800060c:	08000711 	.word	0x08000711
 8000610:	08000711 	.word	0x08000711
 8000614:	08000711 	.word	0x08000711
 8000618:	08000711 	.word	0x08000711
 800061c:	08000711 	.word	0x08000711
 8000620:	08000711 	.word	0x08000711
 8000624:	08000711 	.word	0x08000711
 8000628:	08000711 	.word	0x08000711
 800062c:	08000711 	.word	0x08000711
 8000630:	08000711 	.word	0x08000711
 8000634:	08000711 	.word	0x08000711
 8000638:	08000711 	.word	0x08000711
 800063c:	08000711 	.word	0x08000711
 8000640:	08000711 	.word	0x08000711
 8000644:	08000711 	.word	0x08000711
 8000648:	080006d9 	.word	0x080006d9
 800064c:	2b71      	cmp	r3, #113	@ 0x71
 800064e:	dc5f      	bgt.n	8000710 <drive_task+0x1c0>
 8000650:	2b42      	cmp	r3, #66	@ 0x42
 8000652:	da93      	bge.n	800057c <drive_task+0x2c>
		default: break;
 8000654:	e05c      	b.n	8000710 <drive_task+0x1c0>
			if(steer_counter > 0)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	dd5b      	ble.n	8000714 <drive_task+0x1c4>
				steer_counter = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
				DCMotor_Stop(STEERING_MOTOR);
 8000660:	2001      	movs	r0, #1
 8000662:	f7ff fde7 	bl	8000234 <DCMotor_Stop>
			break;
 8000666:	e055      	b.n	8000714 <drive_task+0x1c4>
			if((CarInfo.last_state == steer_right) || (CarInfo.last_state == steer_left))
 8000668:	4b2d      	ldr	r3, [pc, #180]	@ (8000720 <drive_task+0x1d0>)
 800066a:	7b1b      	ldrb	r3, [r3, #12]
 800066c:	2b52      	cmp	r3, #82	@ 0x52
 800066e:	d003      	beq.n	8000678 <drive_task+0x128>
 8000670:	4b2b      	ldr	r3, [pc, #172]	@ (8000720 <drive_task+0x1d0>)
 8000672:	7b1b      	ldrb	r3, [r3, #12]
 8000674:	2b4c      	cmp	r3, #76	@ 0x4c
 8000676:	d102      	bne.n	800067e <drive_task+0x12e>
				DCMotor_Stop(STEERING_MOTOR);
 8000678:	2001      	movs	r0, #1
 800067a:	f7ff fddb 	bl	8000234 <DCMotor_Stop>
			DCMotor_Start(DRIVING_MOTOR);
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff fd66 	bl	8000150 <DCMotor_Start>
			CarInfo.DriverInput = idle;
 8000684:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <drive_task+0x1d0>)
 8000686:	22ff      	movs	r2, #255	@ 0xff
 8000688:	701a      	strb	r2, [r3, #0]
			break;
 800068a:	e044      	b.n	8000716 <drive_task+0x1c6>
			if((CarInfo.last_state == steer_right) || (CarInfo.last_state == steer_left))
 800068c:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <drive_task+0x1d0>)
 800068e:	7b1b      	ldrb	r3, [r3, #12]
 8000690:	2b52      	cmp	r3, #82	@ 0x52
 8000692:	d003      	beq.n	800069c <drive_task+0x14c>
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <drive_task+0x1d0>)
 8000696:	7b1b      	ldrb	r3, [r3, #12]
 8000698:	2b4c      	cmp	r3, #76	@ 0x4c
 800069a:	d102      	bne.n	80006a2 <drive_task+0x152>
				DCMotor_Stop(STEERING_MOTOR);
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff fdc9 	bl	8000234 <DCMotor_Stop>
			DCMotor_StartReverse(DRIVING_MOTOR);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff fdf6 	bl	8000294 <DCMotor_StartReverse>
			CarInfo.DriverInput = idle;
 80006a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <drive_task+0x1d0>)
 80006aa:	22ff      	movs	r2, #255	@ 0xff
 80006ac:	701a      	strb	r2, [r3, #0]
			break;
 80006ae:	e032      	b.n	8000716 <drive_task+0x1c6>
			DCMotor_StartReverse(STEERING_MOTOR);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f7ff fdef 	bl	8000294 <DCMotor_StartReverse>
			steer_counter++;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3301      	adds	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
			CarInfo.DriverInput=idle;
 80006bc:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <drive_task+0x1d0>)
 80006be:	22ff      	movs	r2, #255	@ 0xff
 80006c0:	701a      	strb	r2, [r3, #0]
			break;
 80006c2:	e028      	b.n	8000716 <drive_task+0x1c6>
			DCMotor_Start(STEERING_MOTOR);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff fd43 	bl	8000150 <DCMotor_Start>
			steer_counter++;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3301      	adds	r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
			CarInfo.DriverInput=idle;
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <drive_task+0x1d0>)
 80006d2:	22ff      	movs	r2, #255	@ 0xff
 80006d4:	701a      	strb	r2, [r3, #0]
			break;
 80006d6:	e01e      	b.n	8000716 <drive_task+0x1c6>
		case speed_100: CarInfo.DriverInput = 100;
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <drive_task+0x1d0>)
 80006da:	2264      	movs	r2, #100	@ 0x64
 80006dc:	701a      	strb	r2, [r3, #0]
			DCMotor_SetSpeed(DRIVING_MOTOR, CarInfo.DriverInput);
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <drive_task+0x1d0>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	4619      	mov	r1, r3
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff fe75 	bl	80003d4 <DCMotor_SetSpeed>
			CarInfo.speed = CarInfo.DriverInput;
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <drive_task+0x1d0>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <drive_task+0x1d0>)
 80006f2:	609a      	str	r2, [r3, #8]
			CarInfo.DriverInput=idle;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <drive_task+0x1d0>)
 80006f6:	22ff      	movs	r2, #255	@ 0xff
 80006f8:	701a      	strb	r2, [r3, #0]
			break;
 80006fa:	e00c      	b.n	8000716 <drive_task+0x1c6>
			DCMotor_Stop(DRIVING_MOTOR);
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff fd99 	bl	8000234 <DCMotor_Stop>
			DCMotor_Stop(STEERING_MOTOR);
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff fd96 	bl	8000234 <DCMotor_Stop>
			CarInfo.DriverInput=idle;
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <drive_task+0x1d0>)
 800070a:	22ff      	movs	r2, #255	@ 0xff
 800070c:	701a      	strb	r2, [r3, #0]
			break;
 800070e:	e002      	b.n	8000716 <drive_task+0x1c6>
		default: break;
 8000710:	bf00      	nop
 8000712:	e000      	b.n	8000716 <drive_task+0x1c6>
			break;
 8000714:	bf00      	nop
		}

		vTaskDelay(pdMS_TO_TICKS(2));
 8000716:	2002      	movs	r0, #2
 8000718:	f003 ff8a 	bl	8004630 <vTaskDelay>
		switch(CarInfo.DriverInput)
 800071c:	e721      	b.n	8000562 <drive_task+0x12>
 800071e:	bf00      	nop
 8000720:	20000008 	.word	0x20000008

08000724 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000728:	4a04      	ldr	r2, [pc, #16]	@ (800073c <MX_FREERTOS_Init+0x18>)
 800072a:	2100      	movs	r1, #0
 800072c:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_FREERTOS_Init+0x1c>)
 800072e:	f002 ff33 	bl	8003598 <osThreadNew>
 8000732:	4603      	mov	r3, r0
 8000734:	4a03      	ldr	r2, [pc, #12]	@ (8000744 <MX_FREERTOS_Init+0x20>)
 8000736:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	08005fe4 	.word	0x08005fe4
 8000740:	08000749 	.word	0x08000749
 8000744:	20000048 	.word	0x20000048

08000748 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f002 ffcb 	bl	80036ec <osDelay>
 8000756:	e7fb      	b.n	8000750 <StartDefaultTask+0x8>

08000758 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076c:	4b38      	ldr	r3, [pc, #224]	@ (8000850 <MX_GPIO_Init+0xf8>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a37      	ldr	r2, [pc, #220]	@ (8000850 <MX_GPIO_Init+0xf8>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b35      	ldr	r3, [pc, #212]	@ (8000850 <MX_GPIO_Init+0xf8>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0310 	and.w	r3, r3, #16
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000784:	4b32      	ldr	r3, [pc, #200]	@ (8000850 <MX_GPIO_Init+0xf8>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a31      	ldr	r2, [pc, #196]	@ (8000850 <MX_GPIO_Init+0xf8>)
 800078a:	f043 0304 	orr.w	r3, r3, #4
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b2f      	ldr	r3, [pc, #188]	@ (8000850 <MX_GPIO_Init+0xf8>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079c:	4b2c      	ldr	r3, [pc, #176]	@ (8000850 <MX_GPIO_Init+0xf8>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a2b      	ldr	r2, [pc, #172]	@ (8000850 <MX_GPIO_Init+0xf8>)
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <MX_GPIO_Init+0xf8>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0308 	and.w	r3, r3, #8
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ba:	4826      	ldr	r0, [pc, #152]	@ (8000854 <MX_GPIO_Init+0xfc>)
 80007bc:	f000 fe8c 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	211e      	movs	r1, #30
 80007c4:	4824      	ldr	r0, [pc, #144]	@ (8000858 <MX_GPIO_Init+0x100>)
 80007c6:	f000 fe87 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Trigger1_Pin|Trigger2_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80007d0:	4822      	ldr	r0, [pc, #136]	@ (800085c <MX_GPIO_Init+0x104>)
 80007d2:	f000 fe81 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	4819      	ldr	r0, [pc, #100]	@ (8000854 <MX_GPIO_Init+0xfc>)
 80007f0:	f000 fcee 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80007f4:	231e      	movs	r3, #30
 80007f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2302      	movs	r3, #2
 8000802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	4619      	mov	r1, r3
 800080a:	4813      	ldr	r0, [pc, #76]	@ (8000858 <MX_GPIO_Init+0x100>)
 800080c:	f000 fce0 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Trigger1_Pin|Trigger2_Pin;
 8000810:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2302      	movs	r3, #2
 8000820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	4619      	mov	r1, r3
 8000828:	480c      	ldr	r0, [pc, #48]	@ (800085c <MX_GPIO_Init+0x104>)
 800082a:	f000 fcd1 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Echo1_Pin|Echo2_Pin;
 800082e:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	4619      	mov	r1, r3
 8000842:	4806      	ldr	r0, [pc, #24]	@ (800085c <MX_GPIO_Init+0x104>)
 8000844:	f000 fcc4 	bl	80011d0 <HAL_GPIO_Init>

}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000
 8000854:	40011000 	.word	0x40011000
 8000858:	40010800 	.word	0x40010800
 800085c:	40010c00 	.word	0x40010c00

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000866:	f000 fba1 	bl	8000fac <HAL_Init>

  /* USER CODE BEGIN Init */
  xTaskCreate(drive_task, "Driving Task", 100, ( void * ) 1, 3, NULL);
 800086a:	2300      	movs	r3, #0
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	2303      	movs	r3, #3
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2301      	movs	r3, #1
 8000874:	2264      	movs	r2, #100	@ 0x64
 8000876:	491f      	ldr	r1, [pc, #124]	@ (80008f4 <main+0x94>)
 8000878:	481f      	ldr	r0, [pc, #124]	@ (80008f8 <main+0x98>)
 800087a:	f003 fd9c 	bl	80043b6 <xTaskCreate>
  xTaskCreate(get_data_task, "Bluetooth Task", 100, ( void * ) 1, 2, NULL);
 800087e:	2300      	movs	r3, #0
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	2302      	movs	r3, #2
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	2264      	movs	r2, #100	@ 0x64
 800088a:	491c      	ldr	r1, [pc, #112]	@ (80008fc <main+0x9c>)
 800088c:	481c      	ldr	r0, [pc, #112]	@ (8000900 <main+0xa0>)
 800088e:	f003 fd92 	bl	80043b6 <xTaskCreate>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000892:	f000 f837 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000896:	f7ff ff5f 	bl	8000758 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800089a:	f000 faeb 	bl	8000e74 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800089e:	f000 f9b7 	bl	8000c10 <MX_TIM3_Init>
  MX_TIM2_Init();
 80008a2:	f000 f957 	bl	8000b54 <MX_TIM2_Init>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008a6:	f002 fe11 	bl	80034cc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80008aa:	f7ff ff3b 	bl	8000724 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008ae:	f002 fe3f 	bl	8003530 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TIM2->CCR2 = 5000;
 80008b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80008ba:	639a      	str	r2, [r3, #56]	@ 0x38
	  for(int i=0; i<30000; i++);
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	e002      	b.n	80008c8 <main+0x68>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3301      	adds	r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f247 522f 	movw	r2, #29999	@ 0x752f
 80008ce:	4293      	cmp	r3, r2
 80008d0:	ddf7      	ble.n	80008c2 <main+0x62>
	  TIM2->CCR2 = 10000;
 80008d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80008da:	639a      	str	r2, [r3, #56]	@ 0x38
	  for(int i=0; i<30000; i++);
 80008dc:	2300      	movs	r3, #0
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	e002      	b.n	80008e8 <main+0x88>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	f247 522f 	movw	r2, #29999	@ 0x752f
 80008ee:	4293      	cmp	r3, r2
 80008f0:	ddf7      	ble.n	80008e2 <main+0x82>
	  TIM2->CCR2 = 5000;
 80008f2:	e7de      	b.n	80008b2 <main+0x52>
 80008f4:	08005f84 	.word	0x08005f84
 80008f8:	08000551 	.word	0x08000551
 80008fc:	08005f94 	.word	0x08005f94
 8000900:	0800052d 	.word	0x0800052d

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b090      	sub	sp, #64	@ 0x40
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	2228      	movs	r2, #40	@ 0x28
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f005 faea 	bl	8005eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000926:	2302      	movs	r3, #2
 8000928:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092a:	2301      	movs	r3, #1
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092e:	2310      	movs	r3, #16
 8000930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000932:	2300      	movs	r3, #0
 8000934:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000936:	f107 0318 	add.w	r3, r7, #24
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fde4 	bl	8001508 <HAL_RCC_OscConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000946:	f000 f82b 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094a:	230f      	movs	r3, #15
 800094c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f001 f852 	bl	8001a0c <HAL_RCC_ClockConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800096e:	f000 f817 	bl	80009a0 <Error_Handler>
  }
}
 8000972:	bf00      	nop
 8000974:	3740      	adds	r7, #64	@ 0x40
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a04      	ldr	r2, [pc, #16]	@ (800099c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d101      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800098e:	f000 fb23 	bl	8000fd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40012c00 	.word	0x40012c00

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <Error_Handler+0x8>

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009b2:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <HAL_MspInit+0x68>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	4a17      	ldr	r2, [pc, #92]	@ (8000a14 <HAL_MspInit+0x68>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6193      	str	r3, [r2, #24]
 80009be:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <HAL_MspInit+0x68>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <HAL_MspInit+0x68>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	4a11      	ldr	r2, [pc, #68]	@ (8000a14 <HAL_MspInit+0x68>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d4:	61d3      	str	r3, [r2, #28]
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <HAL_MspInit+0x68>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	210f      	movs	r1, #15
 80009e6:	f06f 0001 	mvn.w	r0, #1
 80009ea:	f000 fbc6 	bl	800117a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <HAL_MspInit+0x6c>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <HAL_MspInit+0x6c>)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010000 	.word	0x40010000

08000a1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	@ 0x30
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a32:	4b2e      	ldr	r3, [pc, #184]	@ (8000aec <HAL_InitTick+0xd0>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	4a2d      	ldr	r2, [pc, #180]	@ (8000aec <HAL_InitTick+0xd0>)
 8000a38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a3c:	6193      	str	r3, [r2, #24]
 8000a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000aec <HAL_InitTick+0xd0>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a4a:	f107 020c 	add.w	r2, r7, #12
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	4611      	mov	r1, r2
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 f949 	bl	8001cec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a5a:	f001 f933 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 8000a5e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a62:	4a23      	ldr	r2, [pc, #140]	@ (8000af0 <HAL_InitTick+0xd4>)
 8000a64:	fba2 2303 	umull	r2, r3, r2, r3
 8000a68:	0c9b      	lsrs	r3, r3, #18
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	@ (8000af4 <HAL_InitTick+0xd8>)
 8000a70:	4a21      	ldr	r2, [pc, #132]	@ (8000af8 <HAL_InitTick+0xdc>)
 8000a72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	@ (8000af4 <HAL_InitTick+0xd8>)
 8000a76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a7a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000af4 <HAL_InitTick+0xd8>)
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a80:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	@ (8000af4 <HAL_InitTick+0xd8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b1a      	ldr	r3, [pc, #104]	@ (8000af4 <HAL_InitTick+0xd8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8e:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <HAL_InitTick+0xd8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a94:	4817      	ldr	r0, [pc, #92]	@ (8000af4 <HAL_InitTick+0xd8>)
 8000a96:	f001 f977 	bl	8001d88 <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d11b      	bne.n	8000ae0 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000aa8:	4812      	ldr	r0, [pc, #72]	@ (8000af4 <HAL_InitTick+0xd8>)
 8000aaa:	f001 f9bd 	bl	8001e28 <HAL_TIM_Base_Start_IT>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ab4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d111      	bne.n	8000ae0 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000abc:	2019      	movs	r0, #25
 8000abe:	f000 fb78 	bl	80011b2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d808      	bhi.n	8000ada <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	2019      	movs	r0, #25
 8000ace:	f000 fb54 	bl	800117a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <HAL_InitTick+0xe0>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	e002      	b.n	8000ae0 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ae0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3730      	adds	r7, #48	@ 0x30
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40021000 	.word	0x40021000
 8000af0:	431bde83 	.word	0x431bde83
 8000af4:	2000004c 	.word	0x2000004c
 8000af8:	40012c00 	.word	0x40012c00
 8000afc:	2000001c 	.word	0x2000001c

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <NMI_Handler+0x4>

08000b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <MemManage_Handler+0x4>

08000b18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b38:	4802      	ldr	r0, [pc, #8]	@ (8000b44 <TIM1_UP_IRQHandler+0x10>)
 8000b3a:	f001 fb74 	bl	8002226 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000004c 	.word	0x2000004c

08000b48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b64:	463b      	mov	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b70:	4b26      	ldr	r3, [pc, #152]	@ (8000c0c <MX_TIM2_Init+0xb8>)
 8000b72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000b78:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <MX_TIM2_Init+0xb8>)
 8000b7a:	2207      	movs	r2, #7
 8000b7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b23      	ldr	r3, [pc, #140]	@ (8000c0c <MX_TIM2_Init+0xb8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000b84:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <MX_TIM2_Init+0xb8>)
 8000b86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <MX_TIM2_Init+0xb8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <MX_TIM2_Init+0xb8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000b98:	481c      	ldr	r0, [pc, #112]	@ (8000c0c <MX_TIM2_Init+0xb8>)
 8000b9a:	f001 faf5 	bl	8002188 <HAL_TIM_IC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ba4:	f7ff fefc 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4815      	ldr	r0, [pc, #84]	@ (8000c0c <MX_TIM2_Init+0xb8>)
 8000bb8:	f002 fa3a 	bl	8003030 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bc2:	f7ff feed 	bl	80009a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480b      	ldr	r0, [pc, #44]	@ (8000c0c <MX_TIM2_Init+0xb8>)
 8000bde:	f001 fc2a 	bl	8002436 <HAL_TIM_IC_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000be8:	f7ff feda 	bl	80009a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000bec:	463b      	mov	r3, r7
 8000bee:	2204      	movs	r2, #4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4806      	ldr	r0, [pc, #24]	@ (8000c0c <MX_TIM2_Init+0xb8>)
 8000bf4:	f001 fc1f 	bl	8002436 <HAL_TIM_IC_ConfigChannel>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000bfe:	f7ff fecf 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000094 	.word	0x20000094

08000c10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08e      	sub	sp, #56	@ 0x38
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
 8000c3c:	615a      	str	r2, [r3, #20]
 8000c3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c40:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf4 <MX_TIM3_Init+0xe4>)
 8000c42:	4a2d      	ldr	r2, [pc, #180]	@ (8000cf8 <MX_TIM3_Init+0xe8>)
 8000c44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000c46:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf4 <MX_TIM3_Init+0xe4>)
 8000c48:	2207      	movs	r2, #7
 8000c4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4c:	4b29      	ldr	r3, [pc, #164]	@ (8000cf4 <MX_TIM3_Init+0xe4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000c52:	4b28      	ldr	r3, [pc, #160]	@ (8000cf4 <MX_TIM3_Init+0xe4>)
 8000c54:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000c58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5a:	4b26      	ldr	r3, [pc, #152]	@ (8000cf4 <MX_TIM3_Init+0xe4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c60:	4b24      	ldr	r3, [pc, #144]	@ (8000cf4 <MX_TIM3_Init+0xe4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c66:	4823      	ldr	r0, [pc, #140]	@ (8000cf4 <MX_TIM3_Init+0xe4>)
 8000c68:	f001 f88e 	bl	8001d88 <HAL_TIM_Base_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c72:	f7ff fe95 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c80:	4619      	mov	r1, r3
 8000c82:	481c      	ldr	r0, [pc, #112]	@ (8000cf4 <MX_TIM3_Init+0xe4>)
 8000c84:	f001 fd36 	bl	80026f4 <HAL_TIM_ConfigClockSource>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c8e:	f7ff fe87 	bl	80009a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c92:	4818      	ldr	r0, [pc, #96]	@ (8000cf4 <MX_TIM3_Init+0xe4>)
 8000c94:	f001 f91a 	bl	8001ecc <HAL_TIM_PWM_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c9e:	f7ff fe7f 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000caa:	f107 0320 	add.w	r3, r7, #32
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4810      	ldr	r0, [pc, #64]	@ (8000cf4 <MX_TIM3_Init+0xe4>)
 8000cb2:	f002 f9bd 	bl	8003030 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000cbc:	f7ff fe70 	bl	80009a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc0:	2360      	movs	r3, #96	@ 0x60
 8000cc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4807      	ldr	r0, [pc, #28]	@ (8000cf4 <MX_TIM3_Init+0xe4>)
 8000cd8:	f001 fc4a 	bl	8002570 <HAL_TIM_PWM_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ce2:	f7ff fe5d 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ce6:	4803      	ldr	r0, [pc, #12]	@ (8000cf4 <MX_TIM3_Init+0xe4>)
 8000ce8:	f000 f892 	bl	8000e10 <HAL_TIM_MspPostInit>

}
 8000cec:	bf00      	nop
 8000cee:	3738      	adds	r7, #56	@ 0x38
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200000dc 	.word	0x200000dc
 8000cf8:	40000400 	.word	0x40000400

08000cfc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	@ 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM2)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d1a:	d14e      	bne.n	8000dba <HAL_TIM_IC_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d1c:	4b29      	ldr	r3, [pc, #164]	@ (8000dc4 <HAL_TIM_IC_MspInit+0xc8>)
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	4a28      	ldr	r2, [pc, #160]	@ (8000dc4 <HAL_TIM_IC_MspInit+0xc8>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	61d3      	str	r3, [r2, #28]
 8000d28:	4b26      	ldr	r3, [pc, #152]	@ (8000dc4 <HAL_TIM_IC_MspInit+0xc8>)
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	4b23      	ldr	r3, [pc, #140]	@ (8000dc4 <HAL_TIM_IC_MspInit+0xc8>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a22      	ldr	r2, [pc, #136]	@ (8000dc4 <HAL_TIM_IC_MspInit+0xc8>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b20      	ldr	r3, [pc, #128]	@ (8000dc4 <HAL_TIM_IC_MspInit+0xc8>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc4 <HAL_TIM_IC_MspInit+0xc8>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc4 <HAL_TIM_IC_MspInit+0xc8>)
 8000d52:	f043 0308 	orr.w	r3, r3, #8
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <HAL_TIM_IC_MspInit+0xc8>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0308 	and.w	r3, r3, #8
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	4813      	ldr	r0, [pc, #76]	@ (8000dc8 <HAL_TIM_IC_MspInit+0xcc>)
 8000d7a:	f000 fa29 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d7e:	2308      	movs	r3, #8
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480e      	ldr	r0, [pc, #56]	@ (8000dcc <HAL_TIM_IC_MspInit+0xd0>)
 8000d92:	f000 fa1d 	bl	80011d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <HAL_TIM_IC_MspInit+0xd4>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000db4:	4a06      	ldr	r2, [pc, #24]	@ (8000dd0 <HAL_TIM_IC_MspInit+0xd4>)
 8000db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	@ 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010800 	.word	0x40010800
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	40010000 	.word	0x40010000

08000dd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a09      	ldr	r2, [pc, #36]	@ (8000e08 <HAL_TIM_Base_MspInit+0x34>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d10b      	bne.n	8000dfe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000de6:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <HAL_TIM_Base_MspInit+0x38>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a08      	ldr	r2, [pc, #32]	@ (8000e0c <HAL_TIM_Base_MspInit+0x38>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	61d3      	str	r3, [r2, #28]
 8000df2:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <HAL_TIM_Base_MspInit+0x38>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	40000400 	.word	0x40000400
 8000e0c:	40021000 	.word	0x40021000

08000e10 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e68 <HAL_TIM_MspPostInit+0x58>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d117      	bne.n	8000e60 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <HAL_TIM_MspPostInit+0x5c>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <HAL_TIM_MspPostInit+0x5c>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <HAL_TIM_MspPostInit+0x5c>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e48:	2340      	movs	r3, #64	@ 0x40
 8000e4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <HAL_TIM_MspPostInit+0x60>)
 8000e5c:	f000 f9b8 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e60:	bf00      	nop
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40000400 	.word	0x40000400
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010800 	.word	0x40010800

08000e74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ec4 <MX_USART1_UART_Init+0x50>)
 8000e7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e80:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000e84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e98:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000eac:	f002 f930 	bl	8003110 <HAL_UART_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eb6:	f7ff fd73 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000124 	.word	0x20000124
 8000ec4:	40013800 	.word	0x40013800

08000ec8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f54 <HAL_UART_MspInit+0x8c>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d131      	bne.n	8000f4c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f58 <HAL_UART_MspInit+0x90>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a1a      	ldr	r2, [pc, #104]	@ (8000f58 <HAL_UART_MspInit+0x90>)
 8000eee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <HAL_UART_MspInit+0x90>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <HAL_UART_MspInit+0x90>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a14      	ldr	r2, [pc, #80]	@ (8000f58 <HAL_UART_MspInit+0x90>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <HAL_UART_MspInit+0x90>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480b      	ldr	r0, [pc, #44]	@ (8000f5c <HAL_UART_MspInit+0x94>)
 8000f2e:	f000 f94f 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4619      	mov	r1, r3
 8000f46:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <HAL_UART_MspInit+0x94>)
 8000f48:	f000 f942 	bl	80011d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40013800 	.word	0x40013800
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010800 	.word	0x40010800

08000f60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f60:	f7ff fdf2 	bl	8000b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f64:	480b      	ldr	r0, [pc, #44]	@ (8000f94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f66:	490c      	ldr	r1, [pc, #48]	@ (8000f98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f68:	4a0c      	ldr	r2, [pc, #48]	@ (8000f9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a09      	ldr	r2, [pc, #36]	@ (8000fa0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f7c:	4c09      	ldr	r4, [pc, #36]	@ (8000fa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f004 ffb7 	bl	8005efc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f8e:	f7ff fc67 	bl	8000860 <main>
  bx lr
 8000f92:	4770      	bx	lr
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000f9c:	0800603c 	.word	0x0800603c
  ldr r2, =_sbss
 8000fa0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000fa4:	20001ab8 	.word	0x20001ab8

08000fa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC1_2_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <HAL_Init+0x28>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	@ (8000fd4 <HAL_Init+0x28>)
 8000fb6:	f043 0310 	orr.w	r3, r3, #16
 8000fba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 f8d1 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc2:	200f      	movs	r0, #15
 8000fc4:	f7ff fd2a 	bl	8000a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc8:	f7ff fcf0 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40022000 	.word	0x40022000

08000fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fdc:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <HAL_IncTick+0x1c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <HAL_IncTick+0x20>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a03      	ldr	r2, [pc, #12]	@ (8000ff8 <HAL_IncTick+0x20>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	20000020 	.word	0x20000020
 8000ff8:	2000016c 	.word	0x2000016c

08000ffc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b02      	ldr	r3, [pc, #8]	@ (800100c <HAL_GetTick+0x10>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	2000016c 	.word	0x2000016c

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4906      	ldr	r1, [pc, #24]	@ (80010a8 <__NVIC_EnableIRQ+0x34>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	@ (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	@ (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	@ 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	@ 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff4f 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff64 	bl	8001058 <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ffb2 	bl	8001100 <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff81 	bl	80010ac <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff57 	bl	8001074 <__NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b08b      	sub	sp, #44	@ 0x2c
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e2:	e169      	b.n	80014b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011e4:	2201      	movs	r2, #1
 80011e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	69fa      	ldr	r2, [r7, #28]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	f040 8158 	bne.w	80014b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	4a9a      	ldr	r2, [pc, #616]	@ (8001470 <HAL_GPIO_Init+0x2a0>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d05e      	beq.n	80012ca <HAL_GPIO_Init+0xfa>
 800120c:	4a98      	ldr	r2, [pc, #608]	@ (8001470 <HAL_GPIO_Init+0x2a0>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d875      	bhi.n	80012fe <HAL_GPIO_Init+0x12e>
 8001212:	4a98      	ldr	r2, [pc, #608]	@ (8001474 <HAL_GPIO_Init+0x2a4>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d058      	beq.n	80012ca <HAL_GPIO_Init+0xfa>
 8001218:	4a96      	ldr	r2, [pc, #600]	@ (8001474 <HAL_GPIO_Init+0x2a4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d86f      	bhi.n	80012fe <HAL_GPIO_Init+0x12e>
 800121e:	4a96      	ldr	r2, [pc, #600]	@ (8001478 <HAL_GPIO_Init+0x2a8>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d052      	beq.n	80012ca <HAL_GPIO_Init+0xfa>
 8001224:	4a94      	ldr	r2, [pc, #592]	@ (8001478 <HAL_GPIO_Init+0x2a8>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d869      	bhi.n	80012fe <HAL_GPIO_Init+0x12e>
 800122a:	4a94      	ldr	r2, [pc, #592]	@ (800147c <HAL_GPIO_Init+0x2ac>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d04c      	beq.n	80012ca <HAL_GPIO_Init+0xfa>
 8001230:	4a92      	ldr	r2, [pc, #584]	@ (800147c <HAL_GPIO_Init+0x2ac>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d863      	bhi.n	80012fe <HAL_GPIO_Init+0x12e>
 8001236:	4a92      	ldr	r2, [pc, #584]	@ (8001480 <HAL_GPIO_Init+0x2b0>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d046      	beq.n	80012ca <HAL_GPIO_Init+0xfa>
 800123c:	4a90      	ldr	r2, [pc, #576]	@ (8001480 <HAL_GPIO_Init+0x2b0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d85d      	bhi.n	80012fe <HAL_GPIO_Init+0x12e>
 8001242:	2b12      	cmp	r3, #18
 8001244:	d82a      	bhi.n	800129c <HAL_GPIO_Init+0xcc>
 8001246:	2b12      	cmp	r3, #18
 8001248:	d859      	bhi.n	80012fe <HAL_GPIO_Init+0x12e>
 800124a:	a201      	add	r2, pc, #4	@ (adr r2, 8001250 <HAL_GPIO_Init+0x80>)
 800124c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001250:	080012cb 	.word	0x080012cb
 8001254:	080012a5 	.word	0x080012a5
 8001258:	080012b7 	.word	0x080012b7
 800125c:	080012f9 	.word	0x080012f9
 8001260:	080012ff 	.word	0x080012ff
 8001264:	080012ff 	.word	0x080012ff
 8001268:	080012ff 	.word	0x080012ff
 800126c:	080012ff 	.word	0x080012ff
 8001270:	080012ff 	.word	0x080012ff
 8001274:	080012ff 	.word	0x080012ff
 8001278:	080012ff 	.word	0x080012ff
 800127c:	080012ff 	.word	0x080012ff
 8001280:	080012ff 	.word	0x080012ff
 8001284:	080012ff 	.word	0x080012ff
 8001288:	080012ff 	.word	0x080012ff
 800128c:	080012ff 	.word	0x080012ff
 8001290:	080012ff 	.word	0x080012ff
 8001294:	080012ad 	.word	0x080012ad
 8001298:	080012c1 	.word	0x080012c1
 800129c:	4a79      	ldr	r2, [pc, #484]	@ (8001484 <HAL_GPIO_Init+0x2b4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d013      	beq.n	80012ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012a2:	e02c      	b.n	80012fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	623b      	str	r3, [r7, #32]
          break;
 80012aa:	e029      	b.n	8001300 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	3304      	adds	r3, #4
 80012b2:	623b      	str	r3, [r7, #32]
          break;
 80012b4:	e024      	b.n	8001300 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	3308      	adds	r3, #8
 80012bc:	623b      	str	r3, [r7, #32]
          break;
 80012be:	e01f      	b.n	8001300 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	330c      	adds	r3, #12
 80012c6:	623b      	str	r3, [r7, #32]
          break;
 80012c8:	e01a      	b.n	8001300 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d102      	bne.n	80012d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012d2:	2304      	movs	r3, #4
 80012d4:	623b      	str	r3, [r7, #32]
          break;
 80012d6:	e013      	b.n	8001300 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d105      	bne.n	80012ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e0:	2308      	movs	r3, #8
 80012e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69fa      	ldr	r2, [r7, #28]
 80012e8:	611a      	str	r2, [r3, #16]
          break;
 80012ea:	e009      	b.n	8001300 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012ec:	2308      	movs	r3, #8
 80012ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69fa      	ldr	r2, [r7, #28]
 80012f4:	615a      	str	r2, [r3, #20]
          break;
 80012f6:	e003      	b.n	8001300 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
          break;
 80012fc:	e000      	b.n	8001300 <HAL_GPIO_Init+0x130>
          break;
 80012fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	2bff      	cmp	r3, #255	@ 0xff
 8001304:	d801      	bhi.n	800130a <HAL_GPIO_Init+0x13a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	e001      	b.n	800130e <HAL_GPIO_Init+0x13e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3304      	adds	r3, #4
 800130e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	2bff      	cmp	r3, #255	@ 0xff
 8001314:	d802      	bhi.n	800131c <HAL_GPIO_Init+0x14c>
 8001316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	e002      	b.n	8001322 <HAL_GPIO_Init+0x152>
 800131c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131e:	3b08      	subs	r3, #8
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	210f      	movs	r1, #15
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	fa01 f303 	lsl.w	r3, r1, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	401a      	ands	r2, r3
 8001334:	6a39      	ldr	r1, [r7, #32]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	fa01 f303 	lsl.w	r3, r1, r3
 800133c:	431a      	orrs	r2, r3
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 80b1 	beq.w	80014b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001350:	4b4d      	ldr	r3, [pc, #308]	@ (8001488 <HAL_GPIO_Init+0x2b8>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a4c      	ldr	r2, [pc, #304]	@ (8001488 <HAL_GPIO_Init+0x2b8>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b4a      	ldr	r3, [pc, #296]	@ (8001488 <HAL_GPIO_Init+0x2b8>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001368:	4a48      	ldr	r2, [pc, #288]	@ (800148c <HAL_GPIO_Init+0x2bc>)
 800136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3302      	adds	r3, #2
 8001370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001374:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	4013      	ands	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a40      	ldr	r2, [pc, #256]	@ (8001490 <HAL_GPIO_Init+0x2c0>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d013      	beq.n	80013bc <HAL_GPIO_Init+0x1ec>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a3f      	ldr	r2, [pc, #252]	@ (8001494 <HAL_GPIO_Init+0x2c4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d00d      	beq.n	80013b8 <HAL_GPIO_Init+0x1e8>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a3e      	ldr	r2, [pc, #248]	@ (8001498 <HAL_GPIO_Init+0x2c8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d007      	beq.n	80013b4 <HAL_GPIO_Init+0x1e4>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a3d      	ldr	r2, [pc, #244]	@ (800149c <HAL_GPIO_Init+0x2cc>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d101      	bne.n	80013b0 <HAL_GPIO_Init+0x1e0>
 80013ac:	2303      	movs	r3, #3
 80013ae:	e006      	b.n	80013be <HAL_GPIO_Init+0x1ee>
 80013b0:	2304      	movs	r3, #4
 80013b2:	e004      	b.n	80013be <HAL_GPIO_Init+0x1ee>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e002      	b.n	80013be <HAL_GPIO_Init+0x1ee>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <HAL_GPIO_Init+0x1ee>
 80013bc:	2300      	movs	r3, #0
 80013be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013c0:	f002 0203 	and.w	r2, r2, #3
 80013c4:	0092      	lsls	r2, r2, #2
 80013c6:	4093      	lsls	r3, r2
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013ce:	492f      	ldr	r1, [pc, #188]	@ (800148c <HAL_GPIO_Init+0x2bc>)
 80013d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	3302      	adds	r3, #2
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013e8:	4b2d      	ldr	r3, [pc, #180]	@ (80014a0 <HAL_GPIO_Init+0x2d0>)
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	492c      	ldr	r1, [pc, #176]	@ (80014a0 <HAL_GPIO_Init+0x2d0>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013f6:	4b2a      	ldr	r3, [pc, #168]	@ (80014a0 <HAL_GPIO_Init+0x2d0>)
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	4928      	ldr	r1, [pc, #160]	@ (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001400:	4013      	ands	r3, r2
 8001402:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001410:	4b23      	ldr	r3, [pc, #140]	@ (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	4922      	ldr	r1, [pc, #136]	@ (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	60cb      	str	r3, [r1, #12]
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800141e:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	43db      	mvns	r3, r3
 8001426:	491e      	ldr	r1, [pc, #120]	@ (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001428:	4013      	ands	r3, r2
 800142a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001438:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <HAL_GPIO_Init+0x2d0>)
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	4918      	ldr	r1, [pc, #96]	@ (80014a0 <HAL_GPIO_Init+0x2d0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	604b      	str	r3, [r1, #4]
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	43db      	mvns	r3, r3
 800144e:	4914      	ldr	r1, [pc, #80]	@ (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001450:	4013      	ands	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d021      	beq.n	80014a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	490e      	ldr	r1, [pc, #56]	@ (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
 800146c:	e021      	b.n	80014b2 <HAL_GPIO_Init+0x2e2>
 800146e:	bf00      	nop
 8001470:	10320000 	.word	0x10320000
 8001474:	10310000 	.word	0x10310000
 8001478:	10220000 	.word	0x10220000
 800147c:	10210000 	.word	0x10210000
 8001480:	10120000 	.word	0x10120000
 8001484:	10110000 	.word	0x10110000
 8001488:	40021000 	.word	0x40021000
 800148c:	40010000 	.word	0x40010000
 8001490:	40010800 	.word	0x40010800
 8001494:	40010c00 	.word	0x40010c00
 8001498:	40011000 	.word	0x40011000
 800149c:	40011400 	.word	0x40011400
 80014a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014a4:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <HAL_GPIO_Init+0x304>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	4909      	ldr	r1, [pc, #36]	@ (80014d4 <HAL_GPIO_Init+0x304>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b4:	3301      	adds	r3, #1
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014be:	fa22 f303 	lsr.w	r3, r2, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f47f ae8e 	bne.w	80011e4 <HAL_GPIO_Init+0x14>
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	372c      	adds	r7, #44	@ 0x2c
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	40010400 	.word	0x40010400

080014d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	807b      	strh	r3, [r7, #2]
 80014e4:	4613      	mov	r3, r2
 80014e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014e8:	787b      	ldrb	r3, [r7, #1]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ee:	887a      	ldrh	r2, [r7, #2]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014f4:	e003      	b.n	80014fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014f6:	887b      	ldrh	r3, [r7, #2]
 80014f8:	041a      	lsls	r2, r3, #16
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	611a      	str	r2, [r3, #16]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e272      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 8087 	beq.w	8001636 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001528:	4b92      	ldr	r3, [pc, #584]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b04      	cmp	r3, #4
 8001532:	d00c      	beq.n	800154e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001534:	4b8f      	ldr	r3, [pc, #572]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	2b08      	cmp	r3, #8
 800153e:	d112      	bne.n	8001566 <HAL_RCC_OscConfig+0x5e>
 8001540:	4b8c      	ldr	r3, [pc, #560]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800154c:	d10b      	bne.n	8001566 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154e:	4b89      	ldr	r3, [pc, #548]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d06c      	beq.n	8001634 <HAL_RCC_OscConfig+0x12c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d168      	bne.n	8001634 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e24c      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800156e:	d106      	bne.n	800157e <HAL_RCC_OscConfig+0x76>
 8001570:	4b80      	ldr	r3, [pc, #512]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a7f      	ldr	r2, [pc, #508]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	e02e      	b.n	80015dc <HAL_RCC_OscConfig+0xd4>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x98>
 8001586:	4b7b      	ldr	r3, [pc, #492]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a7a      	ldr	r2, [pc, #488]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 800158c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b78      	ldr	r3, [pc, #480]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a77      	ldr	r2, [pc, #476]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001598:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e01d      	b.n	80015dc <HAL_RCC_OscConfig+0xd4>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0xbc>
 80015aa:	4b72      	ldr	r3, [pc, #456]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a71      	ldr	r2, [pc, #452]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0xd4>
 80015c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a6a      	ldr	r2, [pc, #424]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b68      	ldr	r3, [pc, #416]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a67      	ldr	r2, [pc, #412]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d013      	beq.n	800160c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fd0a 	bl	8000ffc <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fd06 	bl	8000ffc <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	@ 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e200      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0xe4>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fcf6 	bl	8000ffc <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fcf2 	bl	8000ffc <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	@ 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e1ec      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001626:	4b53      	ldr	r3, [pc, #332]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x10c>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d063      	beq.n	800170a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001642:	4b4c      	ldr	r3, [pc, #304]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00b      	beq.n	8001666 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800164e:	4b49      	ldr	r3, [pc, #292]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b08      	cmp	r3, #8
 8001658:	d11c      	bne.n	8001694 <HAL_RCC_OscConfig+0x18c>
 800165a:	4b46      	ldr	r3, [pc, #280]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d116      	bne.n	8001694 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001666:	4b43      	ldr	r3, [pc, #268]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <HAL_RCC_OscConfig+0x176>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d001      	beq.n	800167e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e1c0      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b3d      	ldr	r3, [pc, #244]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4939      	ldr	r1, [pc, #228]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001692:	e03a      	b.n	800170a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d020      	beq.n	80016de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800169c:	4b36      	ldr	r3, [pc, #216]	@ (8001778 <HAL_RCC_OscConfig+0x270>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fcab 	bl	8000ffc <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016aa:	f7ff fca7 	bl	8000ffc <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e1a1      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4927      	ldr	r1, [pc, #156]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
 80016dc:	e015      	b.n	800170a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016de:	4b26      	ldr	r3, [pc, #152]	@ (8001778 <HAL_RCC_OscConfig+0x270>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fc8a 	bl	8000ffc <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ec:	f7ff fc86 	bl	8000ffc <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e180      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d03a      	beq.n	800178c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d019      	beq.n	8001752 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171e:	4b17      	ldr	r3, [pc, #92]	@ (800177c <HAL_RCC_OscConfig+0x274>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001724:	f7ff fc6a 	bl	8000ffc <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172c:	f7ff fc66 	bl	8000ffc <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e160      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800174a:	2001      	movs	r0, #1
 800174c:	f000 fafe 	bl	8001d4c <RCC_Delay>
 8001750:	e01c      	b.n	800178c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <HAL_RCC_OscConfig+0x274>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7ff fc50 	bl	8000ffc <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175e:	e00f      	b.n	8001780 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff fc4c 	bl	8000ffc <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d908      	bls.n	8001780 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e146      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000
 8001778:	42420000 	.word	0x42420000
 800177c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001780:	4b92      	ldr	r3, [pc, #584]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1e9      	bne.n	8001760 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 80a6 	beq.w	80018e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179e:	4b8b      	ldr	r3, [pc, #556]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10d      	bne.n	80017c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b88      	ldr	r3, [pc, #544]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4a87      	ldr	r2, [pc, #540]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b4:	61d3      	str	r3, [r2, #28]
 80017b6:	4b85      	ldr	r3, [pc, #532]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c2:	2301      	movs	r3, #1
 80017c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c6:	4b82      	ldr	r3, [pc, #520]	@ (80019d0 <HAL_RCC_OscConfig+0x4c8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d118      	bne.n	8001804 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d2:	4b7f      	ldr	r3, [pc, #508]	@ (80019d0 <HAL_RCC_OscConfig+0x4c8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a7e      	ldr	r2, [pc, #504]	@ (80019d0 <HAL_RCC_OscConfig+0x4c8>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017de:	f7ff fc0d 	bl	8000ffc <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e6:	f7ff fc09 	bl	8000ffc <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b64      	cmp	r3, #100	@ 0x64
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e103      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f8:	4b75      	ldr	r3, [pc, #468]	@ (80019d0 <HAL_RCC_OscConfig+0x4c8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x312>
 800180c:	4b6f      	ldr	r3, [pc, #444]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4a6e      	ldr	r2, [pc, #440]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6213      	str	r3, [r2, #32]
 8001818:	e02d      	b.n	8001876 <HAL_RCC_OscConfig+0x36e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x334>
 8001822:	4b6a      	ldr	r3, [pc, #424]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4a69      	ldr	r2, [pc, #420]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	6213      	str	r3, [r2, #32]
 800182e:	4b67      	ldr	r3, [pc, #412]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	4a66      	ldr	r2, [pc, #408]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001834:	f023 0304 	bic.w	r3, r3, #4
 8001838:	6213      	str	r3, [r2, #32]
 800183a:	e01c      	b.n	8001876 <HAL_RCC_OscConfig+0x36e>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b05      	cmp	r3, #5
 8001842:	d10c      	bne.n	800185e <HAL_RCC_OscConfig+0x356>
 8001844:	4b61      	ldr	r3, [pc, #388]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a60      	ldr	r2, [pc, #384]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800184a:	f043 0304 	orr.w	r3, r3, #4
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	4b5e      	ldr	r3, [pc, #376]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4a5d      	ldr	r2, [pc, #372]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6213      	str	r3, [r2, #32]
 800185c:	e00b      	b.n	8001876 <HAL_RCC_OscConfig+0x36e>
 800185e:	4b5b      	ldr	r3, [pc, #364]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4a5a      	ldr	r2, [pc, #360]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	6213      	str	r3, [r2, #32]
 800186a:	4b58      	ldr	r3, [pc, #352]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	4a57      	ldr	r2, [pc, #348]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001870:	f023 0304 	bic.w	r3, r3, #4
 8001874:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d015      	beq.n	80018aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187e:	f7ff fbbd 	bl	8000ffc <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001884:	e00a      	b.n	800189c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f7ff fbb9 	bl	8000ffc <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e0b1      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189c:	4b4b      	ldr	r3, [pc, #300]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0ee      	beq.n	8001886 <HAL_RCC_OscConfig+0x37e>
 80018a8:	e014      	b.n	80018d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff fba7 	bl	8000ffc <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7ff fba3 	bl	8000ffc <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e09b      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c8:	4b40      	ldr	r3, [pc, #256]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1ee      	bne.n	80018b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d105      	bne.n	80018e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018da:	4b3c      	ldr	r3, [pc, #240]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4a3b      	ldr	r2, [pc, #236]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8087 	beq.w	80019fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f0:	4b36      	ldr	r3, [pc, #216]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d061      	beq.n	80019c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d146      	bne.n	8001992 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001904:	4b33      	ldr	r3, [pc, #204]	@ (80019d4 <HAL_RCC_OscConfig+0x4cc>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7ff fb77 	bl	8000ffc <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001912:	f7ff fb73 	bl	8000ffc <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e06d      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001924:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f0      	bne.n	8001912 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001938:	d108      	bne.n	800194c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800193a:	4b24      	ldr	r3, [pc, #144]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	4921      	ldr	r1, [pc, #132]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194c:	4b1f      	ldr	r3, [pc, #124]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a19      	ldr	r1, [r3, #32]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195c:	430b      	orrs	r3, r1
 800195e:	491b      	ldr	r1, [pc, #108]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001964:	4b1b      	ldr	r3, [pc, #108]	@ (80019d4 <HAL_RCC_OscConfig+0x4cc>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196a:	f7ff fb47 	bl	8000ffc <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001972:	f7ff fb43 	bl	8000ffc <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e03d      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x46a>
 8001990:	e035      	b.n	80019fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <HAL_RCC_OscConfig+0x4cc>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fb30 	bl	8000ffc <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff fb2c 	bl	8000ffc <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e026      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x498>
 80019be:	e01e      	b.n	80019fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d107      	bne.n	80019d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e019      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40007000 	.word	0x40007000
 80019d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <HAL_RCC_OscConfig+0x500>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d001      	beq.n	80019fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000

08001a0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0d0      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b6a      	ldr	r3, [pc, #424]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d910      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b67      	ldr	r3, [pc, #412]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 0207 	bic.w	r2, r3, #7
 8001a36:	4965      	ldr	r1, [pc, #404]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b63      	ldr	r3, [pc, #396]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0b8      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d020      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a68:	4b59      	ldr	r3, [pc, #356]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a58      	ldr	r2, [pc, #352]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a80:	4b53      	ldr	r3, [pc, #332]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4a52      	ldr	r2, [pc, #328]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8c:	4b50      	ldr	r3, [pc, #320]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	494d      	ldr	r1, [pc, #308]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d040      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	4b47      	ldr	r3, [pc, #284]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d115      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e07f      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aca:	4b41      	ldr	r3, [pc, #260]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e073      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ada:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e06b      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aea:	4b39      	ldr	r3, [pc, #228]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f023 0203 	bic.w	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4936      	ldr	r1, [pc, #216]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001afc:	f7ff fa7e 	bl	8000ffc <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b04:	f7ff fa7a 	bl	8000ffc <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e053      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 020c 	and.w	r2, r3, #12
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d1eb      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b27      	ldr	r3, [pc, #156]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d210      	bcs.n	8001b5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 0207 	bic.w	r2, r3, #7
 8001b42:	4922      	ldr	r1, [pc, #136]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e032      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b68:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4916      	ldr	r1, [pc, #88]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d009      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b86:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	490e      	ldr	r1, [pc, #56]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b9a:	f000 f821 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	490a      	ldr	r1, [pc, #40]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bac:	5ccb      	ldrb	r3, [r1, r3]
 8001bae:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb2:	4a09      	ldr	r2, [pc, #36]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bb6:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <HAL_RCC_ClockConfig+0x1d0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe ff2e 	bl	8000a1c <HAL_InitTick>

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40022000 	.word	0x40022000
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	08006008 	.word	0x08006008
 8001bd8:	20000018 	.word	0x20000018
 8001bdc:	2000001c 	.word	0x2000001c

08001be0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d002      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x30>
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d003      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0x36>
 8001c0e:	e027      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c10:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c12:	613b      	str	r3, [r7, #16]
      break;
 8001c14:	e027      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	0c9b      	lsrs	r3, r3, #18
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	4a17      	ldr	r2, [pc, #92]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d010      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c2e:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	0c5b      	lsrs	r3, r3, #17
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	4a11      	ldr	r2, [pc, #68]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c3a:	5cd3      	ldrb	r3, [r2, r3]
 8001c3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a0d      	ldr	r2, [pc, #52]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c42:	fb03 f202 	mul.w	r2, r3, r2
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	e004      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a0c      	ldr	r2, [pc, #48]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c54:	fb02 f303 	mul.w	r3, r2, r3
 8001c58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	613b      	str	r3, [r7, #16]
      break;
 8001c5e:	e002      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c62:	613b      	str	r3, [r7, #16]
      break;
 8001c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c66:	693b      	ldr	r3, [r7, #16]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	371c      	adds	r7, #28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	007a1200 	.word	0x007a1200
 8001c7c:	08006020 	.word	0x08006020
 8001c80:	08006030 	.word	0x08006030
 8001c84:	003d0900 	.word	0x003d0900

08001c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c8c:	4b02      	ldr	r3, [pc, #8]	@ (8001c98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	20000018 	.word	0x20000018

08001c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ca0:	f7ff fff2 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	4903      	ldr	r1, [pc, #12]	@ (8001cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	08006018 	.word	0x08006018

08001cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc8:	f7ff ffde 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	0adb      	lsrs	r3, r3, #11
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4903      	ldr	r1, [pc, #12]	@ (8001ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	08006018 	.word	0x08006018

08001cec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <HAL_RCC_GetClockConfig+0x58>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0203 	and.w	r2, r3, #3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d08:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <HAL_RCC_GetClockConfig+0x58>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d14:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <HAL_RCC_GetClockConfig+0x58>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <HAL_RCC_GetClockConfig+0x58>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	08db      	lsrs	r3, r3, #3
 8001d26:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_RCC_GetClockConfig+0x5c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0207 	and.w	r2, r3, #7
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40022000 	.word	0x40022000

08001d4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d54:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <RCC_Delay+0x34>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0a      	ldr	r2, [pc, #40]	@ (8001d84 <RCC_Delay+0x38>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	0a5b      	lsrs	r3, r3, #9
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d68:	bf00      	nop
  }
  while (Delay --);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1e5a      	subs	r2, r3, #1
 8001d6e:	60fa      	str	r2, [r7, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f9      	bne.n	8001d68 <RCC_Delay+0x1c>
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	20000018 	.word	0x20000018
 8001d84:	10624dd3 	.word	0x10624dd3

08001d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e041      	b.n	8001e1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d106      	bne.n	8001db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff f810 	bl	8000dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	f000 fd80 	bl	80028cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d001      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e03a      	b.n	8001eb6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2202      	movs	r2, #2
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a18      	ldr	r2, [pc, #96]	@ (8001ec0 <HAL_TIM_Base_Start_IT+0x98>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00e      	beq.n	8001e80 <HAL_TIM_Base_Start_IT+0x58>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e6a:	d009      	beq.n	8001e80 <HAL_TIM_Base_Start_IT+0x58>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a14      	ldr	r2, [pc, #80]	@ (8001ec4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d004      	beq.n	8001e80 <HAL_TIM_Base_Start_IT+0x58>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a13      	ldr	r2, [pc, #76]	@ (8001ec8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d111      	bne.n	8001ea4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b06      	cmp	r3, #6
 8001e90:	d010      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea2:	e007      	b.n	8001eb4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	40012c00 	.word	0x40012c00
 8001ec4:	40000400 	.word	0x40000400
 8001ec8:	40000800 	.word	0x40000800

08001ecc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e041      	b.n	8001f62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f839 	bl	8001f6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3304      	adds	r3, #4
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	f000 fcde 	bl	80028cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d109      	bne.n	8001fa0 <HAL_TIM_PWM_Start+0x24>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	bf14      	ite	ne
 8001f98:	2301      	movne	r3, #1
 8001f9a:	2300      	moveq	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	e022      	b.n	8001fe6 <HAL_TIM_PWM_Start+0x6a>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d109      	bne.n	8001fba <HAL_TIM_PWM_Start+0x3e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	bf14      	ite	ne
 8001fb2:	2301      	movne	r3, #1
 8001fb4:	2300      	moveq	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	e015      	b.n	8001fe6 <HAL_TIM_PWM_Start+0x6a>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d109      	bne.n	8001fd4 <HAL_TIM_PWM_Start+0x58>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	bf14      	ite	ne
 8001fcc:	2301      	movne	r3, #1
 8001fce:	2300      	moveq	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	e008      	b.n	8001fe6 <HAL_TIM_PWM_Start+0x6a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	bf14      	ite	ne
 8001fe0:	2301      	movne	r3, #1
 8001fe2:	2300      	moveq	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e05e      	b.n	80020ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d104      	bne.n	8001ffe <HAL_TIM_PWM_Start+0x82>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ffc:	e013      	b.n	8002026 <HAL_TIM_PWM_Start+0xaa>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b04      	cmp	r3, #4
 8002002:	d104      	bne.n	800200e <HAL_TIM_PWM_Start+0x92>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800200c:	e00b      	b.n	8002026 <HAL_TIM_PWM_Start+0xaa>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b08      	cmp	r3, #8
 8002012:	d104      	bne.n	800201e <HAL_TIM_PWM_Start+0xa2>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800201c:	e003      	b.n	8002026 <HAL_TIM_PWM_Start+0xaa>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2202      	movs	r2, #2
 8002022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2201      	movs	r2, #1
 800202c:	6839      	ldr	r1, [r7, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f000 ffd9 	bl	8002fe6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1e      	ldr	r2, [pc, #120]	@ (80020b4 <HAL_TIM_PWM_Start+0x138>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d107      	bne.n	800204e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800204c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a18      	ldr	r2, [pc, #96]	@ (80020b4 <HAL_TIM_PWM_Start+0x138>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00e      	beq.n	8002076 <HAL_TIM_PWM_Start+0xfa>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002060:	d009      	beq.n	8002076 <HAL_TIM_PWM_Start+0xfa>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a14      	ldr	r2, [pc, #80]	@ (80020b8 <HAL_TIM_PWM_Start+0x13c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d004      	beq.n	8002076 <HAL_TIM_PWM_Start+0xfa>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a12      	ldr	r2, [pc, #72]	@ (80020bc <HAL_TIM_PWM_Start+0x140>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d111      	bne.n	800209a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b06      	cmp	r3, #6
 8002086:	d010      	beq.n	80020aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002098:	e007      	b.n	80020aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40012c00 	.word	0x40012c00
 80020b8:	40000400 	.word	0x40000400
 80020bc:	40000800 	.word	0x40000800

080020c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2200      	movs	r2, #0
 80020d0:	6839      	ldr	r1, [r7, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 ff87 	bl	8002fe6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a29      	ldr	r2, [pc, #164]	@ (8002184 <HAL_TIM_PWM_Stop+0xc4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d117      	bne.n	8002112 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a1a      	ldr	r2, [r3, #32]
 80020e8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10f      	bne.n	8002112 <HAL_TIM_PWM_Stop+0x52>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6a1a      	ldr	r2, [r3, #32]
 80020f8:	f240 4344 	movw	r3, #1092	@ 0x444
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d107      	bne.n	8002112 <HAL_TIM_PWM_Stop+0x52>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002110:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6a1a      	ldr	r2, [r3, #32]
 8002118:	f241 1311 	movw	r3, #4369	@ 0x1111
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10f      	bne.n	8002142 <HAL_TIM_PWM_Stop+0x82>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6a1a      	ldr	r2, [r3, #32]
 8002128:	f240 4344 	movw	r3, #1092	@ 0x444
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d107      	bne.n	8002142 <HAL_TIM_PWM_Stop+0x82>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0201 	bic.w	r2, r2, #1
 8002140:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d104      	bne.n	8002152 <HAL_TIM_PWM_Stop+0x92>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002150:	e013      	b.n	800217a <HAL_TIM_PWM_Stop+0xba>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b04      	cmp	r3, #4
 8002156:	d104      	bne.n	8002162 <HAL_TIM_PWM_Stop+0xa2>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002160:	e00b      	b.n	800217a <HAL_TIM_PWM_Stop+0xba>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b08      	cmp	r3, #8
 8002166:	d104      	bne.n	8002172 <HAL_TIM_PWM_Stop+0xb2>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002170:	e003      	b.n	800217a <HAL_TIM_PWM_Stop+0xba>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40012c00 	.word	0x40012c00

08002188 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e041      	b.n	800221e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe fda4 	bl	8000cfc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3304      	adds	r3, #4
 80021c4:	4619      	mov	r1, r3
 80021c6:	4610      	mov	r0, r2
 80021c8:	f000 fb80 	bl	80028cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b02      	cmp	r3, #2
 800223a:	d122      	bne.n	8002282 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b02      	cmp	r3, #2
 8002248:	d11b      	bne.n	8002282 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f06f 0202 	mvn.w	r2, #2
 8002252:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 fb13 	bl	8002894 <HAL_TIM_IC_CaptureCallback>
 800226e:	e005      	b.n	800227c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 fb06 	bl	8002882 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fb15 	bl	80028a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b04      	cmp	r3, #4
 800228e:	d122      	bne.n	80022d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b04      	cmp	r3, #4
 800229c:	d11b      	bne.n	80022d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f06f 0204 	mvn.w	r2, #4
 80022a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 fae9 	bl	8002894 <HAL_TIM_IC_CaptureCallback>
 80022c2:	e005      	b.n	80022d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fadc 	bl	8002882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 faeb 	bl	80028a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d122      	bne.n	800232a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d11b      	bne.n	800232a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f06f 0208 	mvn.w	r2, #8
 80022fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2204      	movs	r2, #4
 8002300:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 fabf 	bl	8002894 <HAL_TIM_IC_CaptureCallback>
 8002316:	e005      	b.n	8002324 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 fab2 	bl	8002882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fac1 	bl	80028a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b10      	cmp	r3, #16
 8002336:	d122      	bne.n	800237e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b10      	cmp	r3, #16
 8002344:	d11b      	bne.n	800237e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f06f 0210 	mvn.w	r2, #16
 800234e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2208      	movs	r2, #8
 8002354:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fa95 	bl	8002894 <HAL_TIM_IC_CaptureCallback>
 800236a:	e005      	b.n	8002378 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fa88 	bl	8002882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fa97 	bl	80028a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	d10e      	bne.n	80023aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b01      	cmp	r3, #1
 8002398:	d107      	bne.n	80023aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f06f 0201 	mvn.w	r2, #1
 80023a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7fe fae9 	bl	800097c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b4:	2b80      	cmp	r3, #128	@ 0x80
 80023b6:	d10e      	bne.n	80023d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c2:	2b80      	cmp	r3, #128	@ 0x80
 80023c4:	d107      	bne.n	80023d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fe94 	bl	80030fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e0:	2b40      	cmp	r3, #64	@ 0x40
 80023e2:	d10e      	bne.n	8002402 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ee:	2b40      	cmp	r3, #64	@ 0x40
 80023f0:	d107      	bne.n	8002402 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 fa5b 	bl	80028b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b20      	cmp	r3, #32
 800240e:	d10e      	bne.n	800242e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b20      	cmp	r3, #32
 800241c:	d107      	bne.n	800242e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f06f 0220 	mvn.w	r2, #32
 8002426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fe5f 	bl	80030ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002450:	2302      	movs	r3, #2
 8002452:	e088      	b.n	8002566 <HAL_TIM_IC_ConfigChannel+0x130>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d11b      	bne.n	800249a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002472:	f000 fc15 	bl	8002ca0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	699a      	ldr	r2, [r3, #24]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 020c 	bic.w	r2, r2, #12
 8002484:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6999      	ldr	r1, [r3, #24]
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	619a      	str	r2, [r3, #24]
 8002498:	e060      	b.n	800255c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b04      	cmp	r3, #4
 800249e:	d11c      	bne.n	80024da <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80024b0:	f000 fc7e 	bl	8002db0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699a      	ldr	r2, [r3, #24]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80024c2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6999      	ldr	r1, [r3, #24]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	021a      	lsls	r2, r3, #8
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	619a      	str	r2, [r3, #24]
 80024d8:	e040      	b.n	800255c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d11b      	bne.n	8002518 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80024f0:	f000 fcc9 	bl	8002e86 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 020c 	bic.w	r2, r2, #12
 8002502:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69d9      	ldr	r1, [r3, #28]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	61da      	str	r2, [r3, #28]
 8002516:	e021      	b.n	800255c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d11c      	bne.n	8002558 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800252e:	f000 fce5 	bl	8002efc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69da      	ldr	r2, [r3, #28]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002540:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69d9      	ldr	r1, [r3, #28]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	021a      	lsls	r2, r3, #8
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	61da      	str	r2, [r3, #28]
 8002556:	e001      	b.n	800255c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002564:	7dfb      	ldrb	r3, [r7, #23]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800258a:	2302      	movs	r3, #2
 800258c:	e0ae      	b.n	80026ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b0c      	cmp	r3, #12
 800259a:	f200 809f 	bhi.w	80026dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800259e:	a201      	add	r2, pc, #4	@ (adr r2, 80025a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a4:	080025d9 	.word	0x080025d9
 80025a8:	080026dd 	.word	0x080026dd
 80025ac:	080026dd 	.word	0x080026dd
 80025b0:	080026dd 	.word	0x080026dd
 80025b4:	08002619 	.word	0x08002619
 80025b8:	080026dd 	.word	0x080026dd
 80025bc:	080026dd 	.word	0x080026dd
 80025c0:	080026dd 	.word	0x080026dd
 80025c4:	0800265b 	.word	0x0800265b
 80025c8:	080026dd 	.word	0x080026dd
 80025cc:	080026dd 	.word	0x080026dd
 80025d0:	080026dd 	.word	0x080026dd
 80025d4:	0800269b 	.word	0x0800269b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 f9d6 	bl	8002990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0208 	orr.w	r2, r2, #8
 80025f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0204 	bic.w	r2, r2, #4
 8002602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6999      	ldr	r1, [r3, #24]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	691a      	ldr	r2, [r3, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	619a      	str	r2, [r3, #24]
      break;
 8002616:	e064      	b.n	80026e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fa1c 	bl	8002a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6999      	ldr	r1, [r3, #24]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	021a      	lsls	r2, r3, #8
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	619a      	str	r2, [r3, #24]
      break;
 8002658:	e043      	b.n	80026e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68b9      	ldr	r1, [r7, #8]
 8002660:	4618      	mov	r0, r3
 8002662:	f000 fa65 	bl	8002b30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69da      	ldr	r2, [r3, #28]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0208 	orr.w	r2, r2, #8
 8002674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	69da      	ldr	r2, [r3, #28]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0204 	bic.w	r2, r2, #4
 8002684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	69d9      	ldr	r1, [r3, #28]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	61da      	str	r2, [r3, #28]
      break;
 8002698:	e023      	b.n	80026e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 faaf 	bl	8002c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69da      	ldr	r2, [r3, #28]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69da      	ldr	r2, [r3, #28]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	69d9      	ldr	r1, [r3, #28]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	021a      	lsls	r2, r3, #8
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	61da      	str	r2, [r3, #28]
      break;
 80026da:	e002      	b.n	80026e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	75fb      	strb	r3, [r7, #23]
      break;
 80026e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_TIM_ConfigClockSource+0x1c>
 800270c:	2302      	movs	r3, #2
 800270e:	e0b4      	b.n	800287a <HAL_TIM_ConfigClockSource+0x186>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800272e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002748:	d03e      	beq.n	80027c8 <HAL_TIM_ConfigClockSource+0xd4>
 800274a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800274e:	f200 8087 	bhi.w	8002860 <HAL_TIM_ConfigClockSource+0x16c>
 8002752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002756:	f000 8086 	beq.w	8002866 <HAL_TIM_ConfigClockSource+0x172>
 800275a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800275e:	d87f      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x16c>
 8002760:	2b70      	cmp	r3, #112	@ 0x70
 8002762:	d01a      	beq.n	800279a <HAL_TIM_ConfigClockSource+0xa6>
 8002764:	2b70      	cmp	r3, #112	@ 0x70
 8002766:	d87b      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x16c>
 8002768:	2b60      	cmp	r3, #96	@ 0x60
 800276a:	d050      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x11a>
 800276c:	2b60      	cmp	r3, #96	@ 0x60
 800276e:	d877      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x16c>
 8002770:	2b50      	cmp	r3, #80	@ 0x50
 8002772:	d03c      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0xfa>
 8002774:	2b50      	cmp	r3, #80	@ 0x50
 8002776:	d873      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x16c>
 8002778:	2b40      	cmp	r3, #64	@ 0x40
 800277a:	d058      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x13a>
 800277c:	2b40      	cmp	r3, #64	@ 0x40
 800277e:	d86f      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x16c>
 8002780:	2b30      	cmp	r3, #48	@ 0x30
 8002782:	d064      	beq.n	800284e <HAL_TIM_ConfigClockSource+0x15a>
 8002784:	2b30      	cmp	r3, #48	@ 0x30
 8002786:	d86b      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x16c>
 8002788:	2b20      	cmp	r3, #32
 800278a:	d060      	beq.n	800284e <HAL_TIM_ConfigClockSource+0x15a>
 800278c:	2b20      	cmp	r3, #32
 800278e:	d867      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x16c>
 8002790:	2b00      	cmp	r3, #0
 8002792:	d05c      	beq.n	800284e <HAL_TIM_ConfigClockSource+0x15a>
 8002794:	2b10      	cmp	r3, #16
 8002796:	d05a      	beq.n	800284e <HAL_TIM_ConfigClockSource+0x15a>
 8002798:	e062      	b.n	8002860 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027aa:	f000 fbfd 	bl	8002fa8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	609a      	str	r2, [r3, #8]
      break;
 80027c6:	e04f      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027d8:	f000 fbe6 	bl	8002fa8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027ea:	609a      	str	r2, [r3, #8]
      break;
 80027ec:	e03c      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fa:	461a      	mov	r2, r3
 80027fc:	f000 faaa 	bl	8002d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2150      	movs	r1, #80	@ 0x50
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fbb4 	bl	8002f74 <TIM_ITRx_SetConfig>
      break;
 800280c:	e02c      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800281a:	461a      	mov	r2, r3
 800281c:	f000 fb04 	bl	8002e28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2160      	movs	r1, #96	@ 0x60
 8002826:	4618      	mov	r0, r3
 8002828:	f000 fba4 	bl	8002f74 <TIM_ITRx_SetConfig>
      break;
 800282c:	e01c      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800283a:	461a      	mov	r2, r3
 800283c:	f000 fa8a 	bl	8002d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2140      	movs	r1, #64	@ 0x40
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fb94 	bl	8002f74 <TIM_ITRx_SetConfig>
      break;
 800284c:	e00c      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4619      	mov	r1, r3
 8002858:	4610      	mov	r0, r2
 800285a:	f000 fb8b 	bl	8002f74 <TIM_ITRx_SetConfig>
      break;
 800285e:	e003      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
      break;
 8002864:	e000      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002866:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002878:	7bfb      	ldrb	r3, [r7, #15]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
	...

080028cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a29      	ldr	r2, [pc, #164]	@ (8002984 <TIM_Base_SetConfig+0xb8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00b      	beq.n	80028fc <TIM_Base_SetConfig+0x30>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ea:	d007      	beq.n	80028fc <TIM_Base_SetConfig+0x30>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a26      	ldr	r2, [pc, #152]	@ (8002988 <TIM_Base_SetConfig+0xbc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d003      	beq.n	80028fc <TIM_Base_SetConfig+0x30>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a25      	ldr	r2, [pc, #148]	@ (800298c <TIM_Base_SetConfig+0xc0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d108      	bne.n	800290e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a1c      	ldr	r2, [pc, #112]	@ (8002984 <TIM_Base_SetConfig+0xb8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00b      	beq.n	800292e <TIM_Base_SetConfig+0x62>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800291c:	d007      	beq.n	800292e <TIM_Base_SetConfig+0x62>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a19      	ldr	r2, [pc, #100]	@ (8002988 <TIM_Base_SetConfig+0xbc>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d003      	beq.n	800292e <TIM_Base_SetConfig+0x62>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a18      	ldr	r2, [pc, #96]	@ (800298c <TIM_Base_SetConfig+0xc0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d108      	bne.n	8002940 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a07      	ldr	r2, [pc, #28]	@ (8002984 <TIM_Base_SetConfig+0xb8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d103      	bne.n	8002974 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	615a      	str	r2, [r3, #20]
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	40012c00 	.word	0x40012c00
 8002988:	40000400 	.word	0x40000400
 800298c:	40000800 	.word	0x40000800

08002990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f023 0201 	bic.w	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f023 0302 	bic.w	r3, r3, #2
 80029d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a58 <TIM_OC1_SetConfig+0xc8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d10c      	bne.n	8002a06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f023 0308 	bic.w	r3, r3, #8
 80029f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a13      	ldr	r2, [pc, #76]	@ (8002a58 <TIM_OC1_SetConfig+0xc8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d111      	bne.n	8002a32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	621a      	str	r2, [r3, #32]
}
 8002a4c:	bf00      	nop
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40012c00 	.word	0x40012c00

08002a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f023 0210 	bic.w	r2, r3, #16
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f023 0320 	bic.w	r3, r3, #32
 8002aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8002b2c <TIM_OC2_SetConfig+0xd0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d10d      	bne.n	8002ad8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ad6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a14      	ldr	r2, [pc, #80]	@ (8002b2c <TIM_OC2_SetConfig+0xd0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d113      	bne.n	8002b08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002aee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	621a      	str	r2, [r3, #32]
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	40012c00 	.word	0x40012c00

08002b30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0303 	bic.w	r3, r3, #3
 8002b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1d      	ldr	r2, [pc, #116]	@ (8002c00 <TIM_OC3_SetConfig+0xd0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d10d      	bne.n	8002baa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a14      	ldr	r2, [pc, #80]	@ (8002c00 <TIM_OC3_SetConfig+0xd0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d113      	bne.n	8002bda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	621a      	str	r2, [r3, #32]
}
 8002bf4:	bf00      	nop
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40012c00 	.word	0x40012c00

08002c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	031b      	lsls	r3, r3, #12
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8002c9c <TIM_OC4_SetConfig+0x98>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d109      	bne.n	8002c78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	019b      	lsls	r3, r3, #6
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	621a      	str	r2, [r3, #32]
}
 8002c92:	bf00      	nop
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr
 8002c9c:	40012c00 	.word	0x40012c00

08002ca0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f023 0201 	bic.w	r2, r3, #1
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d48 <TIM_TI1_SetConfig+0xa8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00b      	beq.n	8002ce6 <TIM_TI1_SetConfig+0x46>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd4:	d007      	beq.n	8002ce6 <TIM_TI1_SetConfig+0x46>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d4c <TIM_TI1_SetConfig+0xac>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d003      	beq.n	8002ce6 <TIM_TI1_SetConfig+0x46>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d50 <TIM_TI1_SetConfig+0xb0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <TIM_TI1_SetConfig+0x4a>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <TIM_TI1_SetConfig+0x4c>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f023 0303 	bic.w	r3, r3, #3
 8002cf6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	e003      	b.n	8002d0a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f023 030a 	bic.w	r3, r3, #10
 8002d24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f003 030a 	and.w	r3, r3, #10
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	621a      	str	r2, [r3, #32]
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800

08002d54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f023 0201 	bic.w	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f023 030a 	bic.w	r3, r3, #10
 8002d90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	621a      	str	r2, [r3, #32]
}
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f023 0210 	bic.w	r2, r3, #16
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ddc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	031b      	lsls	r3, r3, #12
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e02:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	621a      	str	r2, [r3, #32]
}
 8002e1e:	bf00      	nop
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	f023 0210 	bic.w	r2, r3, #16
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	031b      	lsls	r3, r3, #12
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	621a      	str	r2, [r3, #32]
}
 8002e7c:	bf00      	nop
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr

08002e86 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b087      	sub	sp, #28
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f023 0303 	bic.w	r3, r3, #3
 8002eb2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ec2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ed6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	621a      	str	r2, [r3, #32]
}
 8002ef2:	bf00      	nop
 8002ef4:	371c      	adds	r7, #28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f28:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f3a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	031b      	lsls	r3, r3, #12
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f4e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	031b      	lsls	r3, r3, #12
 8002f54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	621a      	str	r2, [r3, #32]
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f043 0307 	orr.w	r3, r3, #7
 8002f96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	609a      	str	r2, [r3, #8]
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	021a      	lsls	r2, r3, #8
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	609a      	str	r2, [r3, #8]
}
 8002fdc:	bf00      	nop
 8002fde:	371c      	adds	r7, #28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b087      	sub	sp, #28
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a1a      	ldr	r2, [r3, #32]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	43db      	mvns	r3, r3
 8003008:	401a      	ands	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a1a      	ldr	r2, [r3, #32]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	431a      	orrs	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	621a      	str	r2, [r3, #32]
}
 8003024:	bf00      	nop
 8003026:	371c      	adds	r7, #28
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr
	...

08003030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003044:	2302      	movs	r3, #2
 8003046:	e046      	b.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800306e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a16      	ldr	r2, [pc, #88]	@ (80030e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00e      	beq.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003094:	d009      	beq.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a12      	ldr	r2, [pc, #72]	@ (80030e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d004      	beq.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a10      	ldr	r2, [pc, #64]	@ (80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d10c      	bne.n	80030c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	40012c00 	.word	0x40012c00
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000800 	.word	0x40000800

080030ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr

080030fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e042      	b.n	80031a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fd fec6 	bl	8000ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2224      	movs	r2, #36	@ 0x24
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f92b 	bl	80033b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08a      	sub	sp, #40	@ 0x28
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d17c      	bne.n	80032ca <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <HAL_UART_Receive+0x2c>
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e075      	b.n	80032cc <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2222      	movs	r2, #34	@ 0x22
 80031ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031f4:	f7fd ff02 	bl	8000ffc <HAL_GetTick>
 80031f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	88fa      	ldrh	r2, [r7, #6]
 80031fe:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	88fa      	ldrh	r2, [r7, #6]
 8003204:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800320e:	d108      	bne.n	8003222 <HAL_UART_Receive+0x72>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d104      	bne.n	8003222 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	e003      	b.n	800322a <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003226:	2300      	movs	r3, #0
 8003228:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800322a:	e043      	b.n	80032b4 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2200      	movs	r2, #0
 8003234:	2120      	movs	r1, #32
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f84c 	bl	80032d4 <UART_WaitOnFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e042      	b.n	80032cc <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10c      	bne.n	8003266 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	b29b      	uxth	r3, r3
 8003254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003258:	b29a      	uxth	r2, r3
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	3302      	adds	r3, #2
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	e01f      	b.n	80032a6 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800326e:	d007      	beq.n	8003280 <HAL_UART_Receive+0xd0>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10a      	bne.n	800328e <HAL_UART_Receive+0xde>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d106      	bne.n	800328e <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	b2da      	uxtb	r2, r3
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e008      	b.n	80032a0 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800329a:	b2da      	uxtb	r2, r3
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	3301      	adds	r3, #1
 80032a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1b6      	bne.n	800322c <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e000      	b.n	80032cc <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032ca:	2302      	movs	r3, #2
  }
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3720      	adds	r7, #32
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b090      	sub	sp, #64	@ 0x40
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	4613      	mov	r3, r2
 80032e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e4:	e050      	b.n	8003388 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d04c      	beq.n	8003388 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <UART_WaitOnFlagUntilTimeout+0x30>
 80032f4:	f7fd fe82 	bl	8000ffc <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003300:	429a      	cmp	r2, r3
 8003302:	d241      	bcs.n	8003388 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	330c      	adds	r3, #12
 800330a:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330e:	e853 3f00 	ldrex	r3, [r3]
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003316:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800331a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	330c      	adds	r3, #12
 8003322:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003324:	637a      	str	r2, [r7, #52]	@ 0x34
 8003326:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003328:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800332a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800332c:	e841 2300 	strex	r3, r2, [r1]
 8003330:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e5      	bne.n	8003304 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3314      	adds	r3, #20
 800333e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	e853 3f00 	ldrex	r3, [r3]
 8003346:	613b      	str	r3, [r7, #16]
   return(result);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f023 0301 	bic.w	r3, r3, #1
 800334e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3314      	adds	r3, #20
 8003356:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003358:	623a      	str	r2, [r7, #32]
 800335a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335c:	69f9      	ldr	r1, [r7, #28]
 800335e:	6a3a      	ldr	r2, [r7, #32]
 8003360:	e841 2300 	strex	r3, r2, [r1]
 8003364:	61bb      	str	r3, [r7, #24]
   return(result);
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e5      	bne.n	8003338 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e00f      	b.n	80033a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4013      	ands	r3, r2
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	429a      	cmp	r2, r3
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d09f      	beq.n	80032e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3740      	adds	r7, #64	@ 0x40
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80033ea:	f023 030c 	bic.w	r3, r3, #12
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	430b      	orrs	r3, r1
 80033f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a2c      	ldr	r2, [pc, #176]	@ (80034c4 <UART_SetConfig+0x114>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d103      	bne.n	8003420 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003418:	f7fe fc54 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	e002      	b.n	8003426 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003420:	f7fe fc3c 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8003424:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	009a      	lsls	r2, r3, #2
 8003430:	441a      	add	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	4a22      	ldr	r2, [pc, #136]	@ (80034c8 <UART_SetConfig+0x118>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	0119      	lsls	r1, r3, #4
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	009a      	lsls	r2, r3, #2
 8003450:	441a      	add	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	fbb2 f2f3 	udiv	r2, r2, r3
 800345c:	4b1a      	ldr	r3, [pc, #104]	@ (80034c8 <UART_SetConfig+0x118>)
 800345e:	fba3 0302 	umull	r0, r3, r3, r2
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2064      	movs	r0, #100	@ 0x64
 8003466:	fb00 f303 	mul.w	r3, r0, r3
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	3332      	adds	r3, #50	@ 0x32
 8003470:	4a15      	ldr	r2, [pc, #84]	@ (80034c8 <UART_SetConfig+0x118>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800347c:	4419      	add	r1, r3
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	009a      	lsls	r2, r3, #2
 8003488:	441a      	add	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	fbb2 f2f3 	udiv	r2, r2, r3
 8003494:	4b0c      	ldr	r3, [pc, #48]	@ (80034c8 <UART_SetConfig+0x118>)
 8003496:	fba3 0302 	umull	r0, r3, r3, r2
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2064      	movs	r0, #100	@ 0x64
 800349e:	fb00 f303 	mul.w	r3, r0, r3
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	3332      	adds	r3, #50	@ 0x32
 80034a8:	4a07      	ldr	r2, [pc, #28]	@ (80034c8 <UART_SetConfig+0x118>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	f003 020f 	and.w	r2, r3, #15
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	440a      	add	r2, r1
 80034ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40013800 	.word	0x40013800
 80034c8:	51eb851f 	.word	0x51eb851f

080034cc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034d2:	f3ef 8305 	mrs	r3, IPSR
 80034d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80034d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10f      	bne.n	80034fe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034de:	f3ef 8310 	mrs	r3, PRIMASK
 80034e2:	607b      	str	r3, [r7, #4]
  return(result);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <osKernelInitialize+0x32>
 80034ea:	4b10      	ldr	r3, [pc, #64]	@ (800352c <osKernelInitialize+0x60>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d109      	bne.n	8003506 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034f2:	f3ef 8311 	mrs	r3, BASEPRI
 80034f6:	603b      	str	r3, [r7, #0]
  return(result);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80034fe:	f06f 0305 	mvn.w	r3, #5
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	e00c      	b.n	8003520 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003506:	4b09      	ldr	r3, [pc, #36]	@ (800352c <osKernelInitialize+0x60>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d105      	bne.n	800351a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800350e:	4b07      	ldr	r3, [pc, #28]	@ (800352c <osKernelInitialize+0x60>)
 8003510:	2201      	movs	r2, #1
 8003512:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e002      	b.n	8003520 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800351a:	f04f 33ff 	mov.w	r3, #4294967295
 800351e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003520:	68fb      	ldr	r3, [r7, #12]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	20000170 	.word	0x20000170

08003530 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003536:	f3ef 8305 	mrs	r3, IPSR
 800353a:	60bb      	str	r3, [r7, #8]
  return(result);
 800353c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10f      	bne.n	8003562 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003542:	f3ef 8310 	mrs	r3, PRIMASK
 8003546:	607b      	str	r3, [r7, #4]
  return(result);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <osKernelStart+0x32>
 800354e:	4b11      	ldr	r3, [pc, #68]	@ (8003594 <osKernelStart+0x64>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d109      	bne.n	800356a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003556:	f3ef 8311 	mrs	r3, BASEPRI
 800355a:	603b      	str	r3, [r7, #0]
  return(result);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003562:	f06f 0305 	mvn.w	r3, #5
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	e00e      	b.n	8003588 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800356a:	4b0a      	ldr	r3, [pc, #40]	@ (8003594 <osKernelStart+0x64>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d107      	bne.n	8003582 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003572:	4b08      	ldr	r3, [pc, #32]	@ (8003594 <osKernelStart+0x64>)
 8003574:	2202      	movs	r2, #2
 8003576:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003578:	f001 f890 	bl	800469c <vTaskStartScheduler>
      stat = osOK;
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	e002      	b.n	8003588 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003588:	68fb      	ldr	r3, [r7, #12]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000170 	.word	0x20000170

08003598 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003598:	b580      	push	{r7, lr}
 800359a:	b092      	sub	sp, #72	@ 0x48
 800359c:	af04      	add	r7, sp, #16
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035a8:	f3ef 8305 	mrs	r3, IPSR
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f040 8094 	bne.w	80036de <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b6:	f3ef 8310 	mrs	r3, PRIMASK
 80035ba:	623b      	str	r3, [r7, #32]
  return(result);
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f040 808d 	bne.w	80036de <osThreadNew+0x146>
 80035c4:	4b48      	ldr	r3, [pc, #288]	@ (80036e8 <osThreadNew+0x150>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d106      	bne.n	80035da <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035cc:	f3ef 8311 	mrs	r3, BASEPRI
 80035d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f040 8082 	bne.w	80036de <osThreadNew+0x146>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d07e      	beq.n	80036de <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80035e0:	2380      	movs	r3, #128	@ 0x80
 80035e2:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80035e4:	2318      	movs	r3, #24
 80035e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80035e8:	2300      	movs	r3, #0
 80035ea:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80035ec:	f107 031b 	add.w	r3, r7, #27
 80035f0:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80035f2:	f04f 33ff 	mov.w	r3, #4294967295
 80035f6:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d045      	beq.n	800368a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <osThreadNew+0x74>
        name = attr->name;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800361a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <osThreadNew+0x9a>
 8003620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003622:	2b38      	cmp	r3, #56	@ 0x38
 8003624:	d805      	bhi.n	8003632 <osThreadNew+0x9a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <osThreadNew+0x9e>
        return (NULL);
 8003632:	2300      	movs	r3, #0
 8003634:	e054      	b.n	80036e0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	089b      	lsrs	r3, r3, #2
 8003644:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00e      	beq.n	800366c <osThreadNew+0xd4>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	2b5b      	cmp	r3, #91	@ 0x5b
 8003654:	d90a      	bls.n	800366c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800365a:	2b00      	cmp	r3, #0
 800365c:	d006      	beq.n	800366c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <osThreadNew+0xd4>
        mem = 1;
 8003666:	2301      	movs	r3, #1
 8003668:	62bb      	str	r3, [r7, #40]	@ 0x28
 800366a:	e010      	b.n	800368e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10c      	bne.n	800368e <osThreadNew+0xf6>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d108      	bne.n	800368e <osThreadNew+0xf6>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d104      	bne.n	800368e <osThreadNew+0xf6>
          mem = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003688:	e001      	b.n	800368e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800368e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003690:	2b01      	cmp	r3, #1
 8003692:	d110      	bne.n	80036b6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800369c:	9202      	str	r2, [sp, #8]
 800369e:	9301      	str	r3, [sp, #4]
 80036a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036a8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fe24 	bl	80042f8 <xTaskCreateStatic>
 80036b0:	4603      	mov	r3, r0
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	e013      	b.n	80036de <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80036b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d110      	bne.n	80036de <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80036bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036be:	b29a      	uxth	r2, r3
 80036c0:	f107 0314 	add.w	r3, r7, #20
 80036c4:	9301      	str	r3, [sp, #4]
 80036c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 fe71 	bl	80043b6 <xTaskCreate>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d001      	beq.n	80036de <osThreadNew+0x146>
          hTask = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80036de:	697b      	ldr	r3, [r7, #20]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3738      	adds	r7, #56	@ 0x38
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000170 	.word	0x20000170

080036ec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036f4:	f3ef 8305 	mrs	r3, IPSR
 80036f8:	613b      	str	r3, [r7, #16]
  return(result);
 80036fa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10f      	bne.n	8003720 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003700:	f3ef 8310 	mrs	r3, PRIMASK
 8003704:	60fb      	str	r3, [r7, #12]
  return(result);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d109      	bne.n	8003720 <osDelay+0x34>
 800370c:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <osDelay+0x58>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d109      	bne.n	8003728 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003714:	f3ef 8311 	mrs	r3, BASEPRI
 8003718:	60bb      	str	r3, [r7, #8]
  return(result);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <osDelay+0x3c>
    stat = osErrorISR;
 8003720:	f06f 0305 	mvn.w	r3, #5
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	e007      	b.n	8003738 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 ff7c 	bl	8004630 <vTaskDelay>
    }
  }

  return (stat);
 8003738:	697b      	ldr	r3, [r7, #20]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000170 	.word	0x20000170

08003748 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4a06      	ldr	r2, [pc, #24]	@ (8003770 <vApplicationGetIdleTaskMemory+0x28>)
 8003758:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4a05      	ldr	r2, [pc, #20]	@ (8003774 <vApplicationGetIdleTaskMemory+0x2c>)
 800375e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2280      	movs	r2, #128	@ 0x80
 8003764:	601a      	str	r2, [r3, #0]
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr
 8003770:	20000174 	.word	0x20000174
 8003774:	200001d0 	.word	0x200001d0

08003778 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4a07      	ldr	r2, [pc, #28]	@ (80037a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003788:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4a06      	ldr	r2, [pc, #24]	@ (80037a8 <vApplicationGetTimerTaskMemory+0x30>)
 800378e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003796:	601a      	str	r2, [r3, #0]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	200003d0 	.word	0x200003d0
 80037a8:	2000042c 	.word	0x2000042c

080037ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f103 0208 	add.w	r2, r3, #8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f04f 32ff 	mov.w	r2, #4294967295
 80037c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f103 0208 	add.w	r2, r3, #8
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f103 0208 	add.w	r2, r3, #8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr

08003802 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003802:	b480      	push	{r7}
 8003804:	b085      	sub	sp, #20
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	601a      	str	r2, [r3, #0]
}
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385e:	d103      	bne.n	8003868 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	e00c      	b.n	8003882 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3308      	adds	r3, #8
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	e002      	b.n	8003876 <vListInsert+0x2e>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	429a      	cmp	r2, r3
 8003880:	d2f6      	bcs.n	8003870 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	601a      	str	r2, [r3, #0]
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6892      	ldr	r2, [r2, #8]
 80038ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6852      	ldr	r2, [r2, #4]
 80038d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d103      	bne.n	80038ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	1e5a      	subs	r2, r3, #1
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr
	...

0800390c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10b      	bne.n	8003938 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003932:	bf00      	nop
 8003934:	bf00      	nop
 8003936:	e7fd      	b.n	8003934 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003938:	f001 fff8 	bl	800592c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003944:	68f9      	ldr	r1, [r7, #12]
 8003946:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	441a      	add	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003968:	3b01      	subs	r3, #1
 800396a:	68f9      	ldr	r1, [r7, #12]
 800396c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800396e:	fb01 f303 	mul.w	r3, r1, r3
 8003972:	441a      	add	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	22ff      	movs	r2, #255	@ 0xff
 800397c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	22ff      	movs	r2, #255	@ 0xff
 8003984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d114      	bne.n	80039b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d01a      	beq.n	80039cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3310      	adds	r3, #16
 800399a:	4618      	mov	r0, r3
 800399c:	f001 f910 	bl	8004bc0 <xTaskRemoveFromEventList>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d012      	beq.n	80039cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039a6:	4b0d      	ldr	r3, [pc, #52]	@ (80039dc <xQueueGenericReset+0xd0>)
 80039a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	e009      	b.n	80039cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3310      	adds	r3, #16
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff fef5 	bl	80037ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	3324      	adds	r3, #36	@ 0x24
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fef0 	bl	80037ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039cc:	f001 ffde 	bl	800598c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039d0:	2301      	movs	r3, #1
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	e000ed04 	.word	0xe000ed04

080039e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08e      	sub	sp, #56	@ 0x38
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10b      	bne.n	8003a0c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a06:	bf00      	nop
 8003a08:	bf00      	nop
 8003a0a:	e7fd      	b.n	8003a08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10b      	bne.n	8003a2a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop
 8003a28:	e7fd      	b.n	8003a26 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <xQueueGenericCreateStatic+0x56>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <xQueueGenericCreateStatic+0x5a>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <xQueueGenericCreateStatic+0x5c>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	623b      	str	r3, [r7, #32]
}
 8003a52:	bf00      	nop
 8003a54:	bf00      	nop
 8003a56:	e7fd      	b.n	8003a54 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <xQueueGenericCreateStatic+0x84>
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <xQueueGenericCreateStatic+0x88>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <xQueueGenericCreateStatic+0x8a>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10b      	bne.n	8003a86 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	61fb      	str	r3, [r7, #28]
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	e7fd      	b.n	8003a82 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a86:	2350      	movs	r3, #80	@ 0x50
 8003a88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b50      	cmp	r3, #80	@ 0x50
 8003a8e:	d00b      	beq.n	8003aa8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	61bb      	str	r3, [r7, #24]
}
 8003aa2:	bf00      	nop
 8003aa4:	bf00      	nop
 8003aa6:	e7fd      	b.n	8003aa4 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00d      	beq.n	8003ace <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003aba:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 f805 	bl	8003ad8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3730      	adds	r7, #48	@ 0x30
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d103      	bne.n	8003af4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	e002      	b.n	8003afa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b06:	2101      	movs	r1, #1
 8003b08:	69b8      	ldr	r0, [r7, #24]
 8003b0a:	f7ff feff 	bl	800390c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08e      	sub	sp, #56	@ 0x38
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10b      	bne.n	8003b54 <xQueueGenericSend+0x34>
	__asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b4e:	bf00      	nop
 8003b50:	bf00      	nop
 8003b52:	e7fd      	b.n	8003b50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <xQueueGenericSend+0x42>
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <xQueueGenericSend+0x46>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <xQueueGenericSend+0x48>
 8003b66:	2300      	movs	r3, #0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10b      	bne.n	8003b84 <xQueueGenericSend+0x64>
	__asm volatile
 8003b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b7e:	bf00      	nop
 8003b80:	bf00      	nop
 8003b82:	e7fd      	b.n	8003b80 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d103      	bne.n	8003b92 <xQueueGenericSend+0x72>
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <xQueueGenericSend+0x76>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <xQueueGenericSend+0x78>
 8003b96:	2300      	movs	r3, #0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10b      	bne.n	8003bb4 <xQueueGenericSend+0x94>
	__asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	623b      	str	r3, [r7, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	bf00      	nop
 8003bb2:	e7fd      	b.n	8003bb0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bb4:	f001 f9c8 	bl	8004f48 <xTaskGetSchedulerState>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d102      	bne.n	8003bc4 <xQueueGenericSend+0xa4>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <xQueueGenericSend+0xa8>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <xQueueGenericSend+0xaa>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10b      	bne.n	8003be6 <xQueueGenericSend+0xc6>
	__asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	61fb      	str	r3, [r7, #28]
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	e7fd      	b.n	8003be2 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003be6:	f001 fea1 	bl	800592c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d302      	bcc.n	8003bfc <xQueueGenericSend+0xdc>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d129      	bne.n	8003c50 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c02:	f000 fa0d 	bl	8004020 <prvCopyDataToQueue>
 8003c06:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d010      	beq.n	8003c32 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c12:	3324      	adds	r3, #36	@ 0x24
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 ffd3 	bl	8004bc0 <xTaskRemoveFromEventList>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d013      	beq.n	8003c48 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c20:	4b3f      	ldr	r3, [pc, #252]	@ (8003d20 <xQueueGenericSend+0x200>)
 8003c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	e00a      	b.n	8003c48 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c38:	4b39      	ldr	r3, [pc, #228]	@ (8003d20 <xQueueGenericSend+0x200>)
 8003c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c48:	f001 fea0 	bl	800598c <vPortExitCritical>
				return pdPASS;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e063      	b.n	8003d18 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d103      	bne.n	8003c5e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c56:	f001 fe99 	bl	800598c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e05c      	b.n	8003d18 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d106      	bne.n	8003c72 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c64:	f107 0314 	add.w	r3, r7, #20
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 f80d 	bl	8004c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c72:	f001 fe8b 	bl	800598c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c76:	f000 fd79 	bl	800476c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c7a:	f001 fe57 	bl	800592c <vPortEnterCritical>
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c84:	b25b      	sxtb	r3, r3
 8003c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8a:	d103      	bne.n	8003c94 <xQueueGenericSend+0x174>
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c9a:	b25b      	sxtb	r3, r3
 8003c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca0:	d103      	bne.n	8003caa <xQueueGenericSend+0x18a>
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003caa:	f001 fe6f 	bl	800598c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cae:	1d3a      	adds	r2, r7, #4
 8003cb0:	f107 0314 	add.w	r3, r7, #20
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fffc 	bl	8004cb4 <xTaskCheckForTimeOut>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d124      	bne.n	8003d0c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003cc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cc4:	f000 faa4 	bl	8004210 <prvIsQueueFull>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d018      	beq.n	8003d00 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd0:	3310      	adds	r3, #16
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 ff20 	bl	8004b1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003cdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cde:	f000 fa2f 	bl	8004140 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ce2:	f000 fd51 	bl	8004788 <xTaskResumeAll>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f47f af7c 	bne.w	8003be6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003cee:	4b0c      	ldr	r3, [pc, #48]	@ (8003d20 <xQueueGenericSend+0x200>)
 8003cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	e772      	b.n	8003be6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d02:	f000 fa1d 	bl	8004140 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d06:	f000 fd3f 	bl	8004788 <xTaskResumeAll>
 8003d0a:	e76c      	b.n	8003be6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d0e:	f000 fa17 	bl	8004140 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d12:	f000 fd39 	bl	8004788 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d16:	2300      	movs	r3, #0
		}
	}
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3738      	adds	r7, #56	@ 0x38
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	e000ed04 	.word	0xe000ed04

08003d24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08e      	sub	sp, #56	@ 0x38
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10b      	bne.n	8003d54 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d4e:	bf00      	nop
 8003d50:	bf00      	nop
 8003d52:	e7fd      	b.n	8003d50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d103      	bne.n	8003d62 <xQueueGenericSendFromISR+0x3e>
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <xQueueGenericSendFromISR+0x42>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <xQueueGenericSendFromISR+0x44>
 8003d66:	2300      	movs	r3, #0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	623b      	str	r3, [r7, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	bf00      	nop
 8003d82:	e7fd      	b.n	8003d80 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d103      	bne.n	8003d92 <xQueueGenericSendFromISR+0x6e>
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <xQueueGenericSendFromISR+0x72>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <xQueueGenericSendFromISR+0x74>
 8003d96:	2300      	movs	r3, #0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10b      	bne.n	8003db4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	61fb      	str	r3, [r7, #28]
}
 8003dae:	bf00      	nop
 8003db0:	bf00      	nop
 8003db2:	e7fd      	b.n	8003db0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003db4:	f001 fe7c 	bl	8005ab0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003db8:	f3ef 8211 	mrs	r2, BASEPRI
 8003dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	61ba      	str	r2, [r7, #24]
 8003dce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003dd0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d302      	bcc.n	8003de6 <xQueueGenericSendFromISR+0xc2>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d12c      	bne.n	8003e40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003df6:	f000 f913 	bl	8004020 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003dfa:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e02:	d112      	bne.n	8003e2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d016      	beq.n	8003e3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0e:	3324      	adds	r3, #36	@ 0x24
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fed5 	bl	8004bc0 <xTaskRemoveFromEventList>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00e      	beq.n	8003e3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00b      	beq.n	8003e3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e007      	b.n	8003e3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e2e:	3301      	adds	r3, #1
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	b25a      	sxtb	r2, r3
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003e3e:	e001      	b.n	8003e44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e46:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3738      	adds	r7, #56	@ 0x38
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08c      	sub	sp, #48	@ 0x30
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10b      	bne.n	8003e8e <xQueueReceive+0x32>
	__asm volatile
 8003e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	623b      	str	r3, [r7, #32]
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	e7fd      	b.n	8003e8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d103      	bne.n	8003e9c <xQueueReceive+0x40>
 8003e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <xQueueReceive+0x44>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <xQueueReceive+0x46>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10b      	bne.n	8003ebe <xQueueReceive+0x62>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	61fb      	str	r3, [r7, #28]
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	e7fd      	b.n	8003eba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ebe:	f001 f843 	bl	8004f48 <xTaskGetSchedulerState>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <xQueueReceive+0x72>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <xQueueReceive+0x76>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <xQueueReceive+0x78>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10b      	bne.n	8003ef0 <xQueueReceive+0x94>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	61bb      	str	r3, [r7, #24]
}
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
 8003eee:	e7fd      	b.n	8003eec <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ef0:	f001 fd1c 	bl	800592c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01f      	beq.n	8003f40 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f04:	f000 f8f6 	bl	80040f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0a:	1e5a      	subs	r2, r3, #1
 8003f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00f      	beq.n	8003f38 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1a:	3310      	adds	r3, #16
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fe4f 	bl	8004bc0 <xTaskRemoveFromEventList>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d007      	beq.n	8003f38 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f28:	4b3c      	ldr	r3, [pc, #240]	@ (800401c <xQueueReceive+0x1c0>)
 8003f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f38:	f001 fd28 	bl	800598c <vPortExitCritical>
				return pdPASS;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e069      	b.n	8004014 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d103      	bne.n	8003f4e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f46:	f001 fd21 	bl	800598c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e062      	b.n	8004014 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d106      	bne.n	8003f62 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f54:	f107 0310 	add.w	r3, r7, #16
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fe95 	bl	8004c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f62:	f001 fd13 	bl	800598c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f66:	f000 fc01 	bl	800476c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f6a:	f001 fcdf 	bl	800592c <vPortEnterCritical>
 8003f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f74:	b25b      	sxtb	r3, r3
 8003f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7a:	d103      	bne.n	8003f84 <xQueueReceive+0x128>
 8003f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f8a:	b25b      	sxtb	r3, r3
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f90:	d103      	bne.n	8003f9a <xQueueReceive+0x13e>
 8003f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f9a:	f001 fcf7 	bl	800598c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f9e:	1d3a      	adds	r2, r7, #4
 8003fa0:	f107 0310 	add.w	r3, r7, #16
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fe84 	bl	8004cb4 <xTaskCheckForTimeOut>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d123      	bne.n	8003ffa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fb4:	f000 f916 	bl	80041e4 <prvIsQueueEmpty>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d017      	beq.n	8003fee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc0:	3324      	adds	r3, #36	@ 0x24
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fda8 	bl	8004b1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fce:	f000 f8b7 	bl	8004140 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fd2:	f000 fbd9 	bl	8004788 <xTaskResumeAll>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d189      	bne.n	8003ef0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800401c <xQueueReceive+0x1c0>)
 8003fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	e780      	b.n	8003ef0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003fee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ff0:	f000 f8a6 	bl	8004140 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ff4:	f000 fbc8 	bl	8004788 <xTaskResumeAll>
 8003ff8:	e77a      	b.n	8003ef0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ffc:	f000 f8a0 	bl	8004140 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004000:	f000 fbc2 	bl	8004788 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004006:	f000 f8ed 	bl	80041e4 <prvIsQueueEmpty>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	f43f af6f 	beq.w	8003ef0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004012:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004014:	4618      	mov	r0, r3
 8004016:	3730      	adds	r7, #48	@ 0x30
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	e000ed04 	.word	0xe000ed04

08004020 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004034:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10d      	bne.n	800405a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d14d      	bne.n	80040e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 ff9a 	bl	8004f84 <xTaskPriorityDisinherit>
 8004050:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	605a      	str	r2, [r3, #4]
 8004058:	e043      	b.n	80040e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d119      	bne.n	8004094 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6898      	ldr	r0, [r3, #8]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	461a      	mov	r2, r3
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	f001 ff6a 	bl	8005f44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	441a      	add	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	429a      	cmp	r2, r3
 8004088:	d32b      	bcc.n	80040e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	609a      	str	r2, [r3, #8]
 8004092:	e026      	b.n	80040e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68d8      	ldr	r0, [r3, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409c:	461a      	mov	r2, r3
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	f001 ff50 	bl	8005f44 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	425b      	negs	r3, r3
 80040ae:	441a      	add	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d207      	bcs.n	80040d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c8:	425b      	negs	r3, r3
 80040ca:	441a      	add	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d105      	bne.n	80040e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	3b01      	subs	r3, #1
 80040e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80040ea:	697b      	ldr	r3, [r7, #20]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d018      	beq.n	8004138 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	441a      	add	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	429a      	cmp	r2, r3
 800411e:	d303      	bcc.n	8004128 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68d9      	ldr	r1, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	461a      	mov	r2, r3
 8004132:	6838      	ldr	r0, [r7, #0]
 8004134:	f001 ff06 	bl	8005f44 <memcpy>
	}
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004148:	f001 fbf0 	bl	800592c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004152:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004154:	e011      	b.n	800417a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415a:	2b00      	cmp	r3, #0
 800415c:	d012      	beq.n	8004184 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3324      	adds	r3, #36	@ 0x24
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fd2c 	bl	8004bc0 <xTaskRemoveFromEventList>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800416e:	f000 fe05 	bl	8004d7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	3b01      	subs	r3, #1
 8004176:	b2db      	uxtb	r3, r3
 8004178:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800417a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417e:	2b00      	cmp	r3, #0
 8004180:	dce9      	bgt.n	8004156 <prvUnlockQueue+0x16>
 8004182:	e000      	b.n	8004186 <prvUnlockQueue+0x46>
					break;
 8004184:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	22ff      	movs	r2, #255	@ 0xff
 800418a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800418e:	f001 fbfd 	bl	800598c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004192:	f001 fbcb 	bl	800592c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800419c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800419e:	e011      	b.n	80041c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d012      	beq.n	80041ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3310      	adds	r3, #16
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fd07 	bl	8004bc0 <xTaskRemoveFromEventList>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041b8:	f000 fde0 	bl	8004d7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041bc:	7bbb      	ldrb	r3, [r7, #14]
 80041be:	3b01      	subs	r3, #1
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	dce9      	bgt.n	80041a0 <prvUnlockQueue+0x60>
 80041cc:	e000      	b.n	80041d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	22ff      	movs	r2, #255	@ 0xff
 80041d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80041d8:	f001 fbd8 	bl	800598c <vPortExitCritical>
}
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041ec:	f001 fb9e 	bl	800592c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d102      	bne.n	80041fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041f8:	2301      	movs	r3, #1
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	e001      	b.n	8004202 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004202:	f001 fbc3 	bl	800598c <vPortExitCritical>

	return xReturn;
 8004206:	68fb      	ldr	r3, [r7, #12]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004218:	f001 fb88 	bl	800592c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004224:	429a      	cmp	r2, r3
 8004226:	d102      	bne.n	800422e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004228:	2301      	movs	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	e001      	b.n	8004232 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004232:	f001 fbab 	bl	800598c <vPortExitCritical>

	return xReturn;
 8004236:	68fb      	ldr	r3, [r7, #12]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	e014      	b.n	800427a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004250:	4a0e      	ldr	r2, [pc, #56]	@ (800428c <vQueueAddToRegistry+0x4c>)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10b      	bne.n	8004274 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800425c:	490b      	ldr	r1, [pc, #44]	@ (800428c <vQueueAddToRegistry+0x4c>)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004266:	4a09      	ldr	r2, [pc, #36]	@ (800428c <vQueueAddToRegistry+0x4c>)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004272:	e006      	b.n	8004282 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3301      	adds	r3, #1
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b07      	cmp	r3, #7
 800427e:	d9e7      	bls.n	8004250 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr
 800428c:	2000082c 	.word	0x2000082c

08004290 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042a0:	f001 fb44 	bl	800592c <vPortEnterCritical>
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042aa:	b25b      	sxtb	r3, r3
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b0:	d103      	bne.n	80042ba <vQueueWaitForMessageRestricted+0x2a>
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042c0:	b25b      	sxtb	r3, r3
 80042c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c6:	d103      	bne.n	80042d0 <vQueueWaitForMessageRestricted+0x40>
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042d0:	f001 fb5c 	bl	800598c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d106      	bne.n	80042ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	3324      	adds	r3, #36	@ 0x24
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	68b9      	ldr	r1, [r7, #8]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fc3f 	bl	8004b68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042ea:	6978      	ldr	r0, [r7, #20]
 80042ec:	f7ff ff28 	bl	8004140 <prvUnlockQueue>
	}
 80042f0:	bf00      	nop
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08e      	sub	sp, #56	@ 0x38
 80042fc:	af04      	add	r7, sp, #16
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10b      	bne.n	8004324 <xTaskCreateStatic+0x2c>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	623b      	str	r3, [r7, #32]
}
 800431e:	bf00      	nop
 8004320:	bf00      	nop
 8004322:	e7fd      	b.n	8004320 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10b      	bne.n	8004342 <xTaskCreateStatic+0x4a>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	61fb      	str	r3, [r7, #28]
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	e7fd      	b.n	800433e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004342:	235c      	movs	r3, #92	@ 0x5c
 8004344:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b5c      	cmp	r3, #92	@ 0x5c
 800434a:	d00b      	beq.n	8004364 <xTaskCreateStatic+0x6c>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	61bb      	str	r3, [r7, #24]
}
 800435e:	bf00      	nop
 8004360:	bf00      	nop
 8004362:	e7fd      	b.n	8004360 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004366:	2b00      	cmp	r3, #0
 8004368:	d01e      	beq.n	80043a8 <xTaskCreateStatic+0xb0>
 800436a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01b      	beq.n	80043a8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004372:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004376:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004378:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437c:	2202      	movs	r2, #2
 800437e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004382:	2300      	movs	r3, #0
 8004384:	9303      	str	r3, [sp, #12]
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	9302      	str	r3, [sp, #8]
 800438a:	f107 0314 	add.w	r3, r7, #20
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f850 	bl	8004440 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043a2:	f000 f8d5 	bl	8004550 <prvAddNewTaskToReadyList>
 80043a6:	e001      	b.n	80043ac <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043ac:	697b      	ldr	r3, [r7, #20]
	}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3728      	adds	r7, #40	@ 0x28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b08c      	sub	sp, #48	@ 0x30
 80043ba:	af04      	add	r7, sp, #16
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	603b      	str	r3, [r7, #0]
 80043c2:	4613      	mov	r3, r2
 80043c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f001 fbb0 	bl	8005b30 <pvPortMalloc>
 80043d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00e      	beq.n	80043f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80043d8:	205c      	movs	r0, #92	@ 0x5c
 80043da:	f001 fba9 	bl	8005b30 <pvPortMalloc>
 80043de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80043ec:	e005      	b.n	80043fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043ee:	6978      	ldr	r0, [r7, #20]
 80043f0:	f001 fc66 	bl	8005cc0 <vPortFree>
 80043f4:	e001      	b.n	80043fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d017      	beq.n	8004430 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004408:	88fa      	ldrh	r2, [r7, #6]
 800440a:	2300      	movs	r3, #0
 800440c:	9303      	str	r3, [sp, #12]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	9302      	str	r3, [sp, #8]
 8004412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004414:	9301      	str	r3, [sp, #4]
 8004416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f80e 	bl	8004440 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004424:	69f8      	ldr	r0, [r7, #28]
 8004426:	f000 f893 	bl	8004550 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800442a:	2301      	movs	r3, #1
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	e002      	b.n	8004436 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004430:	f04f 33ff 	mov.w	r3, #4294967295
 8004434:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004436:	69bb      	ldr	r3, [r7, #24]
	}
 8004438:	4618      	mov	r0, r3
 800443a:	3720      	adds	r7, #32
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800444e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004450:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	461a      	mov	r2, r3
 8004458:	21a5      	movs	r1, #165	@ 0xa5
 800445a:	f001 fd47 	bl	8005eec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800445e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004460:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004468:	3b01      	subs	r3, #1
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	f023 0307 	bic.w	r3, r3, #7
 8004476:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00b      	beq.n	800449a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	617b      	str	r3, [r7, #20]
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	e7fd      	b.n	8004496 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	e012      	b.n	80044c6 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	4413      	add	r3, r2
 80044a6:	7819      	ldrb	r1, [r3, #0]
 80044a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	3334      	adds	r3, #52	@ 0x34
 80044b0:	460a      	mov	r2, r1
 80044b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	4413      	add	r3, r2
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d006      	beq.n	80044ce <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	3301      	adds	r3, #1
 80044c4:	61fb      	str	r3, [r7, #28]
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	2b0f      	cmp	r3, #15
 80044ca:	d9e9      	bls.n	80044a0 <prvInitialiseNewTask+0x60>
 80044cc:	e000      	b.n	80044d0 <prvInitialiseNewTask+0x90>
		{
			break;
 80044ce:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044da:	2b37      	cmp	r3, #55	@ 0x37
 80044dc:	d901      	bls.n	80044e2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044de:	2337      	movs	r3, #55	@ 0x37
 80044e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80044ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f0:	2200      	movs	r2, #0
 80044f2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f6:	3304      	adds	r3, #4
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff f976 	bl	80037ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004500:	3318      	adds	r3, #24
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff f971 	bl	80037ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800450c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800450e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004510:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004516:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800451c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800451e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004520:	2200      	movs	r2, #0
 8004522:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	68f9      	ldr	r1, [r7, #12]
 8004530:	69b8      	ldr	r0, [r7, #24]
 8004532:	f001 f90b 	bl	800574c <pxPortInitialiseStack>
 8004536:	4602      	mov	r2, r0
 8004538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800453c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004546:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004548:	bf00      	nop
 800454a:	3720      	adds	r7, #32
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004558:	f001 f9e8 	bl	800592c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800455c:	4b2d      	ldr	r3, [pc, #180]	@ (8004614 <prvAddNewTaskToReadyList+0xc4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3301      	adds	r3, #1
 8004562:	4a2c      	ldr	r2, [pc, #176]	@ (8004614 <prvAddNewTaskToReadyList+0xc4>)
 8004564:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004566:	4b2c      	ldr	r3, [pc, #176]	@ (8004618 <prvAddNewTaskToReadyList+0xc8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800456e:	4a2a      	ldr	r2, [pc, #168]	@ (8004618 <prvAddNewTaskToReadyList+0xc8>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004574:	4b27      	ldr	r3, [pc, #156]	@ (8004614 <prvAddNewTaskToReadyList+0xc4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d110      	bne.n	800459e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800457c:	f000 fc22 	bl	8004dc4 <prvInitialiseTaskLists>
 8004580:	e00d      	b.n	800459e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004582:	4b26      	ldr	r3, [pc, #152]	@ (800461c <prvAddNewTaskToReadyList+0xcc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800458a:	4b23      	ldr	r3, [pc, #140]	@ (8004618 <prvAddNewTaskToReadyList+0xc8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004594:	429a      	cmp	r2, r3
 8004596:	d802      	bhi.n	800459e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004598:	4a1f      	ldr	r2, [pc, #124]	@ (8004618 <prvAddNewTaskToReadyList+0xc8>)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800459e:	4b20      	ldr	r3, [pc, #128]	@ (8004620 <prvAddNewTaskToReadyList+0xd0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3301      	adds	r3, #1
 80045a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004620 <prvAddNewTaskToReadyList+0xd0>)
 80045a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004620 <prvAddNewTaskToReadyList+0xd0>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004624 <prvAddNewTaskToReadyList+0xd4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d903      	bls.n	80045c4 <prvAddNewTaskToReadyList+0x74>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c0:	4a18      	ldr	r2, [pc, #96]	@ (8004624 <prvAddNewTaskToReadyList+0xd4>)
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4a15      	ldr	r2, [pc, #84]	@ (8004628 <prvAddNewTaskToReadyList+0xd8>)
 80045d2:	441a      	add	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4610      	mov	r0, r2
 80045dc:	f7ff f911 	bl	8003802 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045e0:	f001 f9d4 	bl	800598c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045e4:	4b0d      	ldr	r3, [pc, #52]	@ (800461c <prvAddNewTaskToReadyList+0xcc>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00e      	beq.n	800460a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004618 <prvAddNewTaskToReadyList+0xc8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d207      	bcs.n	800460a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045fa:	4b0c      	ldr	r3, [pc, #48]	@ (800462c <prvAddNewTaskToReadyList+0xdc>)
 80045fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000d40 	.word	0x20000d40
 8004618:	2000086c 	.word	0x2000086c
 800461c:	20000d4c 	.word	0x20000d4c
 8004620:	20000d5c 	.word	0x20000d5c
 8004624:	20000d48 	.word	0x20000d48
 8004628:	20000870 	.word	0x20000870
 800462c:	e000ed04 	.word	0xe000ed04

08004630 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d018      	beq.n	8004674 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004642:	4b14      	ldr	r3, [pc, #80]	@ (8004694 <vTaskDelay+0x64>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <vTaskDelay+0x32>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	60bb      	str	r3, [r7, #8]
}
 800465c:	bf00      	nop
 800465e:	bf00      	nop
 8004660:	e7fd      	b.n	800465e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004662:	f000 f883 	bl	800476c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004666:	2100      	movs	r1, #0
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fcfb 	bl	8005064 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800466e:	f000 f88b 	bl	8004788 <xTaskResumeAll>
 8004672:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d107      	bne.n	800468a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800467a:	4b07      	ldr	r3, [pc, #28]	@ (8004698 <vTaskDelay+0x68>)
 800467c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000d68 	.word	0x20000d68
 8004698:	e000ed04 	.word	0xe000ed04

0800469c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08a      	sub	sp, #40	@ 0x28
 80046a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046aa:	463a      	mov	r2, r7
 80046ac:	1d39      	adds	r1, r7, #4
 80046ae:	f107 0308 	add.w	r3, r7, #8
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff f848 	bl	8003748 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046b8:	6839      	ldr	r1, [r7, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	9202      	str	r2, [sp, #8]
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	2300      	movs	r3, #0
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	2300      	movs	r3, #0
 80046c8:	460a      	mov	r2, r1
 80046ca:	4922      	ldr	r1, [pc, #136]	@ (8004754 <vTaskStartScheduler+0xb8>)
 80046cc:	4822      	ldr	r0, [pc, #136]	@ (8004758 <vTaskStartScheduler+0xbc>)
 80046ce:	f7ff fe13 	bl	80042f8 <xTaskCreateStatic>
 80046d2:	4603      	mov	r3, r0
 80046d4:	4a21      	ldr	r2, [pc, #132]	@ (800475c <vTaskStartScheduler+0xc0>)
 80046d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046d8:	4b20      	ldr	r3, [pc, #128]	@ (800475c <vTaskStartScheduler+0xc0>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046e0:	2301      	movs	r3, #1
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	e001      	b.n	80046ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d102      	bne.n	80046f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046f0:	f000 fd0c 	bl	800510c <xTimerCreateTimerTask>
 80046f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d116      	bne.n	800472a <vTaskStartScheduler+0x8e>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	613b      	str	r3, [r7, #16]
}
 800470e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004710:	4b13      	ldr	r3, [pc, #76]	@ (8004760 <vTaskStartScheduler+0xc4>)
 8004712:	f04f 32ff 	mov.w	r2, #4294967295
 8004716:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004718:	4b12      	ldr	r3, [pc, #72]	@ (8004764 <vTaskStartScheduler+0xc8>)
 800471a:	2201      	movs	r2, #1
 800471c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800471e:	4b12      	ldr	r3, [pc, #72]	@ (8004768 <vTaskStartScheduler+0xcc>)
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004724:	f001 f890 	bl	8005848 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004728:	e00f      	b.n	800474a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004730:	d10b      	bne.n	800474a <vTaskStartScheduler+0xae>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	60fb      	str	r3, [r7, #12]
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	e7fd      	b.n	8004746 <vTaskStartScheduler+0xaa>
}
 800474a:	bf00      	nop
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	08005fa4 	.word	0x08005fa4
 8004758:	08004d95 	.word	0x08004d95
 800475c:	20000d64 	.word	0x20000d64
 8004760:	20000d60 	.word	0x20000d60
 8004764:	20000d4c 	.word	0x20000d4c
 8004768:	20000d44 	.word	0x20000d44

0800476c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004770:	4b04      	ldr	r3, [pc, #16]	@ (8004784 <vTaskSuspendAll+0x18>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3301      	adds	r3, #1
 8004776:	4a03      	ldr	r2, [pc, #12]	@ (8004784 <vTaskSuspendAll+0x18>)
 8004778:	6013      	str	r3, [r2, #0]
}
 800477a:	bf00      	nop
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	20000d68 	.word	0x20000d68

08004788 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004792:	2300      	movs	r3, #0
 8004794:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004796:	4b42      	ldr	r3, [pc, #264]	@ (80048a0 <xTaskResumeAll+0x118>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	603b      	str	r3, [r7, #0]
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	e7fd      	b.n	80047b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047b6:	f001 f8b9 	bl	800592c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047ba:	4b39      	ldr	r3, [pc, #228]	@ (80048a0 <xTaskResumeAll+0x118>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3b01      	subs	r3, #1
 80047c0:	4a37      	ldr	r2, [pc, #220]	@ (80048a0 <xTaskResumeAll+0x118>)
 80047c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047c4:	4b36      	ldr	r3, [pc, #216]	@ (80048a0 <xTaskResumeAll+0x118>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d162      	bne.n	8004892 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047cc:	4b35      	ldr	r3, [pc, #212]	@ (80048a4 <xTaskResumeAll+0x11c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d05e      	beq.n	8004892 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047d4:	e02f      	b.n	8004836 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80047d6:	4b34      	ldr	r3, [pc, #208]	@ (80048a8 <xTaskResumeAll+0x120>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3318      	adds	r3, #24
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff f868 	bl	80038b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3304      	adds	r3, #4
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff f863 	bl	80038b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f6:	4b2d      	ldr	r3, [pc, #180]	@ (80048ac <xTaskResumeAll+0x124>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d903      	bls.n	8004806 <xTaskResumeAll+0x7e>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004802:	4a2a      	ldr	r2, [pc, #168]	@ (80048ac <xTaskResumeAll+0x124>)
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4a27      	ldr	r2, [pc, #156]	@ (80048b0 <xTaskResumeAll+0x128>)
 8004814:	441a      	add	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3304      	adds	r3, #4
 800481a:	4619      	mov	r1, r3
 800481c:	4610      	mov	r0, r2
 800481e:	f7fe fff0 	bl	8003802 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004826:	4b23      	ldr	r3, [pc, #140]	@ (80048b4 <xTaskResumeAll+0x12c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482c:	429a      	cmp	r2, r3
 800482e:	d302      	bcc.n	8004836 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004830:	4b21      	ldr	r3, [pc, #132]	@ (80048b8 <xTaskResumeAll+0x130>)
 8004832:	2201      	movs	r2, #1
 8004834:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004836:	4b1c      	ldr	r3, [pc, #112]	@ (80048a8 <xTaskResumeAll+0x120>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1cb      	bne.n	80047d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004844:	f000 fb5c 	bl	8004f00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004848:	4b1c      	ldr	r3, [pc, #112]	@ (80048bc <xTaskResumeAll+0x134>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d010      	beq.n	8004876 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004854:	f000 f844 	bl	80048e0 <xTaskIncrementTick>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800485e:	4b16      	ldr	r3, [pc, #88]	@ (80048b8 <xTaskResumeAll+0x130>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3b01      	subs	r3, #1
 8004868:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f1      	bne.n	8004854 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004870:	4b12      	ldr	r3, [pc, #72]	@ (80048bc <xTaskResumeAll+0x134>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004876:	4b10      	ldr	r3, [pc, #64]	@ (80048b8 <xTaskResumeAll+0x130>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d009      	beq.n	8004892 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800487e:	2301      	movs	r3, #1
 8004880:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004882:	4b0f      	ldr	r3, [pc, #60]	@ (80048c0 <xTaskResumeAll+0x138>)
 8004884:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004892:	f001 f87b 	bl	800598c <vPortExitCritical>

	return xAlreadyYielded;
 8004896:	68bb      	ldr	r3, [r7, #8]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000d68 	.word	0x20000d68
 80048a4:	20000d40 	.word	0x20000d40
 80048a8:	20000d00 	.word	0x20000d00
 80048ac:	20000d48 	.word	0x20000d48
 80048b0:	20000870 	.word	0x20000870
 80048b4:	2000086c 	.word	0x2000086c
 80048b8:	20000d54 	.word	0x20000d54
 80048bc:	20000d50 	.word	0x20000d50
 80048c0:	e000ed04 	.word	0xe000ed04

080048c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048ca:	4b04      	ldr	r3, [pc, #16]	@ (80048dc <xTaskGetTickCount+0x18>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048d0:	687b      	ldr	r3, [r7, #4]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr
 80048dc:	20000d44 	.word	0x20000d44

080048e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048e6:	2300      	movs	r3, #0
 80048e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048ea:	4b52      	ldr	r3, [pc, #328]	@ (8004a34 <xTaskIncrementTick+0x154>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f040 808f 	bne.w	8004a12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048f4:	4b50      	ldr	r3, [pc, #320]	@ (8004a38 <xTaskIncrementTick+0x158>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3301      	adds	r3, #1
 80048fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048fc:	4a4e      	ldr	r2, [pc, #312]	@ (8004a38 <xTaskIncrementTick+0x158>)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d121      	bne.n	800494c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004908:	4b4c      	ldr	r3, [pc, #304]	@ (8004a3c <xTaskIncrementTick+0x15c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	603b      	str	r3, [r7, #0]
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	e7fd      	b.n	8004926 <xTaskIncrementTick+0x46>
 800492a:	4b44      	ldr	r3, [pc, #272]	@ (8004a3c <xTaskIncrementTick+0x15c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	4b43      	ldr	r3, [pc, #268]	@ (8004a40 <xTaskIncrementTick+0x160>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a41      	ldr	r2, [pc, #260]	@ (8004a3c <xTaskIncrementTick+0x15c>)
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	4a41      	ldr	r2, [pc, #260]	@ (8004a40 <xTaskIncrementTick+0x160>)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	4b41      	ldr	r3, [pc, #260]	@ (8004a44 <xTaskIncrementTick+0x164>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3301      	adds	r3, #1
 8004944:	4a3f      	ldr	r2, [pc, #252]	@ (8004a44 <xTaskIncrementTick+0x164>)
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	f000 fada 	bl	8004f00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800494c:	4b3e      	ldr	r3, [pc, #248]	@ (8004a48 <xTaskIncrementTick+0x168>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	429a      	cmp	r2, r3
 8004954:	d34e      	bcc.n	80049f4 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004956:	4b39      	ldr	r3, [pc, #228]	@ (8004a3c <xTaskIncrementTick+0x15c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <xTaskIncrementTick+0x84>
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <xTaskIncrementTick+0x86>
 8004964:	2300      	movs	r3, #0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d004      	beq.n	8004974 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800496a:	4b37      	ldr	r3, [pc, #220]	@ (8004a48 <xTaskIncrementTick+0x168>)
 800496c:	f04f 32ff 	mov.w	r2, #4294967295
 8004970:	601a      	str	r2, [r3, #0]
					break;
 8004972:	e03f      	b.n	80049f4 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004974:	4b31      	ldr	r3, [pc, #196]	@ (8004a3c <xTaskIncrementTick+0x15c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	429a      	cmp	r2, r3
 800498a:	d203      	bcs.n	8004994 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800498c:	4a2e      	ldr	r2, [pc, #184]	@ (8004a48 <xTaskIncrementTick+0x168>)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6013      	str	r3, [r2, #0]
						break;
 8004992:	e02f      	b.n	80049f4 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	3304      	adds	r3, #4
 8004998:	4618      	mov	r0, r3
 800499a:	f7fe ff8d 	bl	80038b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d004      	beq.n	80049b0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	3318      	adds	r3, #24
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fe ff84 	bl	80038b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049b4:	4b25      	ldr	r3, [pc, #148]	@ (8004a4c <xTaskIncrementTick+0x16c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d903      	bls.n	80049c4 <xTaskIncrementTick+0xe4>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c0:	4a22      	ldr	r2, [pc, #136]	@ (8004a4c <xTaskIncrementTick+0x16c>)
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004a50 <xTaskIncrementTick+0x170>)
 80049d2:	441a      	add	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	3304      	adds	r3, #4
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f7fe ff11 	bl	8003802 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004a54 <xTaskIncrementTick+0x174>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d3b3      	bcc.n	8004956 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80049ee:	2301      	movs	r3, #1
 80049f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049f2:	e7b0      	b.n	8004956 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049f4:	4b17      	ldr	r3, [pc, #92]	@ (8004a54 <xTaskIncrementTick+0x174>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049fa:	4915      	ldr	r1, [pc, #84]	@ (8004a50 <xTaskIncrementTick+0x170>)
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d907      	bls.n	8004a1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	e004      	b.n	8004a1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a12:	4b11      	ldr	r3, [pc, #68]	@ (8004a58 <xTaskIncrementTick+0x178>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3301      	adds	r3, #1
 8004a18:	4a0f      	ldr	r2, [pc, #60]	@ (8004a58 <xTaskIncrementTick+0x178>)
 8004a1a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004a5c <xTaskIncrementTick+0x17c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8004a24:	2301      	movs	r3, #1
 8004a26:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a28:	697b      	ldr	r3, [r7, #20]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000d68 	.word	0x20000d68
 8004a38:	20000d44 	.word	0x20000d44
 8004a3c:	20000cf8 	.word	0x20000cf8
 8004a40:	20000cfc 	.word	0x20000cfc
 8004a44:	20000d58 	.word	0x20000d58
 8004a48:	20000d60 	.word	0x20000d60
 8004a4c:	20000d48 	.word	0x20000d48
 8004a50:	20000870 	.word	0x20000870
 8004a54:	2000086c 	.word	0x2000086c
 8004a58:	20000d50 	.word	0x20000d50
 8004a5c:	20000d54 	.word	0x20000d54

08004a60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a66:	4b28      	ldr	r3, [pc, #160]	@ (8004b08 <vTaskSwitchContext+0xa8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a6e:	4b27      	ldr	r3, [pc, #156]	@ (8004b0c <vTaskSwitchContext+0xac>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a74:	e042      	b.n	8004afc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004a76:	4b25      	ldr	r3, [pc, #148]	@ (8004b0c <vTaskSwitchContext+0xac>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004a7c:	4b24      	ldr	r3, [pc, #144]	@ (8004b10 <vTaskSwitchContext+0xb0>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	e011      	b.n	8004aa8 <vTaskSwitchContext+0x48>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10b      	bne.n	8004aa2 <vTaskSwitchContext+0x42>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	607b      	str	r3, [r7, #4]
}
 8004a9c:	bf00      	nop
 8004a9e:	bf00      	nop
 8004aa0:	e7fd      	b.n	8004a9e <vTaskSwitchContext+0x3e>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	491a      	ldr	r1, [pc, #104]	@ (8004b14 <vTaskSwitchContext+0xb4>)
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0e3      	beq.n	8004a84 <vTaskSwitchContext+0x24>
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4a13      	ldr	r2, [pc, #76]	@ (8004b14 <vTaskSwitchContext+0xb4>)
 8004ac8:	4413      	add	r3, r2
 8004aca:	60bb      	str	r3, [r7, #8]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	605a      	str	r2, [r3, #4]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	3308      	adds	r3, #8
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d104      	bne.n	8004aec <vTaskSwitchContext+0x8c>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	605a      	str	r2, [r3, #4]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	4a09      	ldr	r2, [pc, #36]	@ (8004b18 <vTaskSwitchContext+0xb8>)
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	4a06      	ldr	r2, [pc, #24]	@ (8004b10 <vTaskSwitchContext+0xb0>)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6013      	str	r3, [r2, #0]
}
 8004afc:	bf00      	nop
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20000d68 	.word	0x20000d68
 8004b0c:	20000d54 	.word	0x20000d54
 8004b10:	20000d48 	.word	0x20000d48
 8004b14:	20000870 	.word	0x20000870
 8004b18:	2000086c 	.word	0x2000086c

08004b1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10b      	bne.n	8004b44 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	60fb      	str	r3, [r7, #12]
}
 8004b3e:	bf00      	nop
 8004b40:	bf00      	nop
 8004b42:	e7fd      	b.n	8004b40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b44:	4b07      	ldr	r3, [pc, #28]	@ (8004b64 <vTaskPlaceOnEventList+0x48>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3318      	adds	r3, #24
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7fe fe7b 	bl	8003848 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b52:	2101      	movs	r1, #1
 8004b54:	6838      	ldr	r0, [r7, #0]
 8004b56:	f000 fa85 	bl	8005064 <prvAddCurrentTaskToDelayedList>
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	2000086c 	.word	0x2000086c

08004b68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10b      	bne.n	8004b92 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	617b      	str	r3, [r7, #20]
}
 8004b8c:	bf00      	nop
 8004b8e:	bf00      	nop
 8004b90:	e7fd      	b.n	8004b8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b92:	4b0a      	ldr	r3, [pc, #40]	@ (8004bbc <vTaskPlaceOnEventListRestricted+0x54>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3318      	adds	r3, #24
 8004b98:	4619      	mov	r1, r3
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f7fe fe31 	bl	8003802 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8004baa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	68b8      	ldr	r0, [r7, #8]
 8004bb0:	f000 fa58 	bl	8005064 <prvAddCurrentTaskToDelayedList>
	}
 8004bb4:	bf00      	nop
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	2000086c 	.word	0x2000086c

08004bc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10b      	bne.n	8004bee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	60fb      	str	r3, [r7, #12]
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	e7fd      	b.n	8004bea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	3318      	adds	r3, #24
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe fe60 	bl	80038b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c70 <xTaskRemoveFromEventList+0xb0>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d11d      	bne.n	8004c3c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	3304      	adds	r3, #4
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fe fe57 	bl	80038b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c0e:	4b19      	ldr	r3, [pc, #100]	@ (8004c74 <xTaskRemoveFromEventList+0xb4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d903      	bls.n	8004c1e <xTaskRemoveFromEventList+0x5e>
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1a:	4a16      	ldr	r2, [pc, #88]	@ (8004c74 <xTaskRemoveFromEventList+0xb4>)
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4a13      	ldr	r2, [pc, #76]	@ (8004c78 <xTaskRemoveFromEventList+0xb8>)
 8004c2c:	441a      	add	r2, r3
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	3304      	adds	r3, #4
 8004c32:	4619      	mov	r1, r3
 8004c34:	4610      	mov	r0, r2
 8004c36:	f7fe fde4 	bl	8003802 <vListInsertEnd>
 8004c3a:	e005      	b.n	8004c48 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	3318      	adds	r3, #24
 8004c40:	4619      	mov	r1, r3
 8004c42:	480e      	ldr	r0, [pc, #56]	@ (8004c7c <xTaskRemoveFromEventList+0xbc>)
 8004c44:	f7fe fddd 	bl	8003802 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c80 <xTaskRemoveFromEventList+0xc0>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d905      	bls.n	8004c62 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c56:	2301      	movs	r3, #1
 8004c58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c84 <xTaskRemoveFromEventList+0xc4>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	e001      	b.n	8004c66 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004c66:	697b      	ldr	r3, [r7, #20]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20000d68 	.word	0x20000d68
 8004c74:	20000d48 	.word	0x20000d48
 8004c78:	20000870 	.word	0x20000870
 8004c7c:	20000d00 	.word	0x20000d00
 8004c80:	2000086c 	.word	0x2000086c
 8004c84:	20000d54 	.word	0x20000d54

08004c88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c90:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <vTaskInternalSetTimeOutState+0x24>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c98:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <vTaskInternalSetTimeOutState+0x28>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	605a      	str	r2, [r3, #4]
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	20000d58 	.word	0x20000d58
 8004cb0:	20000d44 	.word	0x20000d44

08004cb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10b      	bne.n	8004cdc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	613b      	str	r3, [r7, #16]
}
 8004cd6:	bf00      	nop
 8004cd8:	bf00      	nop
 8004cda:	e7fd      	b.n	8004cd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10b      	bne.n	8004cfa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	60fb      	str	r3, [r7, #12]
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop
 8004cf8:	e7fd      	b.n	8004cf6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004cfa:	f000 fe17 	bl	800592c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8004d74 <xTaskCheckForTimeOut+0xc0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d16:	d102      	bne.n	8004d1e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61fb      	str	r3, [r7, #28]
 8004d1c:	e023      	b.n	8004d66 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4b15      	ldr	r3, [pc, #84]	@ (8004d78 <xTaskCheckForTimeOut+0xc4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d007      	beq.n	8004d3a <xTaskCheckForTimeOut+0x86>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d302      	bcc.n	8004d3a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d34:	2301      	movs	r3, #1
 8004d36:	61fb      	str	r3, [r7, #28]
 8004d38:	e015      	b.n	8004d66 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d20b      	bcs.n	8004d5c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	1ad2      	subs	r2, r2, r3
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff ff99 	bl	8004c88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	e004      	b.n	8004d66 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d62:	2301      	movs	r3, #1
 8004d64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d66:	f000 fe11 	bl	800598c <vPortExitCritical>

	return xReturn;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3720      	adds	r7, #32
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	20000d44 	.word	0x20000d44
 8004d78:	20000d58 	.word	0x20000d58

08004d7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d80:	4b03      	ldr	r3, [pc, #12]	@ (8004d90 <vTaskMissedYield+0x14>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	601a      	str	r2, [r3, #0]
}
 8004d86:	bf00      	nop
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20000d54 	.word	0x20000d54

08004d94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d9c:	f000 f852 	bl	8004e44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004da0:	4b06      	ldr	r3, [pc, #24]	@ (8004dbc <prvIdleTask+0x28>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d9f9      	bls.n	8004d9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004da8:	4b05      	ldr	r3, [pc, #20]	@ (8004dc0 <prvIdleTask+0x2c>)
 8004daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004db8:	e7f0      	b.n	8004d9c <prvIdleTask+0x8>
 8004dba:	bf00      	nop
 8004dbc:	20000870 	.word	0x20000870
 8004dc0:	e000ed04 	.word	0xe000ed04

08004dc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dca:	2300      	movs	r3, #0
 8004dcc:	607b      	str	r3, [r7, #4]
 8004dce:	e00c      	b.n	8004dea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4a12      	ldr	r2, [pc, #72]	@ (8004e24 <prvInitialiseTaskLists+0x60>)
 8004ddc:	4413      	add	r3, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fce4 	bl	80037ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3301      	adds	r3, #1
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b37      	cmp	r3, #55	@ 0x37
 8004dee:	d9ef      	bls.n	8004dd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004df0:	480d      	ldr	r0, [pc, #52]	@ (8004e28 <prvInitialiseTaskLists+0x64>)
 8004df2:	f7fe fcdb 	bl	80037ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004df6:	480d      	ldr	r0, [pc, #52]	@ (8004e2c <prvInitialiseTaskLists+0x68>)
 8004df8:	f7fe fcd8 	bl	80037ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004dfc:	480c      	ldr	r0, [pc, #48]	@ (8004e30 <prvInitialiseTaskLists+0x6c>)
 8004dfe:	f7fe fcd5 	bl	80037ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e02:	480c      	ldr	r0, [pc, #48]	@ (8004e34 <prvInitialiseTaskLists+0x70>)
 8004e04:	f7fe fcd2 	bl	80037ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e08:	480b      	ldr	r0, [pc, #44]	@ (8004e38 <prvInitialiseTaskLists+0x74>)
 8004e0a:	f7fe fccf 	bl	80037ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e3c <prvInitialiseTaskLists+0x78>)
 8004e10:	4a05      	ldr	r2, [pc, #20]	@ (8004e28 <prvInitialiseTaskLists+0x64>)
 8004e12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e14:	4b0a      	ldr	r3, [pc, #40]	@ (8004e40 <prvInitialiseTaskLists+0x7c>)
 8004e16:	4a05      	ldr	r2, [pc, #20]	@ (8004e2c <prvInitialiseTaskLists+0x68>)
 8004e18:	601a      	str	r2, [r3, #0]
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20000870 	.word	0x20000870
 8004e28:	20000cd0 	.word	0x20000cd0
 8004e2c:	20000ce4 	.word	0x20000ce4
 8004e30:	20000d00 	.word	0x20000d00
 8004e34:	20000d14 	.word	0x20000d14
 8004e38:	20000d2c 	.word	0x20000d2c
 8004e3c:	20000cf8 	.word	0x20000cf8
 8004e40:	20000cfc 	.word	0x20000cfc

08004e44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e4a:	e019      	b.n	8004e80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e4c:	f000 fd6e 	bl	800592c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004e50:	4b10      	ldr	r3, [pc, #64]	@ (8004e94 <prvCheckTasksWaitingTermination+0x50>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fe fd2b 	bl	80038b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e62:	4b0d      	ldr	r3, [pc, #52]	@ (8004e98 <prvCheckTasksWaitingTermination+0x54>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	4a0b      	ldr	r2, [pc, #44]	@ (8004e98 <prvCheckTasksWaitingTermination+0x54>)
 8004e6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e9c <prvCheckTasksWaitingTermination+0x58>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	4a0a      	ldr	r2, [pc, #40]	@ (8004e9c <prvCheckTasksWaitingTermination+0x58>)
 8004e74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e76:	f000 fd89 	bl	800598c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f810 	bl	8004ea0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e80:	4b06      	ldr	r3, [pc, #24]	@ (8004e9c <prvCheckTasksWaitingTermination+0x58>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e1      	bne.n	8004e4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e88:	bf00      	nop
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000d14 	.word	0x20000d14
 8004e98:	20000d40 	.word	0x20000d40
 8004e9c:	20000d28 	.word	0x20000d28

08004ea0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d108      	bne.n	8004ec4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 ff02 	bl	8005cc0 <vPortFree>
				vPortFree( pxTCB );
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 feff 	bl	8005cc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ec2:	e019      	b.n	8004ef8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d103      	bne.n	8004ed6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fef6 	bl	8005cc0 <vPortFree>
	}
 8004ed4:	e010      	b.n	8004ef8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d00b      	beq.n	8004ef8 <prvDeleteTCB+0x58>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	60fb      	str	r3, [r7, #12]
}
 8004ef2:	bf00      	nop
 8004ef4:	bf00      	nop
 8004ef6:	e7fd      	b.n	8004ef4 <prvDeleteTCB+0x54>
	}
 8004ef8:	bf00      	nop
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f06:	4b0e      	ldr	r3, [pc, #56]	@ (8004f40 <prvResetNextTaskUnblockTime+0x40>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <prvResetNextTaskUnblockTime+0x14>
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <prvResetNextTaskUnblockTime+0x16>
 8004f14:	2300      	movs	r3, #0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d004      	beq.n	8004f24 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f44 <prvResetNextTaskUnblockTime+0x44>)
 8004f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f20:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f22:	e008      	b.n	8004f36 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f24:	4b06      	ldr	r3, [pc, #24]	@ (8004f40 <prvResetNextTaskUnblockTime+0x40>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	4a04      	ldr	r2, [pc, #16]	@ (8004f44 <prvResetNextTaskUnblockTime+0x44>)
 8004f34:	6013      	str	r3, [r2, #0]
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr
 8004f40:	20000cf8 	.word	0x20000cf8
 8004f44:	20000d60 	.word	0x20000d60

08004f48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f7c <xTaskGetSchedulerState+0x34>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f56:	2301      	movs	r3, #1
 8004f58:	607b      	str	r3, [r7, #4]
 8004f5a:	e008      	b.n	8004f6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f5c:	4b08      	ldr	r3, [pc, #32]	@ (8004f80 <xTaskGetSchedulerState+0x38>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f64:	2302      	movs	r3, #2
 8004f66:	607b      	str	r3, [r7, #4]
 8004f68:	e001      	b.n	8004f6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f6e:	687b      	ldr	r3, [r7, #4]
	}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000d4c 	.word	0x20000d4c
 8004f80:	20000d68 	.word	0x20000d68

08004f84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d058      	beq.n	800504c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005058 <xTaskPriorityDisinherit+0xd4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d00b      	beq.n	8004fbc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	60fb      	str	r3, [r7, #12]
}
 8004fb6:	bf00      	nop
 8004fb8:	bf00      	nop
 8004fba:	e7fd      	b.n	8004fb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10b      	bne.n	8004fdc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	60bb      	str	r3, [r7, #8]
}
 8004fd6:	bf00      	nop
 8004fd8:	bf00      	nop
 8004fda:	e7fd      	b.n	8004fd8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe0:	1e5a      	subs	r2, r3, #1
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d02c      	beq.n	800504c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d128      	bne.n	800504c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fe fc5a 	bl	80038b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005010:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800501c:	4b0f      	ldr	r3, [pc, #60]	@ (800505c <xTaskPriorityDisinherit+0xd8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d903      	bls.n	800502c <xTaskPriorityDisinherit+0xa8>
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005028:	4a0c      	ldr	r2, [pc, #48]	@ (800505c <xTaskPriorityDisinherit+0xd8>)
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4a09      	ldr	r2, [pc, #36]	@ (8005060 <xTaskPriorityDisinherit+0xdc>)
 800503a:	441a      	add	r2, r3
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f7fe fbdd 	bl	8003802 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005048:	2301      	movs	r3, #1
 800504a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800504c:	697b      	ldr	r3, [r7, #20]
	}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	2000086c 	.word	0x2000086c
 800505c:	20000d48 	.word	0x20000d48
 8005060:	20000870 	.word	0x20000870

08005064 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800506e:	4b21      	ldr	r3, [pc, #132]	@ (80050f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005074:	4b20      	ldr	r3, [pc, #128]	@ (80050f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3304      	adds	r3, #4
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe fc1c 	bl	80038b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005086:	d10a      	bne.n	800509e <prvAddCurrentTaskToDelayedList+0x3a>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d007      	beq.n	800509e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800508e:	4b1a      	ldr	r3, [pc, #104]	@ (80050f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3304      	adds	r3, #4
 8005094:	4619      	mov	r1, r3
 8005096:	4819      	ldr	r0, [pc, #100]	@ (80050fc <prvAddCurrentTaskToDelayedList+0x98>)
 8005098:	f7fe fbb3 	bl	8003802 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800509c:	e026      	b.n	80050ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4413      	add	r3, r2
 80050a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050a6:	4b14      	ldr	r3, [pc, #80]	@ (80050f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d209      	bcs.n	80050ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050b6:	4b12      	ldr	r3, [pc, #72]	@ (8005100 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b0f      	ldr	r3, [pc, #60]	@ (80050f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3304      	adds	r3, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f7fe fbc0 	bl	8003848 <vListInsert>
}
 80050c8:	e010      	b.n	80050ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005104 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4b0a      	ldr	r3, [pc, #40]	@ (80050f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3304      	adds	r3, #4
 80050d4:	4619      	mov	r1, r3
 80050d6:	4610      	mov	r0, r2
 80050d8:	f7fe fbb6 	bl	8003848 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005108 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d202      	bcs.n	80050ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050e6:	4a08      	ldr	r2, [pc, #32]	@ (8005108 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	6013      	str	r3, [r2, #0]
}
 80050ec:	bf00      	nop
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	20000d44 	.word	0x20000d44
 80050f8:	2000086c 	.word	0x2000086c
 80050fc:	20000d2c 	.word	0x20000d2c
 8005100:	20000cfc 	.word	0x20000cfc
 8005104:	20000cf8 	.word	0x20000cf8
 8005108:	20000d60 	.word	0x20000d60

0800510c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	@ 0x28
 8005110:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005116:	f000 fad9 	bl	80056cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800511a:	4b1d      	ldr	r3, [pc, #116]	@ (8005190 <xTimerCreateTimerTask+0x84>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d021      	beq.n	8005166 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005126:	2300      	movs	r3, #0
 8005128:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800512a:	1d3a      	adds	r2, r7, #4
 800512c:	f107 0108 	add.w	r1, r7, #8
 8005130:	f107 030c 	add.w	r3, r7, #12
 8005134:	4618      	mov	r0, r3
 8005136:	f7fe fb1f 	bl	8003778 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	9202      	str	r2, [sp, #8]
 8005142:	9301      	str	r3, [sp, #4]
 8005144:	2302      	movs	r3, #2
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	2300      	movs	r3, #0
 800514a:	460a      	mov	r2, r1
 800514c:	4911      	ldr	r1, [pc, #68]	@ (8005194 <xTimerCreateTimerTask+0x88>)
 800514e:	4812      	ldr	r0, [pc, #72]	@ (8005198 <xTimerCreateTimerTask+0x8c>)
 8005150:	f7ff f8d2 	bl	80042f8 <xTaskCreateStatic>
 8005154:	4603      	mov	r3, r0
 8005156:	4a11      	ldr	r2, [pc, #68]	@ (800519c <xTimerCreateTimerTask+0x90>)
 8005158:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800515a:	4b10      	ldr	r3, [pc, #64]	@ (800519c <xTimerCreateTimerTask+0x90>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005162:	2301      	movs	r3, #1
 8005164:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10b      	bne.n	8005184 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	613b      	str	r3, [r7, #16]
}
 800517e:	bf00      	nop
 8005180:	bf00      	nop
 8005182:	e7fd      	b.n	8005180 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005184:	697b      	ldr	r3, [r7, #20]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	20000d9c 	.word	0x20000d9c
 8005194:	08005fac 	.word	0x08005fac
 8005198:	080052c1 	.word	0x080052c1
 800519c:	20000da0 	.word	0x20000da0

080051a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08a      	sub	sp, #40	@ 0x28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10b      	bne.n	80051d0 <xTimerGenericCommand+0x30>
	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	623b      	str	r3, [r7, #32]
}
 80051ca:	bf00      	nop
 80051cc:	bf00      	nop
 80051ce:	e7fd      	b.n	80051cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051d0:	4b19      	ldr	r3, [pc, #100]	@ (8005238 <xTimerGenericCommand+0x98>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d02a      	beq.n	800522e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b05      	cmp	r3, #5
 80051e8:	dc18      	bgt.n	800521c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051ea:	f7ff fead 	bl	8004f48 <xTaskGetSchedulerState>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d109      	bne.n	8005208 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051f4:	4b10      	ldr	r3, [pc, #64]	@ (8005238 <xTimerGenericCommand+0x98>)
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	f107 0110 	add.w	r1, r7, #16
 80051fc:	2300      	movs	r3, #0
 80051fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005200:	f7fe fc8e 	bl	8003b20 <xQueueGenericSend>
 8005204:	6278      	str	r0, [r7, #36]	@ 0x24
 8005206:	e012      	b.n	800522e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005208:	4b0b      	ldr	r3, [pc, #44]	@ (8005238 <xTimerGenericCommand+0x98>)
 800520a:	6818      	ldr	r0, [r3, #0]
 800520c:	f107 0110 	add.w	r1, r7, #16
 8005210:	2300      	movs	r3, #0
 8005212:	2200      	movs	r2, #0
 8005214:	f7fe fc84 	bl	8003b20 <xQueueGenericSend>
 8005218:	6278      	str	r0, [r7, #36]	@ 0x24
 800521a:	e008      	b.n	800522e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800521c:	4b06      	ldr	r3, [pc, #24]	@ (8005238 <xTimerGenericCommand+0x98>)
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	f107 0110 	add.w	r1, r7, #16
 8005224:	2300      	movs	r3, #0
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	f7fe fd7c 	bl	8003d24 <xQueueGenericSendFromISR>
 800522c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005230:	4618      	mov	r0, r3
 8005232:	3728      	adds	r7, #40	@ 0x28
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20000d9c 	.word	0x20000d9c

0800523c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af02      	add	r7, sp, #8
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005246:	4b1d      	ldr	r3, [pc, #116]	@ (80052bc <prvProcessExpiredTimer+0x80>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	3304      	adds	r3, #4
 8005254:	4618      	mov	r0, r3
 8005256:	f7fe fb2f 	bl	80038b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d123      	bne.n	80052aa <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	18d1      	adds	r1, r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	6978      	ldr	r0, [r7, #20]
 8005270:	f000 f8cc 	bl	800540c <prvInsertTimerInActiveList>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d017      	beq.n	80052aa <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800527a:	2300      	movs	r3, #0
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	2300      	movs	r3, #0
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	2100      	movs	r1, #0
 8005284:	6978      	ldr	r0, [r7, #20]
 8005286:	f7ff ff8b 	bl	80051a0 <xTimerGenericCommand>
 800528a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10b      	bne.n	80052aa <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	60fb      	str	r3, [r7, #12]
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop
 80052a8:	e7fd      	b.n	80052a6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ae:	6978      	ldr	r0, [r7, #20]
 80052b0:	4798      	blx	r3
}
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000d94 	.word	0x20000d94

080052c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052c8:	f107 0308 	add.w	r3, r7, #8
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f859 	bl	8005384 <prvGetNextExpireTime>
 80052d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4619      	mov	r1, r3
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f805 	bl	80052e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052de:	f000 f8d7 	bl	8005490 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052e2:	bf00      	nop
 80052e4:	e7f0      	b.n	80052c8 <prvTimerTask+0x8>
	...

080052e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052f2:	f7ff fa3b 	bl	800476c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052f6:	f107 0308 	add.w	r3, r7, #8
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f866 	bl	80053cc <prvSampleTimeNow>
 8005300:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d130      	bne.n	800536a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10a      	bne.n	8005324 <prvProcessTimerOrBlockTask+0x3c>
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	429a      	cmp	r2, r3
 8005314:	d806      	bhi.n	8005324 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005316:	f7ff fa37 	bl	8004788 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800531a:	68f9      	ldr	r1, [r7, #12]
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff ff8d 	bl	800523c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005322:	e024      	b.n	800536e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d008      	beq.n	800533c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800532a:	4b13      	ldr	r3, [pc, #76]	@ (8005378 <prvProcessTimerOrBlockTask+0x90>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	bf0c      	ite	eq
 8005334:	2301      	moveq	r3, #1
 8005336:	2300      	movne	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800533c:	4b0f      	ldr	r3, [pc, #60]	@ (800537c <prvProcessTimerOrBlockTask+0x94>)
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	4619      	mov	r1, r3
 800534a:	f7fe ffa1 	bl	8004290 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800534e:	f7ff fa1b 	bl	8004788 <xTaskResumeAll>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005358:	4b09      	ldr	r3, [pc, #36]	@ (8005380 <prvProcessTimerOrBlockTask+0x98>)
 800535a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	f3bf 8f6f 	isb	sy
}
 8005368:	e001      	b.n	800536e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800536a:	f7ff fa0d 	bl	8004788 <xTaskResumeAll>
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000d98 	.word	0x20000d98
 800537c:	20000d9c 	.word	0x20000d9c
 8005380:	e000ed04 	.word	0xe000ed04

08005384 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800538c:	4b0e      	ldr	r3, [pc, #56]	@ (80053c8 <prvGetNextExpireTime+0x44>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	bf0c      	ite	eq
 8005396:	2301      	moveq	r3, #1
 8005398:	2300      	movne	r3, #0
 800539a:	b2db      	uxtb	r3, r3
 800539c:	461a      	mov	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d105      	bne.n	80053b6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053aa:	4b07      	ldr	r3, [pc, #28]	@ (80053c8 <prvGetNextExpireTime+0x44>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	e001      	b.n	80053ba <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053ba:	68fb      	ldr	r3, [r7, #12]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	20000d94 	.word	0x20000d94

080053cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053d4:	f7ff fa76 	bl	80048c4 <xTaskGetTickCount>
 80053d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053da:	4b0b      	ldr	r3, [pc, #44]	@ (8005408 <prvSampleTimeNow+0x3c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d205      	bcs.n	80053f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053e4:	f000 f910 	bl	8005608 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	e002      	b.n	80053f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053f6:	4a04      	ldr	r2, [pc, #16]	@ (8005408 <prvSampleTimeNow+0x3c>)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053fc:	68fb      	ldr	r3, [r7, #12]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000da4 	.word	0x20000da4

0800540c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	429a      	cmp	r2, r3
 8005430:	d812      	bhi.n	8005458 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	1ad2      	subs	r2, r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	429a      	cmp	r2, r3
 800543e:	d302      	bcc.n	8005446 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005440:	2301      	movs	r3, #1
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	e01b      	b.n	800547e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005446:	4b10      	ldr	r3, [pc, #64]	@ (8005488 <prvInsertTimerInActiveList+0x7c>)
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3304      	adds	r3, #4
 800544e:	4619      	mov	r1, r3
 8005450:	4610      	mov	r0, r2
 8005452:	f7fe f9f9 	bl	8003848 <vListInsert>
 8005456:	e012      	b.n	800547e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d206      	bcs.n	800546e <prvInsertTimerInActiveList+0x62>
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d302      	bcc.n	800546e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e007      	b.n	800547e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800546e:	4b07      	ldr	r3, [pc, #28]	@ (800548c <prvInsertTimerInActiveList+0x80>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3304      	adds	r3, #4
 8005476:	4619      	mov	r1, r3
 8005478:	4610      	mov	r0, r2
 800547a:	f7fe f9e5 	bl	8003848 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800547e:	697b      	ldr	r3, [r7, #20]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	20000d98 	.word	0x20000d98
 800548c:	20000d94 	.word	0x20000d94

08005490 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08e      	sub	sp, #56	@ 0x38
 8005494:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005496:	e0a5      	b.n	80055e4 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	da19      	bge.n	80054d2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800549e:	1d3b      	adds	r3, r7, #4
 80054a0:	3304      	adds	r3, #4
 80054a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10b      	bne.n	80054c2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	61fb      	str	r3, [r7, #28]
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	e7fd      	b.n	80054be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054c8:	6850      	ldr	r0, [r2, #4]
 80054ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054cc:	6892      	ldr	r2, [r2, #8]
 80054ce:	4611      	mov	r1, r2
 80054d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f2c0 8085 	blt.w	80055e4 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e8:	3304      	adds	r3, #4
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe f9e4 	bl	80038b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054f0:	463b      	mov	r3, r7
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff ff6a 	bl	80053cc <prvSampleTimeNow>
 80054f8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b09      	cmp	r3, #9
 80054fe:	d86c      	bhi.n	80055da <prvProcessReceivedCommands+0x14a>
 8005500:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <prvProcessReceivedCommands+0x78>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	08005531 	.word	0x08005531
 800550c:	08005531 	.word	0x08005531
 8005510:	08005531 	.word	0x08005531
 8005514:	080055db 	.word	0x080055db
 8005518:	0800558f 	.word	0x0800558f
 800551c:	080055c9 	.word	0x080055c9
 8005520:	08005531 	.word	0x08005531
 8005524:	08005531 	.word	0x08005531
 8005528:	080055db 	.word	0x080055db
 800552c:	0800558f 	.word	0x0800558f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	18d1      	adds	r1, r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800553c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800553e:	f7ff ff65 	bl	800540c <prvInsertTimerInActiveList>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d04a      	beq.n	80055de <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800554e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d142      	bne.n	80055de <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	441a      	add	r2, r3
 8005560:	2300      	movs	r3, #0
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	2300      	movs	r3, #0
 8005566:	2100      	movs	r1, #0
 8005568:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800556a:	f7ff fe19 	bl	80051a0 <xTimerGenericCommand>
 800556e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d133      	bne.n	80055de <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	61bb      	str	r3, [r7, #24]
}
 8005588:	bf00      	nop
 800558a:	bf00      	nop
 800558c:	e7fd      	b.n	800558a <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005592:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10b      	bne.n	80055b4 <prvProcessReceivedCommands+0x124>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	617b      	str	r3, [r7, #20]
}
 80055ae:	bf00      	nop
 80055b0:	bf00      	nop
 80055b2:	e7fd      	b.n	80055b0 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b6:	699a      	ldr	r2, [r3, #24]
 80055b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ba:	18d1      	adds	r1, r2, r3
 80055bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055c2:	f7ff ff23 	bl	800540c <prvInsertTimerInActiveList>
					break;
 80055c6:	e00d      	b.n	80055e4 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80055c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d107      	bne.n	80055e2 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80055d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055d4:	f000 fb74 	bl	8005cc0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80055d8:	e003      	b.n	80055e2 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80055da:	bf00      	nop
 80055dc:	e002      	b.n	80055e4 <prvProcessReceivedCommands+0x154>
					break;
 80055de:	bf00      	nop
 80055e0:	e000      	b.n	80055e4 <prvProcessReceivedCommands+0x154>
					break;
 80055e2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055e4:	4b07      	ldr	r3, [pc, #28]	@ (8005604 <prvProcessReceivedCommands+0x174>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	1d39      	adds	r1, r7, #4
 80055ea:	2200      	movs	r2, #0
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fe fc35 	bl	8003e5c <xQueueReceive>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f47f af4f 	bne.w	8005498 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80055fa:	bf00      	nop
 80055fc:	bf00      	nop
 80055fe:	3730      	adds	r7, #48	@ 0x30
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20000d9c 	.word	0x20000d9c

08005608 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800560e:	e046      	b.n	800569e <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005610:	4b2c      	ldr	r3, [pc, #176]	@ (80056c4 <prvSwitchTimerLists+0xbc>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800561a:	4b2a      	ldr	r3, [pc, #168]	@ (80056c4 <prvSwitchTimerLists+0xbc>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3304      	adds	r3, #4
 8005628:	4618      	mov	r0, r3
 800562a:	f7fe f945 	bl	80038b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d12f      	bne.n	800569e <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4413      	add	r3, r2
 8005646:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	429a      	cmp	r2, r3
 800564e:	d90e      	bls.n	800566e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800565c:	4b19      	ldr	r3, [pc, #100]	@ (80056c4 <prvSwitchTimerLists+0xbc>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3304      	adds	r3, #4
 8005664:	4619      	mov	r1, r3
 8005666:	4610      	mov	r0, r2
 8005668:	f7fe f8ee 	bl	8003848 <vListInsert>
 800566c:	e017      	b.n	800569e <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800566e:	2300      	movs	r3, #0
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	2300      	movs	r3, #0
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	2100      	movs	r1, #0
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f7ff fd91 	bl	80051a0 <xTimerGenericCommand>
 800567e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10b      	bne.n	800569e <prvSwitchTimerLists+0x96>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	603b      	str	r3, [r7, #0]
}
 8005698:	bf00      	nop
 800569a:	bf00      	nop
 800569c:	e7fd      	b.n	800569a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800569e:	4b09      	ldr	r3, [pc, #36]	@ (80056c4 <prvSwitchTimerLists+0xbc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1b3      	bne.n	8005610 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056a8:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <prvSwitchTimerLists+0xbc>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056ae:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <prvSwitchTimerLists+0xc0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a04      	ldr	r2, [pc, #16]	@ (80056c4 <prvSwitchTimerLists+0xbc>)
 80056b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056b6:	4a04      	ldr	r2, [pc, #16]	@ (80056c8 <prvSwitchTimerLists+0xc0>)
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	6013      	str	r3, [r2, #0]
}
 80056bc:	bf00      	nop
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20000d94 	.word	0x20000d94
 80056c8:	20000d98 	.word	0x20000d98

080056cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056d2:	f000 f92b 	bl	800592c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056d6:	4b15      	ldr	r3, [pc, #84]	@ (800572c <prvCheckForValidListAndQueue+0x60>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d120      	bne.n	8005720 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80056de:	4814      	ldr	r0, [pc, #80]	@ (8005730 <prvCheckForValidListAndQueue+0x64>)
 80056e0:	f7fe f864 	bl	80037ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80056e4:	4813      	ldr	r0, [pc, #76]	@ (8005734 <prvCheckForValidListAndQueue+0x68>)
 80056e6:	f7fe f861 	bl	80037ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80056ea:	4b13      	ldr	r3, [pc, #76]	@ (8005738 <prvCheckForValidListAndQueue+0x6c>)
 80056ec:	4a10      	ldr	r2, [pc, #64]	@ (8005730 <prvCheckForValidListAndQueue+0x64>)
 80056ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80056f0:	4b12      	ldr	r3, [pc, #72]	@ (800573c <prvCheckForValidListAndQueue+0x70>)
 80056f2:	4a10      	ldr	r2, [pc, #64]	@ (8005734 <prvCheckForValidListAndQueue+0x68>)
 80056f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80056f6:	2300      	movs	r3, #0
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	4b11      	ldr	r3, [pc, #68]	@ (8005740 <prvCheckForValidListAndQueue+0x74>)
 80056fc:	4a11      	ldr	r2, [pc, #68]	@ (8005744 <prvCheckForValidListAndQueue+0x78>)
 80056fe:	2110      	movs	r1, #16
 8005700:	200a      	movs	r0, #10
 8005702:	f7fe f96d 	bl	80039e0 <xQueueGenericCreateStatic>
 8005706:	4603      	mov	r3, r0
 8005708:	4a08      	ldr	r2, [pc, #32]	@ (800572c <prvCheckForValidListAndQueue+0x60>)
 800570a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800570c:	4b07      	ldr	r3, [pc, #28]	@ (800572c <prvCheckForValidListAndQueue+0x60>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005714:	4b05      	ldr	r3, [pc, #20]	@ (800572c <prvCheckForValidListAndQueue+0x60>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	490b      	ldr	r1, [pc, #44]	@ (8005748 <prvCheckForValidListAndQueue+0x7c>)
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe fd90 	bl	8004240 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005720:	f000 f934 	bl	800598c <vPortExitCritical>
}
 8005724:	bf00      	nop
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000d9c 	.word	0x20000d9c
 8005730:	20000d6c 	.word	0x20000d6c
 8005734:	20000d80 	.word	0x20000d80
 8005738:	20000d94 	.word	0x20000d94
 800573c:	20000d98 	.word	0x20000d98
 8005740:	20000e48 	.word	0x20000e48
 8005744:	20000da8 	.word	0x20000da8
 8005748:	08005fb4 	.word	0x08005fb4

0800574c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3b04      	subs	r3, #4
 800575c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3b04      	subs	r3, #4
 800576a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f023 0201 	bic.w	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3b04      	subs	r3, #4
 800577a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800577c:	4a08      	ldr	r2, [pc, #32]	@ (80057a0 <pxPortInitialiseStack+0x54>)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3b14      	subs	r3, #20
 8005786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3b20      	subs	r3, #32
 8005792:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005794:	68fb      	ldr	r3, [r7, #12]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr
 80057a0:	080057a5 	.word	0x080057a5

080057a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057ae:	4b12      	ldr	r3, [pc, #72]	@ (80057f8 <prvTaskExitError+0x54>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d00b      	beq.n	80057d0 <prvTaskExitError+0x2c>
	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	60fb      	str	r3, [r7, #12]
}
 80057ca:	bf00      	nop
 80057cc:	bf00      	nop
 80057ce:	e7fd      	b.n	80057cc <prvTaskExitError+0x28>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	60bb      	str	r3, [r7, #8]
}
 80057e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057e4:	bf00      	nop
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0fc      	beq.n	80057e6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr
 80057f8:	20000024 	.word	0x20000024
 80057fc:	00000000 	.word	0x00000000

08005800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005800:	4b07      	ldr	r3, [pc, #28]	@ (8005820 <pxCurrentTCBConst2>)
 8005802:	6819      	ldr	r1, [r3, #0]
 8005804:	6808      	ldr	r0, [r1, #0]
 8005806:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800580a:	f380 8809 	msr	PSP, r0
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f04f 0000 	mov.w	r0, #0
 8005816:	f380 8811 	msr	BASEPRI, r0
 800581a:	f04e 0e0d 	orr.w	lr, lr, #13
 800581e:	4770      	bx	lr

08005820 <pxCurrentTCBConst2>:
 8005820:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005824:	bf00      	nop
 8005826:	bf00      	nop

08005828 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005828:	4806      	ldr	r0, [pc, #24]	@ (8005844 <prvPortStartFirstTask+0x1c>)
 800582a:	6800      	ldr	r0, [r0, #0]
 800582c:	6800      	ldr	r0, [r0, #0]
 800582e:	f380 8808 	msr	MSP, r0
 8005832:	b662      	cpsie	i
 8005834:	b661      	cpsie	f
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	df00      	svc	0
 8005840:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005842:	bf00      	nop
 8005844:	e000ed08 	.word	0xe000ed08

08005848 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800584e:	4b32      	ldr	r3, [pc, #200]	@ (8005918 <xPortStartScheduler+0xd0>)
 8005850:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	22ff      	movs	r2, #255	@ 0xff
 800585e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	b2db      	uxtb	r3, r3
 8005866:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005868:	78fb      	ldrb	r3, [r7, #3]
 800586a:	b2db      	uxtb	r3, r3
 800586c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005870:	b2da      	uxtb	r2, r3
 8005872:	4b2a      	ldr	r3, [pc, #168]	@ (800591c <xPortStartScheduler+0xd4>)
 8005874:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005876:	4b2a      	ldr	r3, [pc, #168]	@ (8005920 <xPortStartScheduler+0xd8>)
 8005878:	2207      	movs	r2, #7
 800587a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800587c:	e009      	b.n	8005892 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800587e:	4b28      	ldr	r3, [pc, #160]	@ (8005920 <xPortStartScheduler+0xd8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3b01      	subs	r3, #1
 8005884:	4a26      	ldr	r2, [pc, #152]	@ (8005920 <xPortStartScheduler+0xd8>)
 8005886:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	b2db      	uxtb	r3, r3
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	b2db      	uxtb	r3, r3
 8005890:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005892:	78fb      	ldrb	r3, [r7, #3]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800589a:	2b80      	cmp	r3, #128	@ 0x80
 800589c:	d0ef      	beq.n	800587e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800589e:	4b20      	ldr	r3, [pc, #128]	@ (8005920 <xPortStartScheduler+0xd8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f1c3 0307 	rsb	r3, r3, #7
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d00b      	beq.n	80058c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	60bb      	str	r3, [r7, #8]
}
 80058bc:	bf00      	nop
 80058be:	bf00      	nop
 80058c0:	e7fd      	b.n	80058be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058c2:	4b17      	ldr	r3, [pc, #92]	@ (8005920 <xPortStartScheduler+0xd8>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	4a15      	ldr	r2, [pc, #84]	@ (8005920 <xPortStartScheduler+0xd8>)
 80058ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058cc:	4b14      	ldr	r3, [pc, #80]	@ (8005920 <xPortStartScheduler+0xd8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80058d4:	4a12      	ldr	r2, [pc, #72]	@ (8005920 <xPortStartScheduler+0xd8>)
 80058d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058e0:	4b10      	ldr	r3, [pc, #64]	@ (8005924 <xPortStartScheduler+0xdc>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a0f      	ldr	r2, [pc, #60]	@ (8005924 <xPortStartScheduler+0xdc>)
 80058e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80058ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005924 <xPortStartScheduler+0xdc>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a0c      	ldr	r2, [pc, #48]	@ (8005924 <xPortStartScheduler+0xdc>)
 80058f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80058f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058f8:	f000 f8b8 	bl	8005a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005928 <xPortStartScheduler+0xe0>)
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005902:	f7ff ff91 	bl	8005828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005906:	f7ff f8ab 	bl	8004a60 <vTaskSwitchContext>
	prvTaskExitError();
 800590a:	f7ff ff4b 	bl	80057a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	e000e400 	.word	0xe000e400
 800591c:	20000e98 	.word	0x20000e98
 8005920:	20000e9c 	.word	0x20000e9c
 8005924:	e000ed20 	.word	0xe000ed20
 8005928:	20000024 	.word	0x20000024

0800592c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	607b      	str	r3, [r7, #4]
}
 8005944:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005946:	4b0f      	ldr	r3, [pc, #60]	@ (8005984 <vPortEnterCritical+0x58>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3301      	adds	r3, #1
 800594c:	4a0d      	ldr	r2, [pc, #52]	@ (8005984 <vPortEnterCritical+0x58>)
 800594e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005950:	4b0c      	ldr	r3, [pc, #48]	@ (8005984 <vPortEnterCritical+0x58>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d110      	bne.n	800597a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005958:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <vPortEnterCritical+0x5c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00b      	beq.n	800597a <vPortEnterCritical+0x4e>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	603b      	str	r3, [r7, #0]
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop
 8005978:	e7fd      	b.n	8005976 <vPortEnterCritical+0x4a>
	}
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr
 8005984:	20000024 	.word	0x20000024
 8005988:	e000ed04 	.word	0xe000ed04

0800598c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005992:	4b12      	ldr	r3, [pc, #72]	@ (80059dc <vPortExitCritical+0x50>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10b      	bne.n	80059b2 <vPortExitCritical+0x26>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	607b      	str	r3, [r7, #4]
}
 80059ac:	bf00      	nop
 80059ae:	bf00      	nop
 80059b0:	e7fd      	b.n	80059ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059b2:	4b0a      	ldr	r3, [pc, #40]	@ (80059dc <vPortExitCritical+0x50>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	4a08      	ldr	r2, [pc, #32]	@ (80059dc <vPortExitCritical+0x50>)
 80059ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059bc:	4b07      	ldr	r3, [pc, #28]	@ (80059dc <vPortExitCritical+0x50>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d105      	bne.n	80059d0 <vPortExitCritical+0x44>
 80059c4:	2300      	movs	r3, #0
 80059c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	f383 8811 	msr	BASEPRI, r3
}
 80059ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	20000024 	.word	0x20000024

080059e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059e0:	f3ef 8009 	mrs	r0, PSP
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005a20 <pxCurrentTCBConst>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80059f0:	6010      	str	r0, [r2, #0]
 80059f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80059f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80059fa:	f380 8811 	msr	BASEPRI, r0
 80059fe:	f7ff f82f 	bl	8004a60 <vTaskSwitchContext>
 8005a02:	f04f 0000 	mov.w	r0, #0
 8005a06:	f380 8811 	msr	BASEPRI, r0
 8005a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005a0e:	6819      	ldr	r1, [r3, #0]
 8005a10:	6808      	ldr	r0, [r1, #0]
 8005a12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005a16:	f380 8809 	msr	PSP, r0
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	4770      	bx	lr

08005a20 <pxCurrentTCBConst>:
 8005a20:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a24:	bf00      	nop
 8005a26:	bf00      	nop

08005a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	607b      	str	r3, [r7, #4]
}
 8005a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a42:	f7fe ff4d 	bl	80048e0 <xTaskIncrementTick>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a4c:	4b06      	ldr	r3, [pc, #24]	@ (8005a68 <SysTick_Handler+0x40>)
 8005a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	2300      	movs	r3, #0
 8005a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	f383 8811 	msr	BASEPRI, r3
}
 8005a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a60:	bf00      	nop
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	e000ed04 	.word	0xe000ed04

08005a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a70:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <vPortSetupTimerInterrupt+0x30>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a76:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa0 <vPortSetupTimerInterrupt+0x34>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a7c:	4b09      	ldr	r3, [pc, #36]	@ (8005aa4 <vPortSetupTimerInterrupt+0x38>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a09      	ldr	r2, [pc, #36]	@ (8005aa8 <vPortSetupTimerInterrupt+0x3c>)
 8005a82:	fba2 2303 	umull	r2, r3, r2, r3
 8005a86:	099b      	lsrs	r3, r3, #6
 8005a88:	4a08      	ldr	r2, [pc, #32]	@ (8005aac <vPortSetupTimerInterrupt+0x40>)
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a8e:	4b03      	ldr	r3, [pc, #12]	@ (8005a9c <vPortSetupTimerInterrupt+0x30>)
 8005a90:	2207      	movs	r2, #7
 8005a92:	601a      	str	r2, [r3, #0]
}
 8005a94:	bf00      	nop
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr
 8005a9c:	e000e010 	.word	0xe000e010
 8005aa0:	e000e018 	.word	0xe000e018
 8005aa4:	20000018 	.word	0x20000018
 8005aa8:	10624dd3 	.word	0x10624dd3
 8005aac:	e000e014 	.word	0xe000e014

08005ab0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ab6:	f3ef 8305 	mrs	r3, IPSR
 8005aba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b0f      	cmp	r3, #15
 8005ac0:	d915      	bls.n	8005aee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ac2:	4a17      	ldr	r2, [pc, #92]	@ (8005b20 <vPortValidateInterruptPriority+0x70>)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005acc:	4b15      	ldr	r3, [pc, #84]	@ (8005b24 <vPortValidateInterruptPriority+0x74>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	7afa      	ldrb	r2, [r7, #11]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d20b      	bcs.n	8005aee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	607b      	str	r3, [r7, #4]
}
 8005ae8:	bf00      	nop
 8005aea:	bf00      	nop
 8005aec:	e7fd      	b.n	8005aea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005aee:	4b0e      	ldr	r3, [pc, #56]	@ (8005b28 <vPortValidateInterruptPriority+0x78>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005af6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b2c <vPortValidateInterruptPriority+0x7c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d90b      	bls.n	8005b16 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	603b      	str	r3, [r7, #0]
}
 8005b10:	bf00      	nop
 8005b12:	bf00      	nop
 8005b14:	e7fd      	b.n	8005b12 <vPortValidateInterruptPriority+0x62>
	}
 8005b16:	bf00      	nop
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr
 8005b20:	e000e3f0 	.word	0xe000e3f0
 8005b24:	20000e98 	.word	0x20000e98
 8005b28:	e000ed0c 	.word	0xe000ed0c
 8005b2c:	20000e9c 	.word	0x20000e9c

08005b30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08a      	sub	sp, #40	@ 0x28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b3c:	f7fe fe16 	bl	800476c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b40:	4b5a      	ldr	r3, [pc, #360]	@ (8005cac <pvPortMalloc+0x17c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b48:	f000 f916 	bl	8005d78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b4c:	4b58      	ldr	r3, [pc, #352]	@ (8005cb0 <pvPortMalloc+0x180>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4013      	ands	r3, r2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f040 8090 	bne.w	8005c7a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d01e      	beq.n	8005b9e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005b60:	2208      	movs	r2, #8
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4413      	add	r3, r2
 8005b66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d015      	beq.n	8005b9e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f023 0307 	bic.w	r3, r3, #7
 8005b78:	3308      	adds	r3, #8
 8005b7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00b      	beq.n	8005b9e <pvPortMalloc+0x6e>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	617b      	str	r3, [r7, #20]
}
 8005b98:	bf00      	nop
 8005b9a:	bf00      	nop
 8005b9c:	e7fd      	b.n	8005b9a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d06a      	beq.n	8005c7a <pvPortMalloc+0x14a>
 8005ba4:	4b43      	ldr	r3, [pc, #268]	@ (8005cb4 <pvPortMalloc+0x184>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d865      	bhi.n	8005c7a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bae:	4b42      	ldr	r3, [pc, #264]	@ (8005cb8 <pvPortMalloc+0x188>)
 8005bb0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bb2:	4b41      	ldr	r3, [pc, #260]	@ (8005cb8 <pvPortMalloc+0x188>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bb8:	e004      	b.n	8005bc4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d903      	bls.n	8005bd6 <pvPortMalloc+0xa6>
 8005bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1f1      	bne.n	8005bba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bd6:	4b35      	ldr	r3, [pc, #212]	@ (8005cac <pvPortMalloc+0x17c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d04c      	beq.n	8005c7a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2208      	movs	r2, #8
 8005be6:	4413      	add	r3, r2
 8005be8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	1ad2      	subs	r2, r2, r3
 8005bfa:	2308      	movs	r3, #8
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d920      	bls.n	8005c44 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4413      	add	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00b      	beq.n	8005c2c <pvPortMalloc+0xfc>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	613b      	str	r3, [r7, #16]
}
 8005c26:	bf00      	nop
 8005c28:	bf00      	nop
 8005c2a:	e7fd      	b.n	8005c28 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	1ad2      	subs	r2, r2, r3
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c3e:	69b8      	ldr	r0, [r7, #24]
 8005c40:	f000 f8fc 	bl	8005e3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c44:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb4 <pvPortMalloc+0x184>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	4a19      	ldr	r2, [pc, #100]	@ (8005cb4 <pvPortMalloc+0x184>)
 8005c50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c52:	4b18      	ldr	r3, [pc, #96]	@ (8005cb4 <pvPortMalloc+0x184>)
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	4b19      	ldr	r3, [pc, #100]	@ (8005cbc <pvPortMalloc+0x18c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d203      	bcs.n	8005c66 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c5e:	4b15      	ldr	r3, [pc, #84]	@ (8005cb4 <pvPortMalloc+0x184>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a16      	ldr	r2, [pc, #88]	@ (8005cbc <pvPortMalloc+0x18c>)
 8005c64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	4b11      	ldr	r3, [pc, #68]	@ (8005cb0 <pvPortMalloc+0x180>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c7a:	f7fe fd85 	bl	8004788 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00b      	beq.n	8005ca0 <pvPortMalloc+0x170>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	60fb      	str	r3, [r7, #12]
}
 8005c9a:	bf00      	nop
 8005c9c:	bf00      	nop
 8005c9e:	e7fd      	b.n	8005c9c <pvPortMalloc+0x16c>
	return pvReturn;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3728      	adds	r7, #40	@ 0x28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20001aa8 	.word	0x20001aa8
 8005cb0:	20001ab4 	.word	0x20001ab4
 8005cb4:	20001aac 	.word	0x20001aac
 8005cb8:	20001aa0 	.word	0x20001aa0
 8005cbc:	20001ab0 	.word	0x20001ab0

08005cc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d04a      	beq.n	8005d68 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cd2:	2308      	movs	r3, #8
 8005cd4:	425b      	negs	r3, r3
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4413      	add	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	4b22      	ldr	r3, [pc, #136]	@ (8005d70 <vPortFree+0xb0>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10b      	bne.n	8005d06 <vPortFree+0x46>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	60fb      	str	r3, [r7, #12]
}
 8005d00:	bf00      	nop
 8005d02:	bf00      	nop
 8005d04:	e7fd      	b.n	8005d02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00b      	beq.n	8005d26 <vPortFree+0x66>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	60bb      	str	r3, [r7, #8]
}
 8005d20:	bf00      	nop
 8005d22:	bf00      	nop
 8005d24:	e7fd      	b.n	8005d22 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	4b11      	ldr	r3, [pc, #68]	@ (8005d70 <vPortFree+0xb0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d019      	beq.n	8005d68 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d115      	bne.n	8005d68 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	4b0b      	ldr	r3, [pc, #44]	@ (8005d70 <vPortFree+0xb0>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	43db      	mvns	r3, r3
 8005d46:	401a      	ands	r2, r3
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d4c:	f7fe fd0e 	bl	800476c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	4b07      	ldr	r3, [pc, #28]	@ (8005d74 <vPortFree+0xb4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4413      	add	r3, r2
 8005d5a:	4a06      	ldr	r2, [pc, #24]	@ (8005d74 <vPortFree+0xb4>)
 8005d5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d5e:	6938      	ldr	r0, [r7, #16]
 8005d60:	f000 f86c 	bl	8005e3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005d64:	f7fe fd10 	bl	8004788 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d68:	bf00      	nop
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	20001ab4 	.word	0x20001ab4
 8005d74:	20001aac 	.word	0x20001aac

08005d78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d7e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005d82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d84:	4b27      	ldr	r3, [pc, #156]	@ (8005e24 <prvHeapInit+0xac>)
 8005d86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00c      	beq.n	8005dac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3307      	adds	r3, #7
 8005d96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0307 	bic.w	r3, r3, #7
 8005d9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e24 <prvHeapInit+0xac>)
 8005da8:	4413      	add	r3, r2
 8005daa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005db0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e28 <prvHeapInit+0xb0>)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005db6:	4b1c      	ldr	r3, [pc, #112]	@ (8005e28 <prvHeapInit+0xb0>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005dc4:	2208      	movs	r2, #8
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	1a9b      	subs	r3, r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0307 	bic.w	r3, r3, #7
 8005dd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4a15      	ldr	r2, [pc, #84]	@ (8005e2c <prvHeapInit+0xb4>)
 8005dd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005dda:	4b14      	ldr	r3, [pc, #80]	@ (8005e2c <prvHeapInit+0xb4>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2200      	movs	r2, #0
 8005de0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005de2:	4b12      	ldr	r3, [pc, #72]	@ (8005e2c <prvHeapInit+0xb4>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	1ad2      	subs	r2, r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005df8:	4b0c      	ldr	r3, [pc, #48]	@ (8005e2c <prvHeapInit+0xb4>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	4a0a      	ldr	r2, [pc, #40]	@ (8005e30 <prvHeapInit+0xb8>)
 8005e06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	4a09      	ldr	r2, [pc, #36]	@ (8005e34 <prvHeapInit+0xbc>)
 8005e0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e10:	4b09      	ldr	r3, [pc, #36]	@ (8005e38 <prvHeapInit+0xc0>)
 8005e12:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005e16:	601a      	str	r2, [r3, #0]
}
 8005e18:	bf00      	nop
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	20000ea0 	.word	0x20000ea0
 8005e28:	20001aa0 	.word	0x20001aa0
 8005e2c:	20001aa8 	.word	0x20001aa8
 8005e30:	20001ab0 	.word	0x20001ab0
 8005e34:	20001aac 	.word	0x20001aac
 8005e38:	20001ab4 	.word	0x20001ab4

08005e3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e44:	4b27      	ldr	r3, [pc, #156]	@ (8005ee4 <prvInsertBlockIntoFreeList+0xa8>)
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	e002      	b.n	8005e50 <prvInsertBlockIntoFreeList+0x14>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d8f7      	bhi.n	8005e4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	4413      	add	r3, r2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d108      	bne.n	8005e7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	441a      	add	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	441a      	add	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d118      	bne.n	8005ec4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	4b14      	ldr	r3, [pc, #80]	@ (8005ee8 <prvInsertBlockIntoFreeList+0xac>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d00d      	beq.n	8005eba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	441a      	add	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	e008      	b.n	8005ecc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005eba:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee8 <prvInsertBlockIntoFreeList+0xac>)
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	e003      	b.n	8005ecc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d002      	beq.n	8005eda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eda:	bf00      	nop
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr
 8005ee4:	20001aa0 	.word	0x20001aa0
 8005ee8:	20001aa8 	.word	0x20001aa8

08005eec <memset>:
 8005eec:	4603      	mov	r3, r0
 8005eee:	4402      	add	r2, r0
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d100      	bne.n	8005ef6 <memset+0xa>
 8005ef4:	4770      	bx	lr
 8005ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8005efa:	e7f9      	b.n	8005ef0 <memset+0x4>

08005efc <__libc_init_array>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	2600      	movs	r6, #0
 8005f00:	4d0c      	ldr	r5, [pc, #48]	@ (8005f34 <__libc_init_array+0x38>)
 8005f02:	4c0d      	ldr	r4, [pc, #52]	@ (8005f38 <__libc_init_array+0x3c>)
 8005f04:	1b64      	subs	r4, r4, r5
 8005f06:	10a4      	asrs	r4, r4, #2
 8005f08:	42a6      	cmp	r6, r4
 8005f0a:	d109      	bne.n	8005f20 <__libc_init_array+0x24>
 8005f0c:	f000 f828 	bl	8005f60 <_init>
 8005f10:	2600      	movs	r6, #0
 8005f12:	4d0a      	ldr	r5, [pc, #40]	@ (8005f3c <__libc_init_array+0x40>)
 8005f14:	4c0a      	ldr	r4, [pc, #40]	@ (8005f40 <__libc_init_array+0x44>)
 8005f16:	1b64      	subs	r4, r4, r5
 8005f18:	10a4      	asrs	r4, r4, #2
 8005f1a:	42a6      	cmp	r6, r4
 8005f1c:	d105      	bne.n	8005f2a <__libc_init_array+0x2e>
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
 8005f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f24:	4798      	blx	r3
 8005f26:	3601      	adds	r6, #1
 8005f28:	e7ee      	b.n	8005f08 <__libc_init_array+0xc>
 8005f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f2e:	4798      	blx	r3
 8005f30:	3601      	adds	r6, #1
 8005f32:	e7f2      	b.n	8005f1a <__libc_init_array+0x1e>
 8005f34:	08006034 	.word	0x08006034
 8005f38:	08006034 	.word	0x08006034
 8005f3c:	08006034 	.word	0x08006034
 8005f40:	08006038 	.word	0x08006038

08005f44 <memcpy>:
 8005f44:	440a      	add	r2, r1
 8005f46:	4291      	cmp	r1, r2
 8005f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f4c:	d100      	bne.n	8005f50 <memcpy+0xc>
 8005f4e:	4770      	bx	lr
 8005f50:	b510      	push	{r4, lr}
 8005f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f56:	4291      	cmp	r1, r2
 8005f58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f5c:	d1f9      	bne.n	8005f52 <memcpy+0xe>
 8005f5e:	bd10      	pop	{r4, pc}

08005f60 <_init>:
 8005f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f62:	bf00      	nop
 8005f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f66:	bc08      	pop	{r3}
 8005f68:	469e      	mov	lr, r3
 8005f6a:	4770      	bx	lr

08005f6c <_fini>:
 8005f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6e:	bf00      	nop
 8005f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f72:	bc08      	pop	{r3}
 8005f74:	469e      	mov	lr, r3
 8005f76:	4770      	bx	lr
