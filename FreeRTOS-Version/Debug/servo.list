
servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006af8  08006af8  00016af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006be4  08006be4  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08006be4  08006be4  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006be4  08006be4  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006be4  08006be4  00016be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006be8  08006be8  00016be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08006bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ab8  20000028  08006c14  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ae0  08006c14  00021ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001767d  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b39  00000000  00000000  00037711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  0003b250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f88  00000000  00000000  0003c668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019888  00000000  00000000  0003d5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c91  00000000  00000000  00056e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093bf2  00000000  00000000  0006fb09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052fc  00000000  00000000  001036fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001089f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000028 	.word	0x20000028
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ae0 	.word	0x08006ae0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000002c 	.word	0x2000002c
 800014c:	08006ae0 	.word	0x08006ae0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <DCMotor_Start>:
/****************************/

/*APIs Implementation*/

DCMotorErrorStatus_t DCMotor_Start(uint32_t Copy_u32DCMotor)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d902      	bls.n	80009a4 <DCMotor_Start+0x18>
    {
    	Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 800099e:	2301      	movs	r3, #1
 80009a0:	73fb      	strb	r3, [r7, #15]
 80009a2:	e05a      	b.n	8000a5a <DCMotor_Start+0xce>
    }
    else
    {
    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 80009a4:	492f      	ldr	r1, [pc, #188]	; (8000a64 <DCMotor_Start+0xd8>)
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	4613      	mov	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	4413      	add	r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	440b      	add	r3, r1
 80009b2:	3310      	adds	r3, #16
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d14d      	bne.n	8000a56 <DCMotor_Start+0xca>
    		case Timer_2:
    		    __HAL_TIM_SET_COMPARE(&htim2,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    			HAL_TIM_PWM_Start(&htim2, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		case Timer_3:
    		    __HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 80009ba:	492a      	ldr	r1, [pc, #168]	; (8000a64 <DCMotor_Start+0xd8>)
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	4613      	mov	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	440b      	add	r3, r1
 80009c8:	3311      	adds	r3, #17
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d107      	bne.n	80009e0 <DCMotor_Start+0x54>
 80009d0:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <DCMotor_Start+0xdc>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4925      	ldr	r1, [pc, #148]	; (8000a6c <DCMotor_Start+0xe0>)
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009dc:	635a      	str	r2, [r3, #52]	; 0x34
 80009de:	e02c      	b.n	8000a3a <DCMotor_Start+0xae>
 80009e0:	4920      	ldr	r1, [pc, #128]	; (8000a64 <DCMotor_Start+0xd8>)
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	4613      	mov	r3, r2
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	4413      	add	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	440b      	add	r3, r1
 80009ee:	3311      	adds	r3, #17
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	d107      	bne.n	8000a06 <DCMotor_Start+0x7a>
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <DCMotor_Start+0xdc>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	491c      	ldr	r1, [pc, #112]	; (8000a6c <DCMotor_Start+0xe0>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a02:	6393      	str	r3, [r2, #56]	; 0x38
 8000a04:	e019      	b.n	8000a3a <DCMotor_Start+0xae>
 8000a06:	4917      	ldr	r1, [pc, #92]	; (8000a64 <DCMotor_Start+0xd8>)
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	440b      	add	r3, r1
 8000a14:	3311      	adds	r3, #17
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b08      	cmp	r3, #8
 8000a1a:	d107      	bne.n	8000a2c <DCMotor_Start+0xa0>
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <DCMotor_Start+0xdc>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4912      	ldr	r1, [pc, #72]	; (8000a6c <DCMotor_Start+0xe0>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a28:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000a2a:	e006      	b.n	8000a3a <DCMotor_Start+0xae>
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <DCMotor_Start+0xdc>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	490e      	ldr	r1, [pc, #56]	; (8000a6c <DCMotor_Start+0xe0>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
    		    HAL_TIM_PWM_Start(&htim3, DCMotors[Copy_u32DCMotor].Enable_Channel);
 8000a3a:	490a      	ldr	r1, [pc, #40]	; (8000a64 <DCMotor_Start+0xd8>)
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4413      	add	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	440b      	add	r3, r1
 8000a48:	3311      	adds	r3, #17
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <DCMotor_Start+0xdc>)
 8000a50:	f002 f84e 	bl	8002af0 <HAL_TIM_PWM_Start>
    		    break;
 8000a54:	e001      	b.n	8000a5a <DCMotor_Start+0xce>
    		/*case Timer_4:
    		    __HAL_TIM_SET_COMPARE(&htim4,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    HAL_TIM_PWM_Start(&htim4, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000a56:	2301      	movs	r3, #1
 8000a58:	73fb      	strb	r3, [r7, #15]
    	}
    }
    return Ret_ErrorStatus;
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	08006b6c 	.word	0x08006b6c
 8000a68:	20000104 	.word	0x20000104
 8000a6c:	20000000 	.word	0x20000000

08000a70 <DCMotor_Stop>:



DCMotorErrorStatus_t DCMotor_Stop(uint32_t Copy_u32DCMotor)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d902      	bls.n	8000a88 <DCMotor_Stop+0x18>
    {
      	Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000a82:	2301      	movs	r3, #1
 8000a84:	73fb      	strb	r3, [r7, #15]
 8000a86:	e01a      	b.n	8000abe <DCMotor_Stop+0x4e>
    }
    else
    {
    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 8000a88:	490f      	ldr	r1, [pc, #60]	; (8000ac8 <DCMotor_Stop+0x58>)
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4413      	add	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	440b      	add	r3, r1
 8000a96:	3310      	adds	r3, #16
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d10d      	bne.n	8000aba <DCMotor_Stop+0x4a>
    			break;
    		case Timer_2:
    			HAL_TIM_PWM_Stop(&htim2, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		case Timer_3:
    			HAL_TIM_PWM_Stop(&htim3, DCMotors[Copy_u32DCMotor].Enable_Channel);
 8000a9e:	490a      	ldr	r1, [pc, #40]	; (8000ac8 <DCMotor_Stop+0x58>)
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	440b      	add	r3, r1
 8000aac:	3311      	adds	r3, #17
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <DCMotor_Stop+0x5c>)
 8000ab4:	f002 f8be 	bl	8002c34 <HAL_TIM_PWM_Stop>
    		    break;
 8000ab8:	e001      	b.n	8000abe <DCMotor_Stop+0x4e>
    		/*case Timer_4:
    			HAL_TIM_PWM_Stop(&htim4, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000aba:	2301      	movs	r3, #1
 8000abc:	73fb      	strb	r3, [r7, #15]
    	}

    }
    return Ret_ErrorStatus;
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	08006b6c 	.word	0x08006b6c
 8000acc:	20000104 	.word	0x20000104

08000ad0 <DCMotor_StartReverse>:
	    }
	    return Ret_ErrorStatus;
}

DCMotorErrorStatus_t DCMotor_StartReverse(uint32_t Copy_u32DCMotor)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d902      	bls.n	8000ae8 <DCMotor_StartReverse+0x18>
    {
        Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	73fb      	strb	r3, [r7, #15]
 8000ae6:	e087      	b.n	8000bf8 <DCMotor_StartReverse+0x128>
    }
    else
    {
    	HAL_GPIO_WritePin((GPIO_TypeDef *)DCMotors[Copy_u32DCMotor].Input_1.Port, DCMotors[Copy_u32DCMotor].Input_1.Pin, GPIO_PIN_RESET);
 8000ae8:	4946      	ldr	r1, [pc, #280]	; (8000c04 <DCMotor_StartReverse+0x134>)
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	4613      	mov	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	440b      	add	r3, r1
 8000af6:	3304      	adds	r3, #4
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	4942      	ldr	r1, [pc, #264]	; (8000c04 <DCMotor_StartReverse+0x134>)
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4613      	mov	r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	4413      	add	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	440b      	add	r3, r1
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f001 fa9c 	bl	800204c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin((GPIO_TypeDef *)DCMotors[Copy_u32DCMotor].Input_2.Port, DCMotors[Copy_u32DCMotor].Input_2.Pin, GPIO_PIN_SET);
 8000b14:	493b      	ldr	r1, [pc, #236]	; (8000c04 <DCMotor_StartReverse+0x134>)
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	440b      	add	r3, r1
 8000b22:	330c      	adds	r3, #12
 8000b24:	6818      	ldr	r0, [r3, #0]
 8000b26:	4937      	ldr	r1, [pc, #220]	; (8000c04 <DCMotor_StartReverse+0x134>)
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	440b      	add	r3, r1
 8000b34:	3308      	adds	r3, #8
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f001 fa85 	bl	800204c <HAL_GPIO_WritePin>


    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 8000b42:	4930      	ldr	r1, [pc, #192]	; (8000c04 <DCMotor_StartReverse+0x134>)
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	440b      	add	r3, r1
 8000b50:	3310      	adds	r3, #16
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d14d      	bne.n	8000bf4 <DCMotor_StartReverse+0x124>
    		case Timer_2:
    		    __HAL_TIM_SET_COMPARE(&htim2,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    			HAL_TIM_PWM_Start(&htim2, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		case Timer_3:
    		    __HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 8000b58:	492a      	ldr	r1, [pc, #168]	; (8000c04 <DCMotor_StartReverse+0x134>)
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4413      	add	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	440b      	add	r3, r1
 8000b66:	3311      	adds	r3, #17
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d107      	bne.n	8000b7e <DCMotor_StartReverse+0xae>
 8000b6e:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <DCMotor_StartReverse+0x138>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4926      	ldr	r1, [pc, #152]	; (8000c0c <DCMotor_StartReverse+0x13c>)
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000b7c:	e02c      	b.n	8000bd8 <DCMotor_StartReverse+0x108>
 8000b7e:	4921      	ldr	r1, [pc, #132]	; (8000c04 <DCMotor_StartReverse+0x134>)
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	4613      	mov	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	3311      	adds	r3, #17
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d107      	bne.n	8000ba4 <DCMotor_StartReverse+0xd4>
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <DCMotor_StartReverse+0x138>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	491c      	ldr	r1, [pc, #112]	; (8000c0c <DCMotor_StartReverse+0x13c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ba0:	6393      	str	r3, [r2, #56]	; 0x38
 8000ba2:	e019      	b.n	8000bd8 <DCMotor_StartReverse+0x108>
 8000ba4:	4917      	ldr	r1, [pc, #92]	; (8000c04 <DCMotor_StartReverse+0x134>)
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	3311      	adds	r3, #17
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b08      	cmp	r3, #8
 8000bb8:	d107      	bne.n	8000bca <DCMotor_StartReverse+0xfa>
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <DCMotor_StartReverse+0x138>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	4913      	ldr	r1, [pc, #76]	; (8000c0c <DCMotor_StartReverse+0x13c>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bc6:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000bc8:	e006      	b.n	8000bd8 <DCMotor_StartReverse+0x108>
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <DCMotor_StartReverse+0x138>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	490f      	ldr	r1, [pc, #60]	; (8000c0c <DCMotor_StartReverse+0x13c>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
    		    HAL_TIM_PWM_Start(&htim3, DCMotors[Copy_u32DCMotor].Enable_Channel);
 8000bd8:	490a      	ldr	r1, [pc, #40]	; (8000c04 <DCMotor_StartReverse+0x134>)
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	440b      	add	r3, r1
 8000be6:	3311      	adds	r3, #17
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	4619      	mov	r1, r3
 8000bec:	4806      	ldr	r0, [pc, #24]	; (8000c08 <DCMotor_StartReverse+0x138>)
 8000bee:	f001 ff7f 	bl	8002af0 <HAL_TIM_PWM_Start>
    		    break;
 8000bf2:	e001      	b.n	8000bf8 <DCMotor_StartReverse+0x128>
    		/*case Timer_4:
    		    __HAL_TIM_SET_COMPARE(&htim4,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    HAL_TIM_PWM_Start(&htim4, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
    	}

    }
    return Ret_ErrorStatus;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	08006b6c 	.word	0x08006b6c
 8000c08:	20000104 	.word	0x20000104
 8000c0c:	20000000 	.word	0x20000000

08000c10 <DCMotor_SetSpeed>:


DCMotorErrorStatus_t DCMotor_SetSpeed(uint32_t Copy_u32DCMotor, uint32_t Copy_u32SpeedPercentage)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d902      	bls.n	8000c2a <DCMotor_SetSpeed+0x1a>
    {
        Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000c24:	2301      	movs	r3, #1
 8000c26:	73fb      	strb	r3, [r7, #15]
 8000c28:	e05a      	b.n	8000ce0 <DCMotor_SetSpeed+0xd0>
    }
    else
    {
    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 8000c2a:	4930      	ldr	r1, [pc, #192]	; (8000cec <DCMotor_SetSpeed+0xdc>)
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	440b      	add	r3, r1
 8000c38:	3310      	adds	r3, #16
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d14d      	bne.n	8000cdc <DCMotor_SetSpeed+0xcc>
    		case Timer_2:
    			Motor_Speed[Copy_u32DCMotor] = (MAX_SPEED*Copy_u32SpeedPercentage)/100;
    			__HAL_TIM_SET_COMPARE(&htim2,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    break;*/
    		case Timer_3:
    			Motor_Speed[Copy_u32DCMotor] = (MAX_SPEED*Copy_u32SpeedPercentage)/100;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c46:	fb02 f303 	mul.w	r3, r2, r3
 8000c4a:	4a29      	ldr	r2, [pc, #164]	; (8000cf0 <DCMotor_SetSpeed+0xe0>)
 8000c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c50:	095a      	lsrs	r2, r3, #5
 8000c52:	4928      	ldr	r1, [pc, #160]	; (8000cf4 <DCMotor_SetSpeed+0xe4>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 8000c5a:	4924      	ldr	r1, [pc, #144]	; (8000cec <DCMotor_SetSpeed+0xdc>)
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4413      	add	r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	440b      	add	r3, r1
 8000c68:	3311      	adds	r3, #17
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d107      	bne.n	8000c80 <DCMotor_SetSpeed+0x70>
 8000c70:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <DCMotor_SetSpeed+0xe8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	491f      	ldr	r1, [pc, #124]	; (8000cf4 <DCMotor_SetSpeed+0xe4>)
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c7c:	635a      	str	r2, [r3, #52]	; 0x34
    		    break;
 8000c7e:	e02f      	b.n	8000ce0 <DCMotor_SetSpeed+0xd0>
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 8000c80:	491a      	ldr	r1, [pc, #104]	; (8000cec <DCMotor_SetSpeed+0xdc>)
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	4613      	mov	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	3311      	adds	r3, #17
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	d107      	bne.n	8000ca6 <DCMotor_SetSpeed+0x96>
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <DCMotor_SetSpeed+0xe8>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4916      	ldr	r1, [pc, #88]	; (8000cf4 <DCMotor_SetSpeed+0xe4>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ca2:	6393      	str	r3, [r2, #56]	; 0x38
    		    break;
 8000ca4:	e01c      	b.n	8000ce0 <DCMotor_SetSpeed+0xd0>
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 8000ca6:	4911      	ldr	r1, [pc, #68]	; (8000cec <DCMotor_SetSpeed+0xdc>)
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	4613      	mov	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	3311      	adds	r3, #17
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b08      	cmp	r3, #8
 8000cba:	d107      	bne.n	8000ccc <DCMotor_SetSpeed+0xbc>
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <DCMotor_SetSpeed+0xe8>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	490c      	ldr	r1, [pc, #48]	; (8000cf4 <DCMotor_SetSpeed+0xe4>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cc8:	63d3      	str	r3, [r2, #60]	; 0x3c
    		    break;
 8000cca:	e009      	b.n	8000ce0 <DCMotor_SetSpeed+0xd0>
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <DCMotor_SetSpeed+0xe8>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <DCMotor_SetSpeed+0xe4>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
    		    break;
 8000cda:	e001      	b.n	8000ce0 <DCMotor_SetSpeed+0xd0>
    		/*case Timer_4:
    			Motor_Speed[Copy_u32DCMotor] = (MAX_SPEED*Copy_u32SpeedPercentage)/100;
    			__HAL_TIM_SET_COMPARE(&htim4,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
    	}

    }
    return Ret_ErrorStatus;
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	08006b6c 	.word	0x08006b6c
 8000cf0:	51eb851f 	.word	0x51eb851f
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000104 	.word	0x20000104

08000cfc <BL_ReadByteSync>:
#include "HAL/bluetooth.h"

volatile uint8_t Data[1] = {0};

uint8_t BL_ReadByteSync()
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, Data, 1, 2);
 8000d06:	2302      	movs	r3, #2
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4914      	ldr	r1, [pc, #80]	; (8000d5c <BL_ReadByteSync+0x60>)
 8000d0c:	4814      	ldr	r0, [pc, #80]	; (8000d60 <BL_ReadByteSync+0x64>)
 8000d0e:	f003 f845 	bl	8003d9c <HAL_UART_Receive>
 8000d12:	4603      	mov	r3, r0
 8000d14:	71bb      	strb	r3, [r7, #6]
	    if (status == HAL_OK) {
 8000d16:	79bb      	ldrb	r3, [r7, #6]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <BL_ReadByteSync+0x26>
	        temp = Data[0];
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <BL_ReadByteSync+0x60>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	71fb      	strb	r3, [r7, #7]
	    }

	if(temp == 'F')
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b46      	cmp	r3, #70	; 0x46
 8000d26:	d105      	bne.n	8000d34 <BL_ReadByteSync+0x38>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d2e:	480d      	ldr	r0, [pc, #52]	; (8000d64 <BL_ReadByteSync+0x68>)
 8000d30:	f001 f98c 	bl	800204c <HAL_GPIO_WritePin>
	}

	if(Data[0] == 'B')
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <BL_ReadByteSync+0x60>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b42      	cmp	r3, #66	; 0x42
 8000d3c:	d105      	bne.n	8000d4a <BL_ReadByteSync+0x4e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d44:	4807      	ldr	r0, [pc, #28]	; (8000d64 <BL_ReadByteSync+0x68>)
 8000d46:	f001 f981 	bl	800204c <HAL_GPIO_WritePin>
	}

	Data[0] = 0;
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <BL_ReadByteSync+0x60>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
	return temp;
 8000d50:	79fb      	ldrb	r3, [r7, #7]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000044 	.word	0x20000044
 8000d60:	2000014c 	.word	0x2000014c
 8000d64:	40011000 	.word	0x40011000

08000d68 <get_data_task>:


struct CarState CarInfo = {0, forward, 0, idle};

void get_data_task(void * pvParameters)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	//uint8_t Data = 0;
	while(1)
	{
		CarInfo.DriverInput = BL_ReadByteSync();
 8000d70:	f7ff ffc4 	bl	8000cfc <BL_ReadByteSync>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b02      	ldr	r3, [pc, #8]	; (8000d84 <get_data_task+0x1c>)
 8000d7a:	701a      	strb	r2, [r3, #0]
		//HAL_USART_Receive(&husart1, &Data, 1, 1);
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		vTaskDelay(pdMS_TO_TICKS(10));
 8000d7c:	200a      	movs	r0, #10
 8000d7e:	f004 fa37 	bl	80051f0 <vTaskDelay>
		CarInfo.DriverInput = BL_ReadByteSync();
 8000d82:	e7f5      	b.n	8000d70 <get_data_task+0x8>
 8000d84:	20000008 	.word	0x20000008

08000d88 <drive_task>:
	}
}

void drive_task(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
	int steer_counter = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]

	//DCMotorInit();
	//DCMotor_Start(DRIVING_MOTOR);
	DCMotor_SetSpeed(STEERING_MOTOR, 50);
 8000d92:	2132      	movs	r1, #50	; 0x32
 8000d94:	2001      	movs	r0, #1
 8000d96:	f7ff ff3b 	bl	8000c10 <DCMotor_SetSpeed>

	while(1)
	{
		switch(CarInfo.DriverInput)
 8000d9a:	4b6f      	ldr	r3, [pc, #444]	; (8000f58 <drive_task+0x1d0>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2bff      	cmp	r3, #255	; 0xff
 8000da0:	d075      	beq.n	8000e8e <drive_task+0x106>
 8000da2:	2bff      	cmp	r3, #255	; 0xff
 8000da4:	f300 80d0 	bgt.w	8000f48 <drive_task+0x1c0>
 8000da8:	2b39      	cmp	r3, #57	; 0x39
 8000daa:	dc6b      	bgt.n	8000e84 <drive_task+0xfc>
 8000dac:	2b30      	cmp	r3, #48	; 0x30
 8000dae:	f280 80b2 	bge.w	8000f16 <drive_task+0x18e>
			DCMotor_Stop(DRIVING_MOTOR);
			DCMotor_Stop(STEERING_MOTOR);
			CarInfo.DriverInput=idle;
			break;

		default: break;
 8000db2:	e0c9      	b.n	8000f48 <drive_task+0x1c0>
		switch(CarInfo.DriverInput)
 8000db4:	3b42      	subs	r3, #66	; 0x42
 8000db6:	2b2f      	cmp	r3, #47	; 0x2f
 8000db8:	f200 80c6 	bhi.w	8000f48 <drive_task+0x1c0>
 8000dbc:	a201      	add	r2, pc, #4	; (adr r2, 8000dc4 <drive_task+0x3c>)
 8000dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc2:	bf00      	nop
 8000dc4:	08000ec5 	.word	0x08000ec5
 8000dc8:	08000f49 	.word	0x08000f49
 8000dcc:	08000f49 	.word	0x08000f49
 8000dd0:	08000f49 	.word	0x08000f49
 8000dd4:	08000ea1 	.word	0x08000ea1
 8000dd8:	08000f49 	.word	0x08000f49
 8000ddc:	08000f49 	.word	0x08000f49
 8000de0:	08000f49 	.word	0x08000f49
 8000de4:	08000f49 	.word	0x08000f49
 8000de8:	08000f49 	.word	0x08000f49
 8000dec:	08000efd 	.word	0x08000efd
 8000df0:	08000f49 	.word	0x08000f49
 8000df4:	08000f49 	.word	0x08000f49
 8000df8:	08000f49 	.word	0x08000f49
 8000dfc:	08000f49 	.word	0x08000f49
 8000e00:	08000f49 	.word	0x08000f49
 8000e04:	08000ee9 	.word	0x08000ee9
 8000e08:	08000f35 	.word	0x08000f35
 8000e0c:	08000f49 	.word	0x08000f49
 8000e10:	08000f49 	.word	0x08000f49
 8000e14:	08000f49 	.word	0x08000f49
 8000e18:	08000f49 	.word	0x08000f49
 8000e1c:	08000f49 	.word	0x08000f49
 8000e20:	08000f49 	.word	0x08000f49
 8000e24:	08000f49 	.word	0x08000f49
 8000e28:	08000f49 	.word	0x08000f49
 8000e2c:	08000f49 	.word	0x08000f49
 8000e30:	08000f49 	.word	0x08000f49
 8000e34:	08000f49 	.word	0x08000f49
 8000e38:	08000f49 	.word	0x08000f49
 8000e3c:	08000f49 	.word	0x08000f49
 8000e40:	08000f49 	.word	0x08000f49
 8000e44:	08000f49 	.word	0x08000f49
 8000e48:	08000f49 	.word	0x08000f49
 8000e4c:	08000f49 	.word	0x08000f49
 8000e50:	08000f49 	.word	0x08000f49
 8000e54:	08000f49 	.word	0x08000f49
 8000e58:	08000f49 	.word	0x08000f49
 8000e5c:	08000f49 	.word	0x08000f49
 8000e60:	08000f49 	.word	0x08000f49
 8000e64:	08000f49 	.word	0x08000f49
 8000e68:	08000f49 	.word	0x08000f49
 8000e6c:	08000f49 	.word	0x08000f49
 8000e70:	08000f49 	.word	0x08000f49
 8000e74:	08000f49 	.word	0x08000f49
 8000e78:	08000f49 	.word	0x08000f49
 8000e7c:	08000f49 	.word	0x08000f49
 8000e80:	08000f11 	.word	0x08000f11
 8000e84:	2b71      	cmp	r3, #113	; 0x71
 8000e86:	dc5f      	bgt.n	8000f48 <drive_task+0x1c0>
 8000e88:	2b42      	cmp	r3, #66	; 0x42
 8000e8a:	da93      	bge.n	8000db4 <drive_task+0x2c>
		default: break;
 8000e8c:	e05c      	b.n	8000f48 <drive_task+0x1c0>
			if(steer_counter > 0)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	dd5b      	ble.n	8000f4c <drive_task+0x1c4>
				steer_counter = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
				DCMotor_Stop(STEERING_MOTOR);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff fde9 	bl	8000a70 <DCMotor_Stop>
			break;
 8000e9e:	e055      	b.n	8000f4c <drive_task+0x1c4>
			if((CarInfo.last_state == steer_right) || (CarInfo.last_state == steer_left))
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <drive_task+0x1d0>)
 8000ea2:	7b1b      	ldrb	r3, [r3, #12]
 8000ea4:	2b52      	cmp	r3, #82	; 0x52
 8000ea6:	d003      	beq.n	8000eb0 <drive_task+0x128>
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <drive_task+0x1d0>)
 8000eaa:	7b1b      	ldrb	r3, [r3, #12]
 8000eac:	2b4c      	cmp	r3, #76	; 0x4c
 8000eae:	d102      	bne.n	8000eb6 <drive_task+0x12e>
				DCMotor_Stop(STEERING_MOTOR);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f7ff fddd 	bl	8000a70 <DCMotor_Stop>
			DCMotor_Start(DRIVING_MOTOR);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff fd68 	bl	800098c <DCMotor_Start>
			CarInfo.DriverInput = idle;
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <drive_task+0x1d0>)
 8000ebe:	22ff      	movs	r2, #255	; 0xff
 8000ec0:	701a      	strb	r2, [r3, #0]
			break;
 8000ec2:	e044      	b.n	8000f4e <drive_task+0x1c6>
			if((CarInfo.last_state == steer_right) || (CarInfo.last_state == steer_left))
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <drive_task+0x1d0>)
 8000ec6:	7b1b      	ldrb	r3, [r3, #12]
 8000ec8:	2b52      	cmp	r3, #82	; 0x52
 8000eca:	d003      	beq.n	8000ed4 <drive_task+0x14c>
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <drive_task+0x1d0>)
 8000ece:	7b1b      	ldrb	r3, [r3, #12]
 8000ed0:	2b4c      	cmp	r3, #76	; 0x4c
 8000ed2:	d102      	bne.n	8000eda <drive_task+0x152>
				DCMotor_Stop(STEERING_MOTOR);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f7ff fdcb 	bl	8000a70 <DCMotor_Stop>
			DCMotor_StartReverse(DRIVING_MOTOR);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f7ff fdf8 	bl	8000ad0 <DCMotor_StartReverse>
			CarInfo.DriverInput = idle;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <drive_task+0x1d0>)
 8000ee2:	22ff      	movs	r2, #255	; 0xff
 8000ee4:	701a      	strb	r2, [r3, #0]
			break;
 8000ee6:	e032      	b.n	8000f4e <drive_task+0x1c6>
			DCMotor_StartReverse(STEERING_MOTOR);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f7ff fdf1 	bl	8000ad0 <DCMotor_StartReverse>
			steer_counter++;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
			CarInfo.DriverInput=idle;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <drive_task+0x1d0>)
 8000ef6:	22ff      	movs	r2, #255	; 0xff
 8000ef8:	701a      	strb	r2, [r3, #0]
			break;
 8000efa:	e028      	b.n	8000f4e <drive_task+0x1c6>
			DCMotor_Start(STEERING_MOTOR);
 8000efc:	2001      	movs	r0, #1
 8000efe:	f7ff fd45 	bl	800098c <DCMotor_Start>
			steer_counter++;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3301      	adds	r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
			CarInfo.DriverInput=idle;
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <drive_task+0x1d0>)
 8000f0a:	22ff      	movs	r2, #255	; 0xff
 8000f0c:	701a      	strb	r2, [r3, #0]
			break;
 8000f0e:	e01e      	b.n	8000f4e <drive_task+0x1c6>
		case speed_100: CarInfo.DriverInput = 100;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <drive_task+0x1d0>)
 8000f12:	2264      	movs	r2, #100	; 0x64
 8000f14:	701a      	strb	r2, [r3, #0]
			DCMotor_SetSpeed(DRIVING_MOTOR, CarInfo.DriverInput);
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <drive_task+0x1d0>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f7ff fe77 	bl	8000c10 <DCMotor_SetSpeed>
			CarInfo.speed = CarInfo.DriverInput;
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <drive_task+0x1d0>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <drive_task+0x1d0>)
 8000f2a:	609a      	str	r2, [r3, #8]
			CarInfo.DriverInput=idle;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <drive_task+0x1d0>)
 8000f2e:	22ff      	movs	r2, #255	; 0xff
 8000f30:	701a      	strb	r2, [r3, #0]
			break;
 8000f32:	e00c      	b.n	8000f4e <drive_task+0x1c6>
			DCMotor_Stop(DRIVING_MOTOR);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fd9b 	bl	8000a70 <DCMotor_Stop>
			DCMotor_Stop(STEERING_MOTOR);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff fd98 	bl	8000a70 <DCMotor_Stop>
			CarInfo.DriverInput=idle;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <drive_task+0x1d0>)
 8000f42:	22ff      	movs	r2, #255	; 0xff
 8000f44:	701a      	strb	r2, [r3, #0]
			break;
 8000f46:	e002      	b.n	8000f4e <drive_task+0x1c6>
		default: break;
 8000f48:	bf00      	nop
 8000f4a:	e000      	b.n	8000f4e <drive_task+0x1c6>
			break;
 8000f4c:	bf00      	nop
		}

		vTaskDelay(pdMS_TO_TICKS(2));
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f004 f94e 	bl	80051f0 <vTaskDelay>
		switch(CarInfo.DriverInput)
 8000f54:	e721      	b.n	8000d9a <drive_task+0x12>
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008

08000f5c <HCSR04_1_Read_task>:
	}
}

/* ultrasonic task fo blind spot detection */
void HCSR04_1_Read_task(void * pvParameters)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	//uint8_t Data = 0;
	while(1)
	{
		HAL_GPIO_WritePin(TRIG1_PORT, TRIG1_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f6a:	480c      	ldr	r0, [pc, #48]	; (8000f9c <HCSR04_1_Read_task+0x40>)
 8000f6c:	f001 f86e 	bl	800204c <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(10));  // wait for 10 us
 8000f70:	200a      	movs	r0, #10
 8000f72:	f004 f93d 	bl	80051f0 <vTaskDelay>
		HAL_GPIO_WritePin(TRIG1_PORT, TRIG1_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f7c:	4807      	ldr	r0, [pc, #28]	; (8000f9c <HCSR04_1_Read_task+0x40>)
 8000f7e:	f001 f865 	bl	800204c <HAL_GPIO_WritePin>

		__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <HCSR04_1_Read_task+0x44>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HCSR04_1_Read_task+0x44>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f042 0202 	orr.w	r2, r2, #2
 8000f90:	60da      	str	r2, [r3, #12]
		vTaskDelay(pdMS_TO_TICKS(100));
 8000f92:	2064      	movs	r0, #100	; 0x64
 8000f94:	f004 f92c 	bl	80051f0 <vTaskDelay>
		HAL_GPIO_WritePin(TRIG1_PORT, TRIG1_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f98:	e7e4      	b.n	8000f64 <HCSR04_1_Read_task+0x8>
 8000f9a:	bf00      	nop
 8000f9c:	40010800 	.word	0x40010800
 8000fa0:	20000048 	.word	0x20000048

08000fa4 <HCSR04_2_Read_task>:
	}
}
/* ultrasonic task fo blind spot detection */
void HCSR04_2_Read_task(void * pvParameters)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	//uint8_t Data = 0;
	while(1)
	{
		HAL_GPIO_WritePin(TRIG2_PORT, TRIG2_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000fac:	2201      	movs	r2, #1
 8000fae:	2108      	movs	r1, #8
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <HCSR04_2_Read_task+0x3c>)
 8000fb2:	f001 f84b 	bl	800204c <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(10));  // wait for 10 us
 8000fb6:	200a      	movs	r0, #10
 8000fb8:	f004 f91a 	bl	80051f0 <vTaskDelay>
		HAL_GPIO_WritePin(TRIG2_PORT, TRIG2_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2108      	movs	r1, #8
 8000fc0:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <HCSR04_2_Read_task+0x3c>)
 8000fc2:	f001 f843 	bl	800204c <HAL_GPIO_WritePin>

		__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <HCSR04_2_Read_task+0x40>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HCSR04_2_Read_task+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f042 0202 	orr.w	r2, r2, #2
 8000fd4:	60da      	str	r2, [r3, #12]
		vTaskDelay(pdMS_TO_TICKS(100));
 8000fd6:	2064      	movs	r0, #100	; 0x64
 8000fd8:	f004 f90a 	bl	80051f0 <vTaskDelay>
		HAL_GPIO_WritePin(TRIG2_PORT, TRIG2_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000fdc:	e7e6      	b.n	8000fac <HCSR04_2_Read_task+0x8>
 8000fde:	bf00      	nop
 8000fe0:	40010c00 	.word	0x40010c00
 8000fe4:	20000048 	.word	0x20000048

08000fe8 <blind_spot_task>:
	}
}

/* ultrasonic task fo blind spot detection */
void blind_spot_task(void * pvParameters)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
		//  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
		}
		else{
		//  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
		}
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000ff0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff4:	f004 f8fc 	bl	80051f0 <vTaskDelay>
		if(Distance_CH1 >10){
 8000ff8:	e7fa      	b.n	8000ff0 <blind_spot_task+0x8>
 8000ffa:	0000      	movs	r0, r0
 8000ffc:	0000      	movs	r0, r0
	...

08001000 <HAL_TIM_IC_CaptureCallback>:

// Let's write the callback function


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	// Channel 1 handling
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7f1b      	ldrb	r3, [r3, #28]
 800100c:	2b01      	cmp	r3, #1
 800100e:	f040 8082 	bne.w	8001116 <HAL_TIM_IC_CaptureCallback+0x116>
	{
		static uint8_t Is_First_Captured_CH1 = 0; // flag for channel 1 first capture
		static uint32_t IC_Val1_CH1 = 0, IC_Val2_CH1 = 0, Difference_CH1 = 0;


		if (Is_First_Captured_CH1 == 0) // if the first value is not captured
 8001012:	4b89      	ldr	r3, [pc, #548]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d11a      	bne.n	8001050 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1_CH1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800101a:	2100      	movs	r1, #0
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f002 f9eb 	bl	80033f8 <HAL_TIM_ReadCapturedValue>
 8001022:	4603      	mov	r3, r0
 8001024:	4a85      	ldr	r2, [pc, #532]	; (800123c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001026:	6013      	str	r3, [r2, #0]
			Is_First_Captured_CH1 = 1;  // set the first captured as true
 8001028:	4b83      	ldr	r3, [pc, #524]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x238>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6a1a      	ldr	r2, [r3, #32]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 020a 	bic.w	r2, r2, #10
 800103c:	621a      	str	r2, [r3, #32]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6a1a      	ldr	r2, [r3, #32]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f042 0202 	orr.w	r2, r2, #2
 800104c:	621a      	str	r2, [r3, #32]
 800104e:	e062      	b.n	8001116 <HAL_TIM_IC_CaptureCallback+0x116>
		}
		else if (Is_First_Captured_CH1 == 1)   // if the first is already captured
 8001050:	4b79      	ldr	r3, [pc, #484]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d15e      	bne.n	8001116 <HAL_TIM_IC_CaptureCallback+0x116>
		{
			IC_Val2_CH1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001058:	2100      	movs	r1, #0
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f002 f9cc 	bl	80033f8 <HAL_TIM_ReadCapturedValue>
 8001060:	4603      	mov	r3, r0
 8001062:	4a77      	ldr	r2, [pc, #476]	; (8001240 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001064:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC_Val2_CH1 > IC_Val1_CH1)
 800106e:	4b74      	ldr	r3, [pc, #464]	; (8001240 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b72      	ldr	r3, [pc, #456]	; (800123c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d907      	bls.n	800108a <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Difference_CH1 = IC_Val2_CH1 - IC_Val1_CH1;
 800107a:	4b71      	ldr	r3, [pc, #452]	; (8001240 <HAL_TIM_IC_CaptureCallback+0x240>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4b6f      	ldr	r3, [pc, #444]	; (800123c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	4a6f      	ldr	r2, [pc, #444]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	e00f      	b.n	80010aa <HAL_TIM_IC_CaptureCallback+0xaa>
			}
			else if (IC_Val1_CH1 > IC_Val2_CH1)
 800108a:	4b6c      	ldr	r3, [pc, #432]	; (800123c <HAL_TIM_IC_CaptureCallback+0x23c>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4b6c      	ldr	r3, [pc, #432]	; (8001240 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	429a      	cmp	r2, r3
 8001094:	d909      	bls.n	80010aa <HAL_TIM_IC_CaptureCallback+0xaa>
			{
				Difference_CH1 = (0xffff - IC_Val1_CH1) + IC_Val2_CH1;
 8001096:	4b6a      	ldr	r3, [pc, #424]	; (8001240 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b68      	ldr	r3, [pc, #416]	; (800123c <HAL_TIM_IC_CaptureCallback+0x23c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80010a4:	33ff      	adds	r3, #255	; 0xff
 80010a6:	4a67      	ldr	r2, [pc, #412]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x244>)
 80010a8:	6013      	str	r3, [r2, #0]
			}

			Distance_CH1 = Difference_CH1 * .034 / 2;
 80010aa:	4b66      	ldr	r3, [pc, #408]	; (8001244 <HAL_TIM_IC_CaptureCallback+0x244>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f990 	bl	80003d4 <__aeabi_ui2d>
 80010b4:	a35e      	add	r3, pc, #376	; (adr r3, 8001230 <HAL_TIM_IC_CaptureCallback+0x230>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	f7ff fa05 	bl	80004c8 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010ce:	f7ff fb25 	bl	800071c <__aeabi_ddiv>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f7ff fc07 	bl	80008ec <__aeabi_d2f>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a59      	ldr	r2, [pc, #356]	; (8001248 <HAL_TIM_IC_CaptureCallback+0x248>)
 80010e2:	6013      	str	r3, [r2, #0]
			Is_First_Captured_CH1 = 0; // set it back to false
 80010e4:	4b54      	ldr	r3, [pc, #336]	; (8001238 <HAL_TIM_IC_CaptureCallback+0x238>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6a1a      	ldr	r2, [r3, #32]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 020a 	bic.w	r2, r2, #10
 80010f8:	621a      	str	r2, [r3, #32]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6a12      	ldr	r2, [r2, #32]
 8001104:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 8001106:	4b51      	ldr	r3, [pc, #324]	; (800124c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	4b4f      	ldr	r3, [pc, #316]	; (800124c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0202 	bic.w	r2, r2, #2
 8001114:	60da      	str	r2, [r3, #12]
		}
	}

	// Channel 2 handling
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel2
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7f1b      	ldrb	r3, [r3, #28]
 800111a:	2b02      	cmp	r3, #2
 800111c:	f040 8082 	bne.w	8001224 <HAL_TIM_IC_CaptureCallback+0x224>
	{
		static uint8_t Is_First_Captured_CH2 = 0; // flag for channel 2 first capture
		static uint32_t IC_Val1_CH2 = 0, IC_Val2_CH2 = 0, Difference_CH2 = 0;

		if (Is_First_Captured_CH2 == 0) // if the first value is not captured
 8001120:	4b4b      	ldr	r3, [pc, #300]	; (8001250 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d11a      	bne.n	800115e <HAL_TIM_IC_CaptureCallback+0x15e>
		{
			IC_Val1_CH2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8001128:	2104      	movs	r1, #4
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f002 f964 	bl	80033f8 <HAL_TIM_ReadCapturedValue>
 8001130:	4603      	mov	r3, r0
 8001132:	4a48      	ldr	r2, [pc, #288]	; (8001254 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001134:	6013      	str	r3, [r2, #0]
			Is_First_Captured_CH2 = 1;  // set the first captured as true
 8001136:	4b46      	ldr	r3, [pc, #280]	; (8001250 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6a1a      	ldr	r2, [r3, #32]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800114a:	621a      	str	r2, [r3, #32]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6a1a      	ldr	r2, [r3, #32]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0220 	orr.w	r2, r2, #32
 800115a:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
		}
	}
}
 800115c:	e062      	b.n	8001224 <HAL_TIM_IC_CaptureCallback+0x224>
		else if (Is_First_Captured_CH2 == 1)   // if the first is already captured
 800115e:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d15e      	bne.n	8001224 <HAL_TIM_IC_CaptureCallback+0x224>
			IC_Val2_CH2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8001166:	2104      	movs	r1, #4
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f002 f945 	bl	80033f8 <HAL_TIM_ReadCapturedValue>
 800116e:	4603      	mov	r3, r0
 8001170:	4a39      	ldr	r2, [pc, #228]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001172:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2200      	movs	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2_CH2 > IC_Val1_CH2)
 800117c:	4b36      	ldr	r3, [pc, #216]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x258>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d907      	bls.n	8001198 <HAL_TIM_IC_CaptureCallback+0x198>
				Difference_CH2 = IC_Val2_CH2 - IC_Val1_CH2;
 8001188:	4b33      	ldr	r3, [pc, #204]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x258>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b31      	ldr	r3, [pc, #196]	; (8001254 <HAL_TIM_IC_CaptureCallback+0x254>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	4a32      	ldr	r2, [pc, #200]	; (800125c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e00f      	b.n	80011b8 <HAL_TIM_IC_CaptureCallback+0x1b8>
			else if (IC_Val1_CH2 > IC_Val2_CH2)
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <HAL_TIM_IC_CaptureCallback+0x254>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x258>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d909      	bls.n	80011b8 <HAL_TIM_IC_CaptureCallback+0x1b8>
				Difference_CH2 = (0xffff - IC_Val1_CH2) + IC_Val2_CH2;
 80011a4:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <HAL_TIM_IC_CaptureCallback+0x258>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <HAL_TIM_IC_CaptureCallback+0x254>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80011b2:	33ff      	adds	r3, #255	; 0xff
 80011b4:	4a29      	ldr	r2, [pc, #164]	; (800125c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80011b6:	6013      	str	r3, [r2, #0]
			Distance_CH2 = Difference_CH2 * .034 / 2;
 80011b8:	4b28      	ldr	r3, [pc, #160]	; (800125c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f909 	bl	80003d4 <__aeabi_ui2d>
 80011c2:	a31b      	add	r3, pc, #108	; (adr r3, 8001230 <HAL_TIM_IC_CaptureCallback+0x230>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	f7ff f97e 	bl	80004c8 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011dc:	f7ff fa9e 	bl	800071c <__aeabi_ddiv>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff fb80 	bl	80008ec <__aeabi_d2f>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <HAL_TIM_IC_CaptureCallback+0x260>)
 80011f0:	6013      	str	r3, [r2, #0]
			Is_First_Captured_CH2 = 0; // set it back to false
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_TIM_IC_CaptureCallback+0x250>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6a1a      	ldr	r2, [r3, #32]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001206:	621a      	str	r2, [r3, #32]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6a12      	ldr	r2, [r2, #32]
 8001212:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0204 	bic.w	r2, r2, #4
 8001222:	60da      	str	r2, [r3, #12]
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	f3af 8000 	nop.w
 8001230:	b020c49c 	.word	0xb020c49c
 8001234:	3fa16872 	.word	0x3fa16872
 8001238:	20000098 	.word	0x20000098
 800123c:	2000009c 	.word	0x2000009c
 8001240:	200000a0 	.word	0x200000a0
 8001244:	200000a4 	.word	0x200000a4
 8001248:	20000090 	.word	0x20000090
 800124c:	20000048 	.word	0x20000048
 8001250:	200000a8 	.word	0x200000a8
 8001254:	200000ac 	.word	0x200000ac
 8001258:	200000b0 	.word	0x200000b0
 800125c:	200000b4 	.word	0x200000b4
 8001260:	20000094 	.word	0x20000094

08001264 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <MX_FREERTOS_Init+0x18>)
 800126a:	2100      	movs	r1, #0
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_FREERTOS_Init+0x1c>)
 800126e:	f002 ff89 	bl	8004184 <osThreadNew>
 8001272:	4603      	mov	r3, r0
 8001274:	4a03      	ldr	r2, [pc, #12]	; (8001284 <MX_FREERTOS_Init+0x20>)
 8001276:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	08006b94 	.word	0x08006b94
 8001280:	08001289 	.word	0x08001289
 8001284:	200000b8 	.word	0x200000b8

08001288 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f003 f821 	bl	80042d8 <osDelay>
 8001296:	e7fb      	b.n	8001290 <StartDefaultTask+0x8>

08001298 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ac:	4b32      	ldr	r3, [pc, #200]	; (8001378 <MX_GPIO_Init+0xe0>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a31      	ldr	r2, [pc, #196]	; (8001378 <MX_GPIO_Init+0xe0>)
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <MX_GPIO_Init+0xe0>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0310 	and.w	r3, r3, #16
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <MX_GPIO_Init+0xe0>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a2b      	ldr	r2, [pc, #172]	; (8001378 <MX_GPIO_Init+0xe0>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b29      	ldr	r3, [pc, #164]	; (8001378 <MX_GPIO_Init+0xe0>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012dc:	4b26      	ldr	r3, [pc, #152]	; (8001378 <MX_GPIO_Init+0xe0>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a25      	ldr	r2, [pc, #148]	; (8001378 <MX_GPIO_Init+0xe0>)
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b23      	ldr	r3, [pc, #140]	; (8001378 <MX_GPIO_Init+0xe0>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012fa:	4820      	ldr	r0, [pc, #128]	; (800137c <MX_GPIO_Init+0xe4>)
 80012fc:	f000 fea6 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	211e      	movs	r1, #30
 8001304:	481e      	ldr	r0, [pc, #120]	; (8001380 <MX_GPIO_Init+0xe8>)
 8001306:	f000 fea1 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Trigger1_Pin|Trigger2_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8001310:	481c      	ldr	r0, [pc, #112]	; (8001384 <MX_GPIO_Init+0xec>)
 8001312:	f000 fe9b 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2302      	movs	r3, #2
 8001326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4619      	mov	r1, r3
 800132e:	4813      	ldr	r0, [pc, #76]	; (800137c <MX_GPIO_Init+0xe4>)
 8001330:	f000 fd08 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001334:	231e      	movs	r3, #30
 8001336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2302      	movs	r3, #2
 8001342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4619      	mov	r1, r3
 800134a:	480d      	ldr	r0, [pc, #52]	; (8001380 <MX_GPIO_Init+0xe8>)
 800134c:	f000 fcfa 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Trigger1_Pin|Trigger2_Pin;
 8001350:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2302      	movs	r3, #2
 8001360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4619      	mov	r1, r3
 8001368:	4806      	ldr	r0, [pc, #24]	; (8001384 <MX_GPIO_Init+0xec>)
 800136a:	f000 fceb 	bl	8001d44 <HAL_GPIO_Init>

}
 800136e:	bf00      	nop
 8001370:	3720      	adds	r7, #32
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000
 800137c:	40011000 	.word	0x40011000
 8001380:	40010800 	.word	0x40010800
 8001384:	40010c00 	.word	0x40010c00

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138e:	f000 fbc7 	bl	8001b20 <HAL_Init>

  /* USER CODE BEGIN Init */
  xTaskCreate(drive_task, "Driving Task", 100, ( void * ) 1, 3, NULL);
 8001392:	2300      	movs	r3, #0
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	2303      	movs	r3, #3
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2301      	movs	r3, #1
 800139c:	2264      	movs	r2, #100	; 0x64
 800139e:	492e      	ldr	r1, [pc, #184]	; (8001458 <main+0xd0>)
 80013a0:	482e      	ldr	r0, [pc, #184]	; (800145c <main+0xd4>)
 80013a2:	f003 fde9 	bl	8004f78 <xTaskCreate>
  xTaskCreate(get_data_task, "Bluetooth Task", 100, ( void * ) 1, 2, NULL);
 80013a6:	2300      	movs	r3, #0
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	2302      	movs	r3, #2
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2301      	movs	r3, #1
 80013b0:	2264      	movs	r2, #100	; 0x64
 80013b2:	492b      	ldr	r1, [pc, #172]	; (8001460 <main+0xd8>)
 80013b4:	482b      	ldr	r0, [pc, #172]	; (8001464 <main+0xdc>)
 80013b6:	f003 fddf 	bl	8004f78 <xTaskCreate>
  xTaskCreate(HCSR04_1_Read_task, "HCSR04_1 Task", 100, ( void * ) 1, 2, NULL);
 80013ba:	2300      	movs	r3, #0
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	2302      	movs	r3, #2
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2301      	movs	r3, #1
 80013c4:	2264      	movs	r2, #100	; 0x64
 80013c6:	4928      	ldr	r1, [pc, #160]	; (8001468 <main+0xe0>)
 80013c8:	4828      	ldr	r0, [pc, #160]	; (800146c <main+0xe4>)
 80013ca:	f003 fdd5 	bl	8004f78 <xTaskCreate>
  xTaskCreate(HCSR04_2_Read_task, "HCSR04_2 Task", 100, ( void * ) 1, 2, NULL);
 80013ce:	2300      	movs	r3, #0
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	2302      	movs	r3, #2
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2301      	movs	r3, #1
 80013d8:	2264      	movs	r2, #100	; 0x64
 80013da:	4925      	ldr	r1, [pc, #148]	; (8001470 <main+0xe8>)
 80013dc:	4825      	ldr	r0, [pc, #148]	; (8001474 <main+0xec>)
 80013de:	f003 fdcb 	bl	8004f78 <xTaskCreate>
  xTaskCreate(blind_spot_task, "blind spot Task", 100, ( void * ) 1, 2, NULL);
 80013e2:	2300      	movs	r3, #0
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	2302      	movs	r3, #2
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2301      	movs	r3, #1
 80013ec:	2264      	movs	r2, #100	; 0x64
 80013ee:	4922      	ldr	r1, [pc, #136]	; (8001478 <main+0xf0>)
 80013f0:	4822      	ldr	r0, [pc, #136]	; (800147c <main+0xf4>)
 80013f2:	f003 fdc1 	bl	8004f78 <xTaskCreate>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f6:	f000 f843 	bl	8001480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fa:	f7ff ff4d 	bl	8001298 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013fe:	f000 faf3 	bl	80019e8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001402:	f000 f9bf 	bl	8001784 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001406:	f000 f95f 	bl	80016c8 <MX_TIM2_Init>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800140a:	f002 fe55 	bl	80040b8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800140e:	f7ff ff29 	bl	8001264 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001412:	f002 fe83 	bl	800411c <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TIM2->CCR2 = 5000;
 8001416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800141a:	f241 3288 	movw	r2, #5000	; 0x1388
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
	  for(int i=0; i<30000; i++);
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	e002      	b.n	800142c <main+0xa4>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3301      	adds	r3, #1
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f247 522f 	movw	r2, #29999	; 0x752f
 8001432:	4293      	cmp	r3, r2
 8001434:	ddf7      	ble.n	8001426 <main+0x9e>
	  TIM2->CCR2 = 10000;
 8001436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800143a:	f242 7210 	movw	r2, #10000	; 0x2710
 800143e:	639a      	str	r2, [r3, #56]	; 0x38
	  for(int i=0; i<30000; i++);
 8001440:	2300      	movs	r3, #0
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	e002      	b.n	800144c <main+0xc4>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	f247 522f 	movw	r2, #29999	; 0x752f
 8001452:	4293      	cmp	r3, r2
 8001454:	ddf7      	ble.n	8001446 <main+0xbe>
	  TIM2->CCR2 = 5000;
 8001456:	e7de      	b.n	8001416 <main+0x8e>
 8001458:	08006b04 	.word	0x08006b04
 800145c:	08000d89 	.word	0x08000d89
 8001460:	08006b14 	.word	0x08006b14
 8001464:	08000d69 	.word	0x08000d69
 8001468:	08006b24 	.word	0x08006b24
 800146c:	08000f5d 	.word	0x08000f5d
 8001470:	08006b34 	.word	0x08006b34
 8001474:	08000fa5 	.word	0x08000fa5
 8001478:	08006b44 	.word	0x08006b44
 800147c:	08000fe9 	.word	0x08000fe9

08001480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b090      	sub	sp, #64	; 0x40
 8001484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001486:	f107 0318 	add.w	r3, r7, #24
 800148a:	2228      	movs	r2, #40	; 0x28
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f005 faec 	bl	8006a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a6:	2301      	movs	r3, #1
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014aa:	2310      	movs	r3, #16
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b2:	f107 0318 	add.w	r3, r7, #24
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 fde0 	bl	800207c <HAL_RCC_OscConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014c2:	f000 f82b 	bl	800151c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c6:	230f      	movs	r3, #15
 80014c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 f84e 	bl	8002580 <HAL_RCC_ClockConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014ea:	f000 f817 	bl	800151c <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	3740      	adds	r7, #64	; 0x40
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d101      	bne.n	800150e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800150a:	f000 fb1f 	bl	8001b4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40012c00 	.word	0x40012c00

0800151c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001524:	e7fe      	b.n	8001524 <Error_Handler+0x8>
	...

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_MspInit+0x68>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	4a17      	ldr	r2, [pc, #92]	; (8001590 <HAL_MspInit+0x68>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6193      	str	r3, [r2, #24]
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_MspInit+0x68>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_MspInit+0x68>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a11      	ldr	r2, [pc, #68]	; (8001590 <HAL_MspInit+0x68>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	61d3      	str	r3, [r2, #28]
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_MspInit+0x68>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	210f      	movs	r1, #15
 8001562:	f06f 0001 	mvn.w	r0, #1
 8001566:	f000 fbc2 	bl	8001cee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_MspInit+0x6c>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <HAL_MspInit+0x6c>)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	40010000 	.word	0x40010000

08001598 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08c      	sub	sp, #48	; 0x30
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015ae:	4b2e      	ldr	r3, [pc, #184]	; (8001668 <HAL_InitTick+0xd0>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	4a2d      	ldr	r2, [pc, #180]	; (8001668 <HAL_InitTick+0xd0>)
 80015b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015b8:	6193      	str	r3, [r2, #24]
 80015ba:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <HAL_InitTick+0xd0>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015c6:	f107 020c 	add.w	r2, r7, #12
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f001 f945 	bl	8002860 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80015d6:	f001 f92f 	bl	8002838 <HAL_RCC_GetPCLK2Freq>
 80015da:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015de:	4a23      	ldr	r2, [pc, #140]	; (800166c <HAL_InitTick+0xd4>)
 80015e0:	fba2 2303 	umull	r2, r3, r2, r3
 80015e4:	0c9b      	lsrs	r3, r3, #18
 80015e6:	3b01      	subs	r3, #1
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015ea:	4b21      	ldr	r3, [pc, #132]	; (8001670 <HAL_InitTick+0xd8>)
 80015ec:	4a21      	ldr	r2, [pc, #132]	; (8001674 <HAL_InitTick+0xdc>)
 80015ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <HAL_InitTick+0xd8>)
 80015f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015f6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015f8:	4a1d      	ldr	r2, [pc, #116]	; (8001670 <HAL_InitTick+0xd8>)
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_InitTick+0xd8>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_InitTick+0xd8>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_InitTick+0xd8>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001610:	4817      	ldr	r0, [pc, #92]	; (8001670 <HAL_InitTick+0xd8>)
 8001612:	f001 f973 	bl	80028fc <HAL_TIM_Base_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800161c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001620:	2b00      	cmp	r3, #0
 8001622:	d11b      	bne.n	800165c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001624:	4812      	ldr	r0, [pc, #72]	; (8001670 <HAL_InitTick+0xd8>)
 8001626:	f001 f9b9 	bl	800299c <HAL_TIM_Base_Start_IT>
 800162a:	4603      	mov	r3, r0
 800162c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001630:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001634:	2b00      	cmp	r3, #0
 8001636:	d111      	bne.n	800165c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001638:	2019      	movs	r0, #25
 800163a:	f000 fb74 	bl	8001d26 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d808      	bhi.n	8001656 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001644:	2200      	movs	r2, #0
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	2019      	movs	r0, #25
 800164a:	f000 fb50 	bl	8001cee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <HAL_InitTick+0xe0>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	e002      	b.n	800165c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800165c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001660:	4618      	mov	r0, r3
 8001662:	3730      	adds	r7, #48	; 0x30
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021000 	.word	0x40021000
 800166c:	431bde83 	.word	0x431bde83
 8001670:	200000bc 	.word	0x200000bc
 8001674:	40012c00 	.word	0x40012c00
 8001678:	2000001c 	.word	0x2000001c

0800167c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001680:	e7fe      	b.n	8001680 <NMI_Handler+0x4>

08001682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001686:	e7fe      	b.n	8001686 <HardFault_Handler+0x4>

08001688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <MemManage_Handler+0x4>

0800168e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <BusFault_Handler+0x4>

08001694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <UsageFault_Handler+0x4>

0800169a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
	...

080016a8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <TIM1_UP_IRQHandler+0x10>)
 80016ae:	f001 fb74 	bl	8002d9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200000bc 	.word	0x200000bc

080016bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <MX_TIM2_Init>:
//TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016d8:	463b      	mov	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016e4:	4b26      	ldr	r3, [pc, #152]	; (8001780 <MX_TIM2_Init+0xb8>)
 80016e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80016ec:	4b24      	ldr	r3, [pc, #144]	; (8001780 <MX_TIM2_Init+0xb8>)
 80016ee:	2207      	movs	r2, #7
 80016f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <MX_TIM2_Init+0xb8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <MX_TIM2_Init+0xb8>)
 80016fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001700:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <MX_TIM2_Init+0xb8>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_TIM2_Init+0xb8>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800170c:	481c      	ldr	r0, [pc, #112]	; (8001780 <MX_TIM2_Init+0xb8>)
 800170e:	f001 faf5 	bl	8002cfc <HAL_TIM_IC_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001718:	f7ff ff00 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	4619      	mov	r1, r3
 800172a:	4815      	ldr	r0, [pc, #84]	; (8001780 <MX_TIM2_Init+0xb8>)
 800172c:	f002 fa76 	bl	8003c1c <HAL_TIMEx_MasterConfigSynchronization>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001736:	f7ff fef1 	bl	800151c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800173a:	2300      	movs	r3, #0
 800173c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800173e:	2301      	movs	r3, #1
 8001740:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 8001746:	2304      	movs	r3, #4
 8001748:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800174a:	463b      	mov	r3, r7
 800174c:	2200      	movs	r2, #0
 800174e:	4619      	mov	r1, r3
 8001750:	480b      	ldr	r0, [pc, #44]	; (8001780 <MX_TIM2_Init+0xb8>)
 8001752:	f001 fc2a 	bl	8002faa <HAL_TIM_IC_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800175c:	f7ff fede 	bl	800151c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001760:	463b      	mov	r3, r7
 8001762:	2204      	movs	r2, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <MX_TIM2_Init+0xb8>)
 8001768:	f001 fc1f 	bl	8002faa <HAL_TIM_IC_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001772:	f7ff fed3 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000048 	.word	0x20000048

08001784 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08e      	sub	sp, #56	; 0x38
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	f107 0320 	add.w	r3, r7, #32
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017b4:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <MX_TIM3_Init+0xe4>)
 80017b6:	4a2d      	ldr	r2, [pc, #180]	; (800186c <MX_TIM3_Init+0xe8>)
 80017b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80017ba:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <MX_TIM3_Init+0xe4>)
 80017bc:	2207      	movs	r2, #7
 80017be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b29      	ldr	r3, [pc, #164]	; (8001868 <MX_TIM3_Init+0xe4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80017c6:	4b28      	ldr	r3, [pc, #160]	; (8001868 <MX_TIM3_Init+0xe4>)
 80017c8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80017cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <MX_TIM3_Init+0xe4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	4b24      	ldr	r3, [pc, #144]	; (8001868 <MX_TIM3_Init+0xe4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017da:	4823      	ldr	r0, [pc, #140]	; (8001868 <MX_TIM3_Init+0xe4>)
 80017dc:	f001 f88e 	bl	80028fc <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80017e6:	f7ff fe99 	bl	800151c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017f4:	4619      	mov	r1, r3
 80017f6:	481c      	ldr	r0, [pc, #112]	; (8001868 <MX_TIM3_Init+0xe4>)
 80017f8:	f001 fd36 	bl	8003268 <HAL_TIM_ConfigClockSource>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001802:	f7ff fe8b 	bl	800151c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001806:	4818      	ldr	r0, [pc, #96]	; (8001868 <MX_TIM3_Init+0xe4>)
 8001808:	f001 f91a 	bl	8002a40 <HAL_TIM_PWM_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001812:	f7ff fe83 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800181e:	f107 0320 	add.w	r3, r7, #32
 8001822:	4619      	mov	r1, r3
 8001824:	4810      	ldr	r0, [pc, #64]	; (8001868 <MX_TIM3_Init+0xe4>)
 8001826:	f002 f9f9 	bl	8003c1c <HAL_TIMEx_MasterConfigSynchronization>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001830:	f7ff fe74 	bl	800151c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001834:	2360      	movs	r3, #96	; 0x60
 8001836:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	2200      	movs	r2, #0
 8001848:	4619      	mov	r1, r3
 800184a:	4807      	ldr	r0, [pc, #28]	; (8001868 <MX_TIM3_Init+0xe4>)
 800184c:	f001 fc4a 	bl	80030e4 <HAL_TIM_PWM_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001856:	f7ff fe61 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800185a:	4803      	ldr	r0, [pc, #12]	; (8001868 <MX_TIM3_Init+0xe4>)
 800185c:	f000 f892 	bl	8001984 <HAL_TIM_MspPostInit>

}
 8001860:	bf00      	nop
 8001862:	3738      	adds	r7, #56	; 0x38
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000104 	.word	0x20000104
 800186c:	40000400 	.word	0x40000400

08001870 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800188e:	d14e      	bne.n	800192e <HAL_TIM_IC_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001890:	4b29      	ldr	r3, [pc, #164]	; (8001938 <HAL_TIM_IC_MspInit+0xc8>)
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	4a28      	ldr	r2, [pc, #160]	; (8001938 <HAL_TIM_IC_MspInit+0xc8>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	61d3      	str	r3, [r2, #28]
 800189c:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_TIM_IC_MspInit+0xc8>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	4b23      	ldr	r3, [pc, #140]	; (8001938 <HAL_TIM_IC_MspInit+0xc8>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a22      	ldr	r2, [pc, #136]	; (8001938 <HAL_TIM_IC_MspInit+0xc8>)
 80018ae:	f043 0304 	orr.w	r3, r3, #4
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_TIM_IC_MspInit+0xc8>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <HAL_TIM_IC_MspInit+0xc8>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a1c      	ldr	r2, [pc, #112]	; (8001938 <HAL_TIM_IC_MspInit+0xc8>)
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_TIM_IC_MspInit+0xc8>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Echo1_Pin;
 80018d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Echo1_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <HAL_TIM_IC_MspInit+0xcc>)
 80018ee:	f000 fa29 	bl	8001d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Echo2_Pin;
 80018f2:	2308      	movs	r3, #8
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Echo2_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	480e      	ldr	r0, [pc, #56]	; (8001940 <HAL_TIM_IC_MspInit+0xd0>)
 8001906:	f000 fa1d 	bl	8001d44 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_TIM_IC_MspInit+0xd4>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <HAL_TIM_IC_MspInit+0xd4>)
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	; 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	40010800 	.word	0x40010800
 8001940:	40010c00 	.word	0x40010c00
 8001944:	40010000 	.word	0x40010000

08001948 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_TIM_Base_MspInit+0x34>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d10b      	bne.n	8001972 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_TIM_Base_MspInit+0x38>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	4a08      	ldr	r2, [pc, #32]	; (8001980 <HAL_TIM_Base_MspInit+0x38>)
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	61d3      	str	r3, [r2, #28]
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_TIM_Base_MspInit+0x38>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	40000400 	.word	0x40000400
 8001980:	40021000 	.word	0x40021000

08001984 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a0f      	ldr	r2, [pc, #60]	; (80019dc <HAL_TIM_MspPostInit+0x58>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d117      	bne.n	80019d4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <HAL_TIM_MspPostInit+0x5c>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a0d      	ldr	r2, [pc, #52]	; (80019e0 <HAL_TIM_MspPostInit+0x5c>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_TIM_MspPostInit+0x5c>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019bc:	2340      	movs	r3, #64	; 0x40
 80019be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2302      	movs	r3, #2
 80019c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	4619      	mov	r1, r3
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <HAL_TIM_MspPostInit+0x60>)
 80019d0:	f000 f9b8 	bl	8001d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019d4:	bf00      	nop
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40000400 	.word	0x40000400
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40010800 	.word	0x40010800

080019e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_USART1_UART_Init+0x4c>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <MX_USART1_UART_Init+0x50>)
 80019f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <MX_USART1_UART_Init+0x4c>)
 80019f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_USART1_UART_Init+0x4c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a0e:	220c      	movs	r2, #12
 8001a10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a1e:	4805      	ldr	r0, [pc, #20]	; (8001a34 <MX_USART1_UART_Init+0x4c>)
 8001a20:	f002 f96c 	bl	8003cfc <HAL_UART_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a2a:	f7ff fd77 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000014c 	.word	0x2000014c
 8001a38:	40013800 	.word	0x40013800

08001a3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a1c      	ldr	r2, [pc, #112]	; (8001ac8 <HAL_UART_MspInit+0x8c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d131      	bne.n	8001ac0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_UART_MspInit+0x90>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a1a      	ldr	r2, [pc, #104]	; (8001acc <HAL_UART_MspInit+0x90>)
 8001a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_UART_MspInit+0x90>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_UART_MspInit+0x90>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a14      	ldr	r2, [pc, #80]	; (8001acc <HAL_UART_MspInit+0x90>)
 8001a7a:	f043 0304 	orr.w	r3, r3, #4
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_UART_MspInit+0x90>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <HAL_UART_MspInit+0x94>)
 8001aa2:	f000 f94f 	bl	8001d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <HAL_UART_MspInit+0x94>)
 8001abc:	f000 f942 	bl	8001d44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	3720      	adds	r7, #32
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40013800 	.word	0x40013800
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010800 	.word	0x40010800

08001ad4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ad4:	f7ff fdf2 	bl	80016bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad8:	480b      	ldr	r0, [pc, #44]	; (8001b08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ada:	490c      	ldr	r1, [pc, #48]	; (8001b0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001adc:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae0:	e002      	b.n	8001ae8 <LoopCopyDataInit>

08001ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae6:	3304      	adds	r3, #4

08001ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aec:	d3f9      	bcc.n	8001ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aee:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001af0:	4c09      	ldr	r4, [pc, #36]	; (8001b18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af4:	e001      	b.n	8001afa <LoopFillZerobss>

08001af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af8:	3204      	adds	r2, #4

08001afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001afc:	d3fb      	bcc.n	8001af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001afe:	f004 ffbd 	bl	8006a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b02:	f7ff fc41 	bl	8001388 <main>
  bx lr
 8001b06:	4770      	bx	lr
  ldr r0, =_sdata
 8001b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b0c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001b10:	08006bec 	.word	0x08006bec
  ldr r2, =_sbss
 8001b14:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001b18:	20001ae0 	.word	0x20001ae0

08001b1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <ADC1_2_IRQHandler>
	...

08001b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_Init+0x28>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_Init+0x28>)
 8001b2a:	f043 0310 	orr.w	r3, r3, #16
 8001b2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b30:	2003      	movs	r0, #3
 8001b32:	f000 f8d1 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b36:	200f      	movs	r0, #15
 8001b38:	f7ff fd2e 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3c:	f7ff fcf4 	bl	8001528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40022000 	.word	0x40022000

08001b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_IncTick+0x1c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_IncTick+0x20>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a03      	ldr	r2, [pc, #12]	; (8001b6c <HAL_IncTick+0x20>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	20000020 	.word	0x20000020
 8001b6c:	20000194 	.word	0x20000194

08001b70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b02      	ldr	r3, [pc, #8]	; (8001b80 <HAL_GetTick+0x10>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	20000194 	.word	0x20000194

08001b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4906      	ldr	r1, [pc, #24]	; (8001c1c <__NVIC_EnableIRQ+0x34>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100

08001c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	db0a      	blt.n	8001c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	490c      	ldr	r1, [pc, #48]	; (8001c6c <__NVIC_SetPriority+0x4c>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	0112      	lsls	r2, r2, #4
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c48:	e00a      	b.n	8001c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4908      	ldr	r1, [pc, #32]	; (8001c70 <__NVIC_SetPriority+0x50>)
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	3b04      	subs	r3, #4
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	761a      	strb	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000e100 	.word	0xe000e100
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f1c3 0307 	rsb	r3, r3, #7
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	bf28      	it	cs
 8001c92:	2304      	movcs	r3, #4
 8001c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d902      	bls.n	8001ca4 <NVIC_EncodePriority+0x30>
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3b03      	subs	r3, #3
 8001ca2:	e000      	b.n	8001ca6 <NVIC_EncodePriority+0x32>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	4313      	orrs	r3, r2
         );
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff4f 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d00:	f7ff ff64 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	6978      	ldr	r0, [r7, #20]
 8001d0c:	f7ff ffb2 	bl	8001c74 <NVIC_EncodePriority>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff81 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d1e:	bf00      	nop
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff57 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b08b      	sub	sp, #44	; 0x2c
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d56:	e169      	b.n	800202c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 8158 	bne.w	8002026 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4a9a      	ldr	r2, [pc, #616]	; (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d05e      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d80:	4a98      	ldr	r2, [pc, #608]	; (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d875      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d86:	4a98      	ldr	r2, [pc, #608]	; (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d058      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d8c:	4a96      	ldr	r2, [pc, #600]	; (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d86f      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d92:	4a96      	ldr	r2, [pc, #600]	; (8001fec <HAL_GPIO_Init+0x2a8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d052      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d98:	4a94      	ldr	r2, [pc, #592]	; (8001fec <HAL_GPIO_Init+0x2a8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d869      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d9e:	4a94      	ldr	r2, [pc, #592]	; (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d04c      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001da4:	4a92      	ldr	r2, [pc, #584]	; (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d863      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001daa:	4a92      	ldr	r2, [pc, #584]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d046      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001db0:	4a90      	ldr	r2, [pc, #576]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d85d      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001db6:	2b12      	cmp	r3, #18
 8001db8:	d82a      	bhi.n	8001e10 <HAL_GPIO_Init+0xcc>
 8001dba:	2b12      	cmp	r3, #18
 8001dbc:	d859      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001dbe:	a201      	add	r2, pc, #4	; (adr r2, 8001dc4 <HAL_GPIO_Init+0x80>)
 8001dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e19 	.word	0x08001e19
 8001dcc:	08001e2b 	.word	0x08001e2b
 8001dd0:	08001e6d 	.word	0x08001e6d
 8001dd4:	08001e73 	.word	0x08001e73
 8001dd8:	08001e73 	.word	0x08001e73
 8001ddc:	08001e73 	.word	0x08001e73
 8001de0:	08001e73 	.word	0x08001e73
 8001de4:	08001e73 	.word	0x08001e73
 8001de8:	08001e73 	.word	0x08001e73
 8001dec:	08001e73 	.word	0x08001e73
 8001df0:	08001e73 	.word	0x08001e73
 8001df4:	08001e73 	.word	0x08001e73
 8001df8:	08001e73 	.word	0x08001e73
 8001dfc:	08001e73 	.word	0x08001e73
 8001e00:	08001e73 	.word	0x08001e73
 8001e04:	08001e73 	.word	0x08001e73
 8001e08:	08001e21 	.word	0x08001e21
 8001e0c:	08001e35 	.word	0x08001e35
 8001e10:	4a79      	ldr	r2, [pc, #484]	; (8001ff8 <HAL_GPIO_Init+0x2b4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e16:	e02c      	b.n	8001e72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e029      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	3304      	adds	r3, #4
 8001e26:	623b      	str	r3, [r7, #32]
          break;
 8001e28:	e024      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	3308      	adds	r3, #8
 8001e30:	623b      	str	r3, [r7, #32]
          break;
 8001e32:	e01f      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	330c      	adds	r3, #12
 8001e3a:	623b      	str	r3, [r7, #32]
          break;
 8001e3c:	e01a      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e46:	2304      	movs	r3, #4
 8001e48:	623b      	str	r3, [r7, #32]
          break;
 8001e4a:	e013      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e54:	2308      	movs	r3, #8
 8001e56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	611a      	str	r2, [r3, #16]
          break;
 8001e5e:	e009      	b.n	8001e74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e60:	2308      	movs	r3, #8
 8001e62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	615a      	str	r2, [r3, #20]
          break;
 8001e6a:	e003      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
          break;
 8001e70:	e000      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          break;
 8001e72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2bff      	cmp	r3, #255	; 0xff
 8001e78:	d801      	bhi.n	8001e7e <HAL_GPIO_Init+0x13a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	e001      	b.n	8001e82 <HAL_GPIO_Init+0x13e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3304      	adds	r3, #4
 8001e82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2bff      	cmp	r3, #255	; 0xff
 8001e88:	d802      	bhi.n	8001e90 <HAL_GPIO_Init+0x14c>
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	e002      	b.n	8001e96 <HAL_GPIO_Init+0x152>
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	3b08      	subs	r3, #8
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	210f      	movs	r1, #15
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	6a39      	ldr	r1, [r7, #32]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80b1 	beq.w	8002026 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ec4:	4b4d      	ldr	r3, [pc, #308]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a4c      	ldr	r2, [pc, #304]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001edc:	4a48      	ldr	r2, [pc, #288]	; (8002000 <HAL_GPIO_Init+0x2bc>)
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a40      	ldr	r2, [pc, #256]	; (8002004 <HAL_GPIO_Init+0x2c0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <HAL_GPIO_Init+0x1ec>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3f      	ldr	r2, [pc, #252]	; (8002008 <HAL_GPIO_Init+0x2c4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00d      	beq.n	8001f2c <HAL_GPIO_Init+0x1e8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a3e      	ldr	r2, [pc, #248]	; (800200c <HAL_GPIO_Init+0x2c8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <HAL_GPIO_Init+0x1e4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a3d      	ldr	r2, [pc, #244]	; (8002010 <HAL_GPIO_Init+0x2cc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d101      	bne.n	8001f24 <HAL_GPIO_Init+0x1e0>
 8001f20:	2303      	movs	r3, #3
 8001f22:	e006      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f24:	2304      	movs	r3, #4
 8001f26:	e004      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f30:	2300      	movs	r3, #0
 8001f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f34:	f002 0203 	and.w	r2, r2, #3
 8001f38:	0092      	lsls	r2, r2, #2
 8001f3a:	4093      	lsls	r3, r2
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f42:	492f      	ldr	r1, [pc, #188]	; (8002000 <HAL_GPIO_Init+0x2bc>)
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	492c      	ldr	r1, [pc, #176]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4928      	ldr	r1, [pc, #160]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f84:	4b23      	ldr	r3, [pc, #140]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	4922      	ldr	r1, [pc, #136]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	491e      	ldr	r1, [pc, #120]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4918      	ldr	r1, [pc, #96]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
 8001fb8:	e006      	b.n	8001fc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4914      	ldr	r1, [pc, #80]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d021      	beq.n	8002018 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	490e      	ldr	r1, [pc, #56]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
 8001fe0:	e021      	b.n	8002026 <HAL_GPIO_Init+0x2e2>
 8001fe2:	bf00      	nop
 8001fe4:	10320000 	.word	0x10320000
 8001fe8:	10310000 	.word	0x10310000
 8001fec:	10220000 	.word	0x10220000
 8001ff0:	10210000 	.word	0x10210000
 8001ff4:	10120000 	.word	0x10120000
 8001ff8:	10110000 	.word	0x10110000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010000 	.word	0x40010000
 8002004:	40010800 	.word	0x40010800
 8002008:	40010c00 	.word	0x40010c00
 800200c:	40011000 	.word	0x40011000
 8002010:	40011400 	.word	0x40011400
 8002014:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_GPIO_Init+0x304>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	43db      	mvns	r3, r3
 8002020:	4909      	ldr	r1, [pc, #36]	; (8002048 <HAL_GPIO_Init+0x304>)
 8002022:	4013      	ands	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	3301      	adds	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	f47f ae8e 	bne.w	8001d58 <HAL_GPIO_Init+0x14>
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	372c      	adds	r7, #44	; 0x2c
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	40010400 	.word	0x40010400

0800204c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
 8002058:	4613      	mov	r3, r2
 800205a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800205c:	787b      	ldrb	r3, [r7, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002068:	e003      	b.n	8002072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800206a:	887b      	ldrh	r3, [r7, #2]
 800206c:	041a      	lsls	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	611a      	str	r2, [r3, #16]
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e272      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8087 	beq.w	80021aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800209c:	4b92      	ldr	r3, [pc, #584]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d00c      	beq.n	80020c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020a8:	4b8f      	ldr	r3, [pc, #572]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d112      	bne.n	80020da <HAL_RCC_OscConfig+0x5e>
 80020b4:	4b8c      	ldr	r3, [pc, #560]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c0:	d10b      	bne.n	80020da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c2:	4b89      	ldr	r3, [pc, #548]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d06c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x12c>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d168      	bne.n	80021a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e24c      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x76>
 80020e4:	4b80      	ldr	r3, [pc, #512]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a7f      	ldr	r2, [pc, #508]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	e02e      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x98>
 80020fa:	4b7b      	ldr	r3, [pc, #492]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a7a      	ldr	r2, [pc, #488]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b78      	ldr	r3, [pc, #480]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a77      	ldr	r2, [pc, #476]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e01d      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0xbc>
 800211e:	4b72      	ldr	r3, [pc, #456]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a71      	ldr	r2, [pc, #452]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b6f      	ldr	r3, [pc, #444]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a6e      	ldr	r2, [pc, #440]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e00b      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 8002138:	4b6b      	ldr	r3, [pc, #428]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a6a      	ldr	r2, [pc, #424]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800213e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b68      	ldr	r3, [pc, #416]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a67      	ldr	r2, [pc, #412]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800214a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7ff fd0a 	bl	8001b70 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002160:	f7ff fd06 	bl	8001b70 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	; 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e200      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	4b5d      	ldr	r3, [pc, #372]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0xe4>
 800217e:	e014      	b.n	80021aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7ff fcf6 	bl	8001b70 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002188:	f7ff fcf2 	bl	8001b70 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e1ec      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	4b53      	ldr	r3, [pc, #332]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x10c>
 80021a6:	e000      	b.n	80021aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d063      	beq.n	800227e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021b6:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021c2:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d11c      	bne.n	8002208 <HAL_RCC_OscConfig+0x18c>
 80021ce:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d116      	bne.n	8002208 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021da:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <HAL_RCC_OscConfig+0x176>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e1c0      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f2:	4b3d      	ldr	r3, [pc, #244]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4939      	ldr	r1, [pc, #228]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002206:	e03a      	b.n	800227e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002210:	4b36      	ldr	r3, [pc, #216]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7ff fcab 	bl	8001b70 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221e:	f7ff fca7 	bl	8001b70 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e1a1      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002230:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4927      	ldr	r1, [pc, #156]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
 8002250:	e015      	b.n	800227e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002252:	4b26      	ldr	r3, [pc, #152]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff fc8a 	bl	8001b70 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002260:	f7ff fc86 	bl	8001b70 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e180      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d03a      	beq.n	8002300 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d019      	beq.n	80022c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002292:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <HAL_RCC_OscConfig+0x274>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002298:	f7ff fc6a 	bl	8001b70 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a0:	f7ff fc66 	bl	8001b70 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e160      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022be:	2001      	movs	r0, #1
 80022c0:	f000 fafe 	bl	80028c0 <RCC_Delay>
 80022c4:	e01c      	b.n	8002300 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <HAL_RCC_OscConfig+0x274>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7ff fc50 	bl	8001b70 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d2:	e00f      	b.n	80022f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d4:	f7ff fc4c 	bl	8001b70 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d908      	bls.n	80022f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e146      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	42420000 	.word	0x42420000
 80022f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f4:	4b92      	ldr	r3, [pc, #584]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1e9      	bne.n	80022d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80a6 	beq.w	800245a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002312:	4b8b      	ldr	r3, [pc, #556]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10d      	bne.n	800233a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	4b88      	ldr	r3, [pc, #544]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4a87      	ldr	r2, [pc, #540]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002328:	61d3      	str	r3, [r2, #28]
 800232a:	4b85      	ldr	r3, [pc, #532]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002336:	2301      	movs	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233a:	4b82      	ldr	r3, [pc, #520]	; (8002544 <HAL_RCC_OscConfig+0x4c8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d118      	bne.n	8002378 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002346:	4b7f      	ldr	r3, [pc, #508]	; (8002544 <HAL_RCC_OscConfig+0x4c8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a7e      	ldr	r2, [pc, #504]	; (8002544 <HAL_RCC_OscConfig+0x4c8>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002352:	f7ff fc0d 	bl	8001b70 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235a:	f7ff fc09 	bl	8001b70 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b64      	cmp	r3, #100	; 0x64
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e103      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	4b75      	ldr	r3, [pc, #468]	; (8002544 <HAL_RCC_OscConfig+0x4c8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x312>
 8002380:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4a6e      	ldr	r2, [pc, #440]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6213      	str	r3, [r2, #32]
 800238c:	e02d      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x334>
 8002396:	4b6a      	ldr	r3, [pc, #424]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	4a69      	ldr	r2, [pc, #420]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	6213      	str	r3, [r2, #32]
 80023a2:	4b67      	ldr	r3, [pc, #412]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4a66      	ldr	r2, [pc, #408]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	f023 0304 	bic.w	r3, r3, #4
 80023ac:	6213      	str	r3, [r2, #32]
 80023ae:	e01c      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d10c      	bne.n	80023d2 <HAL_RCC_OscConfig+0x356>
 80023b8:	4b61      	ldr	r3, [pc, #388]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4a60      	ldr	r2, [pc, #384]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	6213      	str	r3, [r2, #32]
 80023c4:	4b5e      	ldr	r3, [pc, #376]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4a5d      	ldr	r2, [pc, #372]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6213      	str	r3, [r2, #32]
 80023d0:	e00b      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 80023d2:	4b5b      	ldr	r3, [pc, #364]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a5a      	ldr	r2, [pc, #360]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6213      	str	r3, [r2, #32]
 80023de:	4b58      	ldr	r3, [pc, #352]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a57      	ldr	r2, [pc, #348]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d015      	beq.n	800241e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7ff fbbd 	bl	8001b70 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7ff fbb9 	bl	8001b70 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	; 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e0b1      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	4b4b      	ldr	r3, [pc, #300]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ee      	beq.n	80023fa <HAL_RCC_OscConfig+0x37e>
 800241c:	e014      	b.n	8002448 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7ff fba7 	bl	8001b70 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7ff fba3 	bl	8001b70 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	; 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e09b      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	4b40      	ldr	r3, [pc, #256]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ee      	bne.n	8002426 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d105      	bne.n	800245a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244e:	4b3c      	ldr	r3, [pc, #240]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a3b      	ldr	r2, [pc, #236]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002458:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 8087 	beq.w	8002572 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002464:	4b36      	ldr	r3, [pc, #216]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b08      	cmp	r3, #8
 800246e:	d061      	beq.n	8002534 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d146      	bne.n	8002506 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002478:	4b33      	ldr	r3, [pc, #204]	; (8002548 <HAL_RCC_OscConfig+0x4cc>)
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7ff fb77 	bl	8001b70 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002486:	f7ff fb73 	bl	8001b70 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e06d      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002498:	4b29      	ldr	r3, [pc, #164]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f0      	bne.n	8002486 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ac:	d108      	bne.n	80024c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	4921      	ldr	r1, [pc, #132]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c0:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a19      	ldr	r1, [r3, #32]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	430b      	orrs	r3, r1
 80024d2:	491b      	ldr	r1, [pc, #108]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d8:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <HAL_RCC_OscConfig+0x4cc>)
 80024da:	2201      	movs	r2, #1
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7ff fb47 	bl	8001b70 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e6:	f7ff fb43 	bl	8001b70 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e03d      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x46a>
 8002504:	e035      	b.n	8002572 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_RCC_OscConfig+0x4cc>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7ff fb30 	bl	8001b70 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002514:	f7ff fb2c 	bl	8001b70 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e026      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x498>
 8002532:	e01e      	b.n	8002572 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d107      	bne.n	800254c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e019      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
 8002540:	40021000 	.word	0x40021000
 8002544:	40007000 	.word	0x40007000
 8002548:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_OscConfig+0x500>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	429a      	cmp	r2, r3
 800255e:	d106      	bne.n	800256e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000

08002580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0d0      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002594:	4b6a      	ldr	r3, [pc, #424]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d910      	bls.n	80025c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b67      	ldr	r3, [pc, #412]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 0207 	bic.w	r2, r3, #7
 80025aa:	4965      	ldr	r1, [pc, #404]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b2:	4b63      	ldr	r3, [pc, #396]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0b8      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d020      	beq.n	8002612 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025dc:	4b59      	ldr	r3, [pc, #356]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a58      	ldr	r2, [pc, #352]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f4:	4b53      	ldr	r3, [pc, #332]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4a52      	ldr	r2, [pc, #328]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002600:	4b50      	ldr	r3, [pc, #320]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	494d      	ldr	r1, [pc, #308]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d040      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d107      	bne.n	8002636 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	4b47      	ldr	r3, [pc, #284]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d115      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e07f      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263e:	4b41      	ldr	r3, [pc, #260]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e073      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e06b      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265e:	4b39      	ldr	r3, [pc, #228]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f023 0203 	bic.w	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4936      	ldr	r1, [pc, #216]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002670:	f7ff fa7e 	bl	8001b70 <HAL_GetTick>
 8002674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	e00a      	b.n	800268e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002678:	f7ff fa7a 	bl	8001b70 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e053      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 020c 	and.w	r2, r3, #12
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	429a      	cmp	r2, r3
 800269e:	d1eb      	bne.n	8002678 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a0:	4b27      	ldr	r3, [pc, #156]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d210      	bcs.n	80026d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b24      	ldr	r3, [pc, #144]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 0207 	bic.w	r2, r3, #7
 80026b6:	4922      	ldr	r1, [pc, #136]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e032      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026dc:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4916      	ldr	r1, [pc, #88]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	490e      	ldr	r1, [pc, #56]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800270e:	f000 f821 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8002712:	4602      	mov	r2, r0
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	490a      	ldr	r1, [pc, #40]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	5ccb      	ldrb	r3, [r1, r3]
 8002722:	fa22 f303 	lsr.w	r3, r2, r3
 8002726:	4a09      	ldr	r2, [pc, #36]	; (800274c <HAL_RCC_ClockConfig+0x1cc>)
 8002728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_RCC_ClockConfig+0x1d0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe ff32 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40022000 	.word	0x40022000
 8002744:	40021000 	.word	0x40021000
 8002748:	08006bb8 	.word	0x08006bb8
 800274c:	20000018 	.word	0x20000018
 8002750:	2000001c 	.word	0x2000001c

08002754 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800276e:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b04      	cmp	r3, #4
 800277c:	d002      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x30>
 800277e:	2b08      	cmp	r3, #8
 8002780:	d003      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0x36>
 8002782:	e027      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002786:	613b      	str	r3, [r7, #16]
      break;
 8002788:	e027      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	0c9b      	lsrs	r3, r3, #18
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	4a17      	ldr	r2, [pc, #92]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002794:	5cd3      	ldrb	r3, [r2, r3]
 8002796:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d010      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	0c5b      	lsrs	r3, r3, #17
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	4a11      	ldr	r2, [pc, #68]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <HAL_RCC_GetSysClockFreq+0x98>)
 80027b6:	fb03 f202 	mul.w	r2, r3, r2
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e004      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a0c      	ldr	r2, [pc, #48]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	613b      	str	r3, [r7, #16]
      break;
 80027d2:	e002      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetSysClockFreq+0x98>)
 80027d6:	613b      	str	r3, [r7, #16]
      break;
 80027d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027da:	693b      	ldr	r3, [r7, #16]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000
 80027ec:	007a1200 	.word	0x007a1200
 80027f0:	08006bd0 	.word	0x08006bd0
 80027f4:	08006be0 	.word	0x08006be0
 80027f8:	003d0900 	.word	0x003d0900

080027fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002800:	4b02      	ldr	r3, [pc, #8]	; (800280c <HAL_RCC_GetHCLKFreq+0x10>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	20000018 	.word	0x20000018

08002810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002814:	f7ff fff2 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002818:	4602      	mov	r2, r0
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	0a1b      	lsrs	r3, r3, #8
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	4903      	ldr	r1, [pc, #12]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002826:	5ccb      	ldrb	r3, [r1, r3]
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	08006bc8 	.word	0x08006bc8

08002838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800283c:	f7ff ffde 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002840:	4602      	mov	r2, r0
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	0adb      	lsrs	r3, r3, #11
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4903      	ldr	r1, [pc, #12]	; (800285c <HAL_RCC_GetPCLK2Freq+0x24>)
 800284e:	5ccb      	ldrb	r3, [r1, r3]
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	08006bc8 	.word	0x08006bc8

08002860 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	220f      	movs	r2, #15
 800286e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_RCC_GetClockConfig+0x58>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0203 	and.w	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800287c:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <HAL_RCC_GetClockConfig+0x58>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_GetClockConfig+0x58>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <HAL_RCC_GetClockConfig+0x58>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	08db      	lsrs	r3, r3, #3
 800289a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_RCC_GetClockConfig+0x5c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0207 	and.w	r2, r3, #7
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40022000 	.word	0x40022000

080028c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <RCC_Delay+0x34>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <RCC_Delay+0x38>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0a5b      	lsrs	r3, r3, #9
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028dc:	bf00      	nop
  }
  while (Delay --);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1e5a      	subs	r2, r3, #1
 80028e2:	60fa      	str	r2, [r7, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f9      	bne.n	80028dc <RCC_Delay+0x1c>
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	20000018 	.word	0x20000018
 80028f8:	10624dd3 	.word	0x10624dd3

080028fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e041      	b.n	8002992 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff f810 	bl	8001948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3304      	adds	r3, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4610      	mov	r0, r2
 800293c:	f000 fdbc 	bl	80034b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d001      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e03a      	b.n	8002a2a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a18      	ldr	r2, [pc, #96]	; (8002a34 <HAL_TIM_Base_Start_IT+0x98>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00e      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x58>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029de:	d009      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x58>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <HAL_TIM_Base_Start_IT+0x9c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d004      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x58>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a13      	ldr	r2, [pc, #76]	; (8002a3c <HAL_TIM_Base_Start_IT+0xa0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d111      	bne.n	8002a18 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b06      	cmp	r3, #6
 8002a04:	d010      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0201 	orr.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a16:	e007      	b.n	8002a28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	40012c00 	.word	0x40012c00
 8002a38:	40000400 	.word	0x40000400
 8002a3c:	40000800 	.word	0x40000800

08002a40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e041      	b.n	8002ad6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f839 	bl	8002ade <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4610      	mov	r0, r2
 8002a80:	f000 fd1a 	bl	80034b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d109      	bne.n	8002b14 <HAL_TIM_PWM_Start+0x24>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	bf14      	ite	ne
 8002b0c:	2301      	movne	r3, #1
 8002b0e:	2300      	moveq	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e022      	b.n	8002b5a <HAL_TIM_PWM_Start+0x6a>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d109      	bne.n	8002b2e <HAL_TIM_PWM_Start+0x3e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	bf14      	ite	ne
 8002b26:	2301      	movne	r3, #1
 8002b28:	2300      	moveq	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	e015      	b.n	8002b5a <HAL_TIM_PWM_Start+0x6a>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d109      	bne.n	8002b48 <HAL_TIM_PWM_Start+0x58>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	bf14      	ite	ne
 8002b40:	2301      	movne	r3, #1
 8002b42:	2300      	moveq	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	e008      	b.n	8002b5a <HAL_TIM_PWM_Start+0x6a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	bf14      	ite	ne
 8002b54:	2301      	movne	r3, #1
 8002b56:	2300      	moveq	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e05e      	b.n	8002c20 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d104      	bne.n	8002b72 <HAL_TIM_PWM_Start+0x82>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b70:	e013      	b.n	8002b9a <HAL_TIM_PWM_Start+0xaa>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d104      	bne.n	8002b82 <HAL_TIM_PWM_Start+0x92>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b80:	e00b      	b.n	8002b9a <HAL_TIM_PWM_Start+0xaa>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d104      	bne.n	8002b92 <HAL_TIM_PWM_Start+0xa2>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b90:	e003      	b.n	8002b9a <HAL_TIM_PWM_Start+0xaa>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2202      	movs	r2, #2
 8002b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	6839      	ldr	r1, [r7, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f001 f815 	bl	8003bd2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a1e      	ldr	r2, [pc, #120]	; (8002c28 <HAL_TIM_PWM_Start+0x138>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d107      	bne.n	8002bc2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a18      	ldr	r2, [pc, #96]	; (8002c28 <HAL_TIM_PWM_Start+0x138>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00e      	beq.n	8002bea <HAL_TIM_PWM_Start+0xfa>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d009      	beq.n	8002bea <HAL_TIM_PWM_Start+0xfa>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <HAL_TIM_PWM_Start+0x13c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_TIM_PWM_Start+0xfa>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a12      	ldr	r2, [pc, #72]	; (8002c30 <HAL_TIM_PWM_Start+0x140>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d111      	bne.n	8002c0e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b06      	cmp	r3, #6
 8002bfa:	d010      	beq.n	8002c1e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0c:	e007      	b.n	8002c1e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40012c00 	.word	0x40012c00
 8002c2c:	40000400 	.word	0x40000400
 8002c30:	40000800 	.word	0x40000800

08002c34 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2200      	movs	r2, #0
 8002c44:	6839      	ldr	r1, [r7, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 ffc3 	bl	8003bd2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a29      	ldr	r2, [pc, #164]	; (8002cf8 <HAL_TIM_PWM_Stop+0xc4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d117      	bne.n	8002c86 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6a1a      	ldr	r2, [r3, #32]
 8002c5c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10f      	bne.n	8002c86 <HAL_TIM_PWM_Stop+0x52>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6a1a      	ldr	r2, [r3, #32]
 8002c6c:	f240 4344 	movw	r3, #1092	; 0x444
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d107      	bne.n	8002c86 <HAL_TIM_PWM_Stop+0x52>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6a1a      	ldr	r2, [r3, #32]
 8002c8c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10f      	bne.n	8002cb6 <HAL_TIM_PWM_Stop+0x82>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6a1a      	ldr	r2, [r3, #32]
 8002c9c:	f240 4344 	movw	r3, #1092	; 0x444
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d107      	bne.n	8002cb6 <HAL_TIM_PWM_Stop+0x82>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0201 	bic.w	r2, r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d104      	bne.n	8002cc6 <HAL_TIM_PWM_Stop+0x92>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc4:	e013      	b.n	8002cee <HAL_TIM_PWM_Stop+0xba>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d104      	bne.n	8002cd6 <HAL_TIM_PWM_Stop+0xa2>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd4:	e00b      	b.n	8002cee <HAL_TIM_PWM_Stop+0xba>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d104      	bne.n	8002ce6 <HAL_TIM_PWM_Stop+0xb2>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce4:	e003      	b.n	8002cee <HAL_TIM_PWM_Stop+0xba>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40012c00 	.word	0x40012c00

08002cfc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e041      	b.n	8002d92 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fe fda4 	bl	8001870 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f000 fbbc 	bl	80034b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d122      	bne.n	8002df6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d11b      	bne.n	8002df6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f06f 0202 	mvn.w	r2, #2
 8002dc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7fe f90f 	bl	8001000 <HAL_TIM_IC_CaptureCallback>
 8002de2:	e005      	b.n	8002df0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fb4b 	bl	8003480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fb51 	bl	8003492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d122      	bne.n	8002e4a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d11b      	bne.n	8002e4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f06f 0204 	mvn.w	r2, #4
 8002e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7fe f8e5 	bl	8001000 <HAL_TIM_IC_CaptureCallback>
 8002e36:	e005      	b.n	8002e44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fb21 	bl	8003480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fb27 	bl	8003492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d122      	bne.n	8002e9e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d11b      	bne.n	8002e9e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f06f 0208 	mvn.w	r2, #8
 8002e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2204      	movs	r2, #4
 8002e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7fe f8bb 	bl	8001000 <HAL_TIM_IC_CaptureCallback>
 8002e8a:	e005      	b.n	8002e98 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 faf7 	bl	8003480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fafd 	bl	8003492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d122      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b10      	cmp	r3, #16
 8002eb8:	d11b      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f06f 0210 	mvn.w	r2, #16
 8002ec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7fe f891 	bl	8001000 <HAL_TIM_IC_CaptureCallback>
 8002ede:	e005      	b.n	8002eec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 facd 	bl	8003480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fad3 	bl	8003492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d10e      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d107      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f06f 0201 	mvn.w	r2, #1
 8002f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7fe faed 	bl	80014f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f28:	2b80      	cmp	r3, #128	; 0x80
 8002f2a:	d10e      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b80      	cmp	r3, #128	; 0x80
 8002f38:	d107      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fed0 	bl	8003cea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f54:	2b40      	cmp	r3, #64	; 0x40
 8002f56:	d10e      	bne.n	8002f76 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d107      	bne.n	8002f76 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fa97 	bl	80034a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d10e      	bne.n	8002fa2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d107      	bne.n	8002fa2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f06f 0220 	mvn.w	r2, #32
 8002f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fe9b 	bl	8003cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e088      	b.n	80030da <HAL_TIM_IC_ConfigChannel+0x130>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d11b      	bne.n	800300e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002fe6:	f000 fc51 	bl	800388c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 020c 	bic.w	r2, r2, #12
 8002ff8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6999      	ldr	r1, [r3, #24]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	619a      	str	r2, [r3, #24]
 800300c:	e060      	b.n	80030d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b04      	cmp	r3, #4
 8003012:	d11c      	bne.n	800304e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003024:	f000 fcba 	bl	800399c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003036:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6999      	ldr	r1, [r3, #24]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	021a      	lsls	r2, r3, #8
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	619a      	str	r2, [r3, #24]
 800304c:	e040      	b.n	80030d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b08      	cmp	r3, #8
 8003052:	d11b      	bne.n	800308c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003064:	f000 fd05 	bl	8003a72 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 020c 	bic.w	r2, r2, #12
 8003076:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69d9      	ldr	r1, [r3, #28]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	61da      	str	r2, [r3, #28]
 800308a:	e021      	b.n	80030d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b0c      	cmp	r3, #12
 8003090:	d11c      	bne.n	80030cc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80030a2:	f000 fd21 	bl	8003ae8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80030b4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69d9      	ldr	r1, [r3, #28]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	021a      	lsls	r2, r3, #8
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	61da      	str	r2, [r3, #28]
 80030ca:	e001      	b.n	80030d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030fe:	2302      	movs	r3, #2
 8003100:	e0ae      	b.n	8003260 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b0c      	cmp	r3, #12
 800310e:	f200 809f 	bhi.w	8003250 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003112:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003118:	0800314d 	.word	0x0800314d
 800311c:	08003251 	.word	0x08003251
 8003120:	08003251 	.word	0x08003251
 8003124:	08003251 	.word	0x08003251
 8003128:	0800318d 	.word	0x0800318d
 800312c:	08003251 	.word	0x08003251
 8003130:	08003251 	.word	0x08003251
 8003134:	08003251 	.word	0x08003251
 8003138:	080031cf 	.word	0x080031cf
 800313c:	08003251 	.word	0x08003251
 8003140:	08003251 	.word	0x08003251
 8003144:	08003251 	.word	0x08003251
 8003148:	0800320f 	.word	0x0800320f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fa12 	bl	800357c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0208 	orr.w	r2, r2, #8
 8003166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0204 	bic.w	r2, r2, #4
 8003176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6999      	ldr	r1, [r3, #24]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	619a      	str	r2, [r3, #24]
      break;
 800318a:	e064      	b.n	8003256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fa58 	bl	8003648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6999      	ldr	r1, [r3, #24]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	021a      	lsls	r2, r3, #8
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	619a      	str	r2, [r3, #24]
      break;
 80031cc:	e043      	b.n	8003256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 faa1 	bl	800371c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0208 	orr.w	r2, r2, #8
 80031e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0204 	bic.w	r2, r2, #4
 80031f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69d9      	ldr	r1, [r3, #28]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	61da      	str	r2, [r3, #28]
      break;
 800320c:	e023      	b.n	8003256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	4618      	mov	r0, r3
 8003216:	f000 faeb 	bl	80037f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69d9      	ldr	r1, [r3, #28]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	021a      	lsls	r2, r3, #8
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	61da      	str	r2, [r3, #28]
      break;
 800324e:	e002      	b.n	8003256 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	75fb      	strb	r3, [r7, #23]
      break;
 8003254:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800325e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_TIM_ConfigClockSource+0x1c>
 8003280:	2302      	movs	r3, #2
 8003282:	e0b4      	b.n	80033ee <HAL_TIM_ConfigClockSource+0x186>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032bc:	d03e      	beq.n	800333c <HAL_TIM_ConfigClockSource+0xd4>
 80032be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c2:	f200 8087 	bhi.w	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ca:	f000 8086 	beq.w	80033da <HAL_TIM_ConfigClockSource+0x172>
 80032ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d2:	d87f      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032d4:	2b70      	cmp	r3, #112	; 0x70
 80032d6:	d01a      	beq.n	800330e <HAL_TIM_ConfigClockSource+0xa6>
 80032d8:	2b70      	cmp	r3, #112	; 0x70
 80032da:	d87b      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032dc:	2b60      	cmp	r3, #96	; 0x60
 80032de:	d050      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0x11a>
 80032e0:	2b60      	cmp	r3, #96	; 0x60
 80032e2:	d877      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032e4:	2b50      	cmp	r3, #80	; 0x50
 80032e6:	d03c      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0xfa>
 80032e8:	2b50      	cmp	r3, #80	; 0x50
 80032ea:	d873      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032ec:	2b40      	cmp	r3, #64	; 0x40
 80032ee:	d058      	beq.n	80033a2 <HAL_TIM_ConfigClockSource+0x13a>
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d86f      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032f4:	2b30      	cmp	r3, #48	; 0x30
 80032f6:	d064      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x15a>
 80032f8:	2b30      	cmp	r3, #48	; 0x30
 80032fa:	d86b      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d060      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003300:	2b20      	cmp	r3, #32
 8003302:	d867      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d05c      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003308:	2b10      	cmp	r3, #16
 800330a:	d05a      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x15a>
 800330c:	e062      	b.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800331e:	f000 fc39 	bl	8003b94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003330:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	609a      	str	r2, [r3, #8]
      break;
 800333a:	e04f      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800334c:	f000 fc22 	bl	8003b94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800335e:	609a      	str	r2, [r3, #8]
      break;
 8003360:	e03c      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800336e:	461a      	mov	r2, r3
 8003370:	f000 fae6 	bl	8003940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2150      	movs	r1, #80	; 0x50
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fbf0 	bl	8003b60 <TIM_ITRx_SetConfig>
      break;
 8003380:	e02c      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800338e:	461a      	mov	r2, r3
 8003390:	f000 fb40 	bl	8003a14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2160      	movs	r1, #96	; 0x60
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fbe0 	bl	8003b60 <TIM_ITRx_SetConfig>
      break;
 80033a0:	e01c      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ae:	461a      	mov	r2, r3
 80033b0:	f000 fac6 	bl	8003940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2140      	movs	r1, #64	; 0x40
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fbd0 	bl	8003b60 <TIM_ITRx_SetConfig>
      break;
 80033c0:	e00c      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4619      	mov	r1, r3
 80033cc:	4610      	mov	r0, r2
 80033ce:	f000 fbc7 	bl	8003b60 <TIM_ITRx_SetConfig>
      break;
 80033d2:	e003      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
      break;
 80033d8:	e000      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b0c      	cmp	r3, #12
 800340a:	d831      	bhi.n	8003470 <HAL_TIM_ReadCapturedValue+0x78>
 800340c:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <HAL_TIM_ReadCapturedValue+0x1c>)
 800340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003412:	bf00      	nop
 8003414:	08003449 	.word	0x08003449
 8003418:	08003471 	.word	0x08003471
 800341c:	08003471 	.word	0x08003471
 8003420:	08003471 	.word	0x08003471
 8003424:	08003453 	.word	0x08003453
 8003428:	08003471 	.word	0x08003471
 800342c:	08003471 	.word	0x08003471
 8003430:	08003471 	.word	0x08003471
 8003434:	0800345d 	.word	0x0800345d
 8003438:	08003471 	.word	0x08003471
 800343c:	08003471 	.word	0x08003471
 8003440:	08003471 	.word	0x08003471
 8003444:	08003467 	.word	0x08003467
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344e:	60fb      	str	r3, [r7, #12]

      break;
 8003450:	e00f      	b.n	8003472 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	60fb      	str	r3, [r7, #12]

      break;
 800345a:	e00a      	b.n	8003472 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	60fb      	str	r3, [r7, #12]

      break;
 8003464:	e005      	b.n	8003472 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	60fb      	str	r3, [r7, #12]

      break;
 800346e:	e000      	b.n	8003472 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003470:	bf00      	nop
  }

  return tmpreg;
 8003472:	68fb      	ldr	r3, [r7, #12]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop

08003480 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr

08003492 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
	...

080034b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a29      	ldr	r2, [pc, #164]	; (8003570 <TIM_Base_SetConfig+0xb8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00b      	beq.n	80034e8 <TIM_Base_SetConfig+0x30>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d6:	d007      	beq.n	80034e8 <TIM_Base_SetConfig+0x30>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a26      	ldr	r2, [pc, #152]	; (8003574 <TIM_Base_SetConfig+0xbc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d003      	beq.n	80034e8 <TIM_Base_SetConfig+0x30>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a25      	ldr	r2, [pc, #148]	; (8003578 <TIM_Base_SetConfig+0xc0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d108      	bne.n	80034fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a1c      	ldr	r2, [pc, #112]	; (8003570 <TIM_Base_SetConfig+0xb8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00b      	beq.n	800351a <TIM_Base_SetConfig+0x62>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003508:	d007      	beq.n	800351a <TIM_Base_SetConfig+0x62>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a19      	ldr	r2, [pc, #100]	; (8003574 <TIM_Base_SetConfig+0xbc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d003      	beq.n	800351a <TIM_Base_SetConfig+0x62>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a18      	ldr	r2, [pc, #96]	; (8003578 <TIM_Base_SetConfig+0xc0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d108      	bne.n	800352c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a07      	ldr	r2, [pc, #28]	; (8003570 <TIM_Base_SetConfig+0xb8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d103      	bne.n	8003560 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	615a      	str	r2, [r3, #20]
}
 8003566:	bf00      	nop
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr
 8003570:	40012c00 	.word	0x40012c00
 8003574:	40000400 	.word	0x40000400
 8003578:	40000800 	.word	0x40000800

0800357c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f023 0201 	bic.w	r2, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0303 	bic.w	r3, r3, #3
 80035b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f023 0302 	bic.w	r3, r3, #2
 80035c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <TIM_OC1_SetConfig+0xc8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d10c      	bne.n	80035f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f023 0308 	bic.w	r3, r3, #8
 80035de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f023 0304 	bic.w	r3, r3, #4
 80035f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a13      	ldr	r2, [pc, #76]	; (8003644 <TIM_OC1_SetConfig+0xc8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d111      	bne.n	800361e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	621a      	str	r2, [r3, #32]
}
 8003638:	bf00      	nop
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40012c00 	.word	0x40012c00

08003648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f023 0210 	bic.w	r2, r3, #16
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f023 0320 	bic.w	r3, r3, #32
 8003692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1d      	ldr	r2, [pc, #116]	; (8003718 <TIM_OC2_SetConfig+0xd0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d10d      	bne.n	80036c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a14      	ldr	r2, [pc, #80]	; (8003718 <TIM_OC2_SetConfig+0xd0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d113      	bne.n	80036f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	621a      	str	r2, [r3, #32]
}
 800370e:	bf00      	nop
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr
 8003718:	40012c00 	.word	0x40012c00

0800371c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0303 	bic.w	r3, r3, #3
 8003752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a1d      	ldr	r2, [pc, #116]	; (80037ec <TIM_OC3_SetConfig+0xd0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d10d      	bne.n	8003796 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a14      	ldr	r2, [pc, #80]	; (80037ec <TIM_OC3_SetConfig+0xd0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d113      	bne.n	80037c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	621a      	str	r2, [r3, #32]
}
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40012c00 	.word	0x40012c00

080037f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800381e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800383a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	031b      	lsls	r3, r3, #12
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a0f      	ldr	r2, [pc, #60]	; (8003888 <TIM_OC4_SetConfig+0x98>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d109      	bne.n	8003864 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003856:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	019b      	lsls	r3, r3, #6
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	40012c00 	.word	0x40012c00

0800388c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f023 0201 	bic.w	r2, r3, #1
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4a1f      	ldr	r2, [pc, #124]	; (8003934 <TIM_TI1_SetConfig+0xa8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00b      	beq.n	80038d2 <TIM_TI1_SetConfig+0x46>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d007      	beq.n	80038d2 <TIM_TI1_SetConfig+0x46>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4a1c      	ldr	r2, [pc, #112]	; (8003938 <TIM_TI1_SetConfig+0xac>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d003      	beq.n	80038d2 <TIM_TI1_SetConfig+0x46>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4a1b      	ldr	r2, [pc, #108]	; (800393c <TIM_TI1_SetConfig+0xb0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <TIM_TI1_SetConfig+0x4a>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <TIM_TI1_SetConfig+0x4c>
 80038d6:	2300      	movs	r3, #0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f023 0303 	bic.w	r3, r3, #3
 80038e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	e003      	b.n	80038f6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	b2db      	uxtb	r3, r3
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f023 030a 	bic.w	r3, r3, #10
 8003910:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f003 030a 	and.w	r3, r3, #10
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	621a      	str	r2, [r3, #32]
}
 800392a:	bf00      	nop
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	40012c00 	.word	0x40012c00
 8003938:	40000400 	.word	0x40000400
 800393c:	40000800 	.word	0x40000800

08003940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	f023 0201 	bic.w	r2, r3, #1
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800396a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f023 030a 	bic.w	r3, r3, #10
 800397c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f023 0210 	bic.w	r2, r3, #16
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	031b      	lsls	r3, r3, #12
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	621a      	str	r2, [r3, #32]
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr

08003a14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f023 0210 	bic.w	r2, r3, #16
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	031b      	lsls	r3, r3, #12
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a50:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	621a      	str	r2, [r3, #32]
}
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr

08003a72 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b087      	sub	sp, #28
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f023 0303 	bic.w	r3, r3, #3
 8003a9e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ac2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	621a      	str	r2, [r3, #32]
}
 8003ade:	bf00      	nop
 8003ae0:	371c      	adds	r7, #28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b14:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b26:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	031b      	lsls	r3, r3, #12
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b3a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	031b      	lsls	r3, r3, #12
 8003b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	621a      	str	r2, [r3, #32]
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr

08003b60 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f043 0307 	orr.w	r3, r3, #7
 8003b82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	609a      	str	r2, [r3, #8]
}
 8003b8a:	bf00      	nop
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	021a      	lsls	r2, r3, #8
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	609a      	str	r2, [r3, #8]
}
 8003bc8:	bf00      	nop
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr

08003bd2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b087      	sub	sp, #28
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	2201      	movs	r2, #1
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	401a      	ands	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1a      	ldr	r2, [r3, #32]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	621a      	str	r2, [r3, #32]
}
 8003c10:	bf00      	nop
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e046      	b.n	8003cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00e      	beq.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c80:	d009      	beq.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a12      	ldr	r2, [pc, #72]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d004      	beq.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a10      	ldr	r2, [pc, #64]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d10c      	bne.n	8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	40012c00 	.word	0x40012c00
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800

08003cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr

08003cea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e042      	b.n	8003d94 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fd fe8a 	bl	8001a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2224      	movs	r2, #36	; 0x24
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f92b 	bl	8003f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08a      	sub	sp, #40	; 0x28
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d17c      	bne.n	8003eb6 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_UART_Receive+0x2c>
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e075      	b.n	8003eb8 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2222      	movs	r2, #34	; 0x22
 8003dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003de0:	f7fd fec6 	bl	8001b70 <HAL_GetTick>
 8003de4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	88fa      	ldrh	r2, [r7, #6]
 8003dea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	88fa      	ldrh	r2, [r7, #6]
 8003df0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfa:	d108      	bne.n	8003e0e <HAL_UART_Receive+0x72>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d104      	bne.n	8003e0e <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	61bb      	str	r3, [r7, #24]
 8003e0c:	e003      	b.n	8003e16 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003e16:	e043      	b.n	8003ea0 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2120      	movs	r1, #32
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f84c 	bl	8003ec0 <UART_WaitOnFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e042      	b.n	8003eb8 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10c      	bne.n	8003e52 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	e01f      	b.n	8003e92 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5a:	d007      	beq.n	8003e6c <HAL_UART_Receive+0xd0>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <HAL_UART_Receive+0xde>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d106      	bne.n	8003e7a <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	701a      	strb	r2, [r3, #0]
 8003e78:	e008      	b.n	8003e8c <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1b6      	bne.n	8003e18 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e000      	b.n	8003eb8 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
  }
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3720      	adds	r7, #32
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b090      	sub	sp, #64	; 0x40
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed0:	e050      	b.n	8003f74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d04c      	beq.n	8003f74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ee0:	f7fd fe46 	bl	8001b70 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d241      	bcs.n	8003f74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	330c      	adds	r3, #12
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f10:	637a      	str	r2, [r7, #52]	; 0x34
 8003f12:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e5      	bne.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3314      	adds	r3, #20
 8003f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	613b      	str	r3, [r7, #16]
   return(result);
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f023 0301 	bic.w	r3, r3, #1
 8003f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3314      	adds	r3, #20
 8003f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f44:	623a      	str	r2, [r7, #32]
 8003f46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	69f9      	ldr	r1, [r7, #28]
 8003f4a:	6a3a      	ldr	r2, [r7, #32]
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e5      	bne.n	8003f24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e00f      	b.n	8003f94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d09f      	beq.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3740      	adds	r7, #64	; 0x40
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003fd6:	f023 030c 	bic.w	r3, r3, #12
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a2c      	ldr	r2, [pc, #176]	; (80040b0 <UART_SetConfig+0x114>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d103      	bne.n	800400c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004004:	f7fe fc18 	bl	8002838 <HAL_RCC_GetPCLK2Freq>
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	e002      	b.n	8004012 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800400c:	f7fe fc00 	bl	8002810 <HAL_RCC_GetPCLK1Freq>
 8004010:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	009a      	lsls	r2, r3, #2
 800401c:	441a      	add	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	fbb2 f3f3 	udiv	r3, r2, r3
 8004028:	4a22      	ldr	r2, [pc, #136]	; (80040b4 <UART_SetConfig+0x118>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	0119      	lsls	r1, r3, #4
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	009a      	lsls	r2, r3, #2
 800403c:	441a      	add	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	fbb2 f2f3 	udiv	r2, r2, r3
 8004048:	4b1a      	ldr	r3, [pc, #104]	; (80040b4 <UART_SetConfig+0x118>)
 800404a:	fba3 0302 	umull	r0, r3, r3, r2
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	2064      	movs	r0, #100	; 0x64
 8004052:	fb00 f303 	mul.w	r3, r0, r3
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	3332      	adds	r3, #50	; 0x32
 800405c:	4a15      	ldr	r2, [pc, #84]	; (80040b4 <UART_SetConfig+0x118>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004068:	4419      	add	r1, r3
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4613      	mov	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	009a      	lsls	r2, r3, #2
 8004074:	441a      	add	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <UART_SetConfig+0x118>)
 8004082:	fba3 0302 	umull	r0, r3, r3, r2
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	2064      	movs	r0, #100	; 0x64
 800408a:	fb00 f303 	mul.w	r3, r0, r3
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	3332      	adds	r3, #50	; 0x32
 8004094:	4a07      	ldr	r2, [pc, #28]	; (80040b4 <UART_SetConfig+0x118>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	f003 020f 	and.w	r2, r3, #15
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	440a      	add	r2, r1
 80040a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40013800 	.word	0x40013800
 80040b4:	51eb851f 	.word	0x51eb851f

080040b8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040be:	f3ef 8305 	mrs	r3, IPSR
 80040c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80040c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10f      	bne.n	80040ea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ca:	f3ef 8310 	mrs	r3, PRIMASK
 80040ce:	607b      	str	r3, [r7, #4]
  return(result);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d109      	bne.n	80040ea <osKernelInitialize+0x32>
 80040d6:	4b10      	ldr	r3, [pc, #64]	; (8004118 <osKernelInitialize+0x60>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d109      	bne.n	80040f2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040de:	f3ef 8311 	mrs	r3, BASEPRI
 80040e2:	603b      	str	r3, [r7, #0]
  return(result);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80040ea:	f06f 0305 	mvn.w	r3, #5
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e00c      	b.n	800410c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <osKernelInitialize+0x60>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d105      	bne.n	8004106 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80040fa:	4b07      	ldr	r3, [pc, #28]	; (8004118 <osKernelInitialize+0x60>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	e002      	b.n	800410c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004106:	f04f 33ff 	mov.w	r3, #4294967295
 800410a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800410c:	68fb      	ldr	r3, [r7, #12]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr
 8004118:	20000198 	.word	0x20000198

0800411c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004122:	f3ef 8305 	mrs	r3, IPSR
 8004126:	60bb      	str	r3, [r7, #8]
  return(result);
 8004128:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10f      	bne.n	800414e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800412e:	f3ef 8310 	mrs	r3, PRIMASK
 8004132:	607b      	str	r3, [r7, #4]
  return(result);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d109      	bne.n	800414e <osKernelStart+0x32>
 800413a:	4b11      	ldr	r3, [pc, #68]	; (8004180 <osKernelStart+0x64>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d109      	bne.n	8004156 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004142:	f3ef 8311 	mrs	r3, BASEPRI
 8004146:	603b      	str	r3, [r7, #0]
  return(result);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <osKernelStart+0x3a>
    stat = osErrorISR;
 800414e:	f06f 0305 	mvn.w	r3, #5
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e00e      	b.n	8004174 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004156:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <osKernelStart+0x64>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d107      	bne.n	800416e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <osKernelStart+0x64>)
 8004160:	2202      	movs	r2, #2
 8004162:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004164:	f001 f878 	bl	8005258 <vTaskStartScheduler>
      stat = osOK;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	e002      	b.n	8004174 <osKernelStart+0x58>
    } else {
      stat = osError;
 800416e:	f04f 33ff 	mov.w	r3, #4294967295
 8004172:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004174:	68fb      	ldr	r3, [r7, #12]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000198 	.word	0x20000198

08004184 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004184:	b580      	push	{r7, lr}
 8004186:	b092      	sub	sp, #72	; 0x48
 8004188:	af04      	add	r7, sp, #16
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004194:	f3ef 8305 	mrs	r3, IPSR
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800419c:	2b00      	cmp	r3, #0
 800419e:	f040 8094 	bne.w	80042ca <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a2:	f3ef 8310 	mrs	r3, PRIMASK
 80041a6:	623b      	str	r3, [r7, #32]
  return(result);
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f040 808d 	bne.w	80042ca <osThreadNew+0x146>
 80041b0:	4b48      	ldr	r3, [pc, #288]	; (80042d4 <osThreadNew+0x150>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d106      	bne.n	80041c6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041b8:	f3ef 8311 	mrs	r3, BASEPRI
 80041bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f040 8082 	bne.w	80042ca <osThreadNew+0x146>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d07e      	beq.n	80042ca <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80041d0:	2318      	movs	r3, #24
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80041d4:	2300      	movs	r3, #0
 80041d6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80041d8:	f107 031b 	add.w	r3, r7, #27
 80041dc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80041de:	f04f 33ff 	mov.w	r3, #4294967295
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d045      	beq.n	8004276 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <osThreadNew+0x74>
        name = attr->name;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <osThreadNew+0x9a>
 800420c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420e:	2b38      	cmp	r3, #56	; 0x38
 8004210:	d805      	bhi.n	800421e <osThreadNew+0x9a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <osThreadNew+0x9e>
        return (NULL);
 800421e:	2300      	movs	r3, #0
 8004220:	e054      	b.n	80042cc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	089b      	lsrs	r3, r3, #2
 8004230:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00e      	beq.n	8004258 <osThreadNew+0xd4>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2b5b      	cmp	r3, #91	; 0x5b
 8004240:	d90a      	bls.n	8004258 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004246:	2b00      	cmp	r3, #0
 8004248:	d006      	beq.n	8004258 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <osThreadNew+0xd4>
        mem = 1;
 8004252:	2301      	movs	r3, #1
 8004254:	62bb      	str	r3, [r7, #40]	; 0x28
 8004256:	e010      	b.n	800427a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10c      	bne.n	800427a <osThreadNew+0xf6>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d108      	bne.n	800427a <osThreadNew+0xf6>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d104      	bne.n	800427a <osThreadNew+0xf6>
          mem = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	62bb      	str	r3, [r7, #40]	; 0x28
 8004274:	e001      	b.n	800427a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	2b01      	cmp	r3, #1
 800427e:	d110      	bne.n	80042a2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004288:	9202      	str	r2, [sp, #8]
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004294:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fe12 	bl	8004ec0 <xTaskCreateStatic>
 800429c:	4603      	mov	r3, r0
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	e013      	b.n	80042ca <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d110      	bne.n	80042ca <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	f107 0314 	add.w	r3, r7, #20
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 fe5c 	bl	8004f78 <xTaskCreate>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d001      	beq.n	80042ca <osThreadNew+0x146>
          hTask = NULL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042ca:	697b      	ldr	r3, [r7, #20]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3738      	adds	r7, #56	; 0x38
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	20000198 	.word	0x20000198

080042d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042e0:	f3ef 8305 	mrs	r3, IPSR
 80042e4:	613b      	str	r3, [r7, #16]
  return(result);
 80042e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10f      	bne.n	800430c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ec:	f3ef 8310 	mrs	r3, PRIMASK
 80042f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d109      	bne.n	800430c <osDelay+0x34>
 80042f8:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <osDelay+0x58>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d109      	bne.n	8004314 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004300:	f3ef 8311 	mrs	r3, BASEPRI
 8004304:	60bb      	str	r3, [r7, #8]
  return(result);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <osDelay+0x3c>
    stat = osErrorISR;
 800430c:	f06f 0305 	mvn.w	r3, #5
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	e007      	b.n	8004324 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <osDelay+0x4c>
      vTaskDelay(ticks);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 ff66 	bl	80051f0 <vTaskDelay>
    }
  }

  return (stat);
 8004324:	697b      	ldr	r3, [r7, #20]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000198 	.word	0x20000198

08004334 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4a06      	ldr	r2, [pc, #24]	; (800435c <vApplicationGetIdleTaskMemory+0x28>)
 8004344:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4a05      	ldr	r2, [pc, #20]	; (8004360 <vApplicationGetIdleTaskMemory+0x2c>)
 800434a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2280      	movs	r2, #128	; 0x80
 8004350:	601a      	str	r2, [r3, #0]
}
 8004352:	bf00      	nop
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr
 800435c:	2000019c 	.word	0x2000019c
 8004360:	200001f8 	.word	0x200001f8

08004364 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4a07      	ldr	r2, [pc, #28]	; (8004390 <vApplicationGetTimerTaskMemory+0x2c>)
 8004374:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	4a06      	ldr	r2, [pc, #24]	; (8004394 <vApplicationGetTimerTaskMemory+0x30>)
 800437a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004382:	601a      	str	r2, [r3, #0]
}
 8004384:	bf00      	nop
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	200003f8 	.word	0x200003f8
 8004394:	20000454 	.word	0x20000454

08004398 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f103 0208 	add.w	r2, r3, #8
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f04f 32ff 	mov.w	r2, #4294967295
 80043b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f103 0208 	add.w	r2, r3, #8
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f103 0208 	add.w	r2, r3, #8
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr

080043d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr

080043ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	601a      	str	r2, [r3, #0]
}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444a:	d103      	bne.n	8004454 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	e00c      	b.n	800446e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3308      	adds	r3, #8
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	e002      	b.n	8004462 <vListInsert+0x2e>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	429a      	cmp	r2, r3
 800446c:	d2f6      	bcs.n	800445c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	601a      	str	r2, [r3, #0]
}
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6892      	ldr	r2, [r2, #8]
 80044ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6852      	ldr	r2, [r2, #4]
 80044c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d103      	bne.n	80044d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	1e5a      	subs	r2, r3, #1
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr
	...

080044f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10a      	bne.n	8004522 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800451e:	bf00      	nop
 8004520:	e7fe      	b.n	8004520 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004522:	f001 ffcb 	bl	80064bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452e:	68f9      	ldr	r1, [r7, #12]
 8004530:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004532:	fb01 f303 	mul.w	r3, r1, r3
 8004536:	441a      	add	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	3b01      	subs	r3, #1
 8004554:	68f9      	ldr	r1, [r7, #12]
 8004556:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	441a      	add	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	22ff      	movs	r2, #255	; 0xff
 8004566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	22ff      	movs	r2, #255	; 0xff
 800456e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d114      	bne.n	80045a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01a      	beq.n	80045b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3310      	adds	r3, #16
 8004584:	4618      	mov	r0, r3
 8004586:	f001 f8f1 	bl	800576c <xTaskRemoveFromEventList>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d012      	beq.n	80045b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004590:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <xQueueGenericReset+0xcc>)
 8004592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	e009      	b.n	80045b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3310      	adds	r3, #16
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff fef6 	bl	8004398 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	3324      	adds	r3, #36	; 0x24
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff fef1 	bl	8004398 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045b6:	f001 ffb1 	bl	800651c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045ba:	2301      	movs	r3, #1
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	e000ed04 	.word	0xe000ed04

080045c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08e      	sub	sp, #56	; 0x38
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10a      	bne.n	80045f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10a      	bne.n	800460e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
}
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <xQueueGenericCreateStatic+0x52>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <xQueueGenericCreateStatic+0x56>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <xQueueGenericCreateStatic+0x58>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	623b      	str	r3, [r7, #32]
}
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d102      	bne.n	8004646 <xQueueGenericCreateStatic+0x7e>
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <xQueueGenericCreateStatic+0x82>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <xQueueGenericCreateStatic+0x84>
 800464a:	2300      	movs	r3, #0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	61fb      	str	r3, [r7, #28]
}
 8004662:	bf00      	nop
 8004664:	e7fe      	b.n	8004664 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004666:	2350      	movs	r3, #80	; 0x50
 8004668:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b50      	cmp	r3, #80	; 0x50
 800466e:	d00a      	beq.n	8004686 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	61bb      	str	r3, [r7, #24]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800468a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00d      	beq.n	80046ac <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004698:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800469c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f805 	bl	80046b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80046ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3730      	adds	r7, #48	; 0x30
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	607a      	str	r2, [r7, #4]
 80046c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d103      	bne.n	80046d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	e002      	b.n	80046d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046e4:	2101      	movs	r1, #1
 80046e6:	69b8      	ldr	r0, [r7, #24]
 80046e8:	f7ff ff06 	bl	80044f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	78fa      	ldrb	r2, [r7, #3]
 80046f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046f4:	bf00      	nop
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08e      	sub	sp, #56	; 0x38
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800470a:	2300      	movs	r3, #0
 800470c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10a      	bne.n	800472e <xQueueGenericSend+0x32>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d103      	bne.n	800473c <xQueueGenericSend+0x40>
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <xQueueGenericSend+0x44>
 800473c:	2301      	movs	r3, #1
 800473e:	e000      	b.n	8004742 <xQueueGenericSend+0x46>
 8004740:	2300      	movs	r3, #0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10a      	bne.n	800475c <xQueueGenericSend+0x60>
	__asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004758:	bf00      	nop
 800475a:	e7fe      	b.n	800475a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d103      	bne.n	800476a <xQueueGenericSend+0x6e>
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <xQueueGenericSend+0x72>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <xQueueGenericSend+0x74>
 800476e:	2300      	movs	r3, #0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10a      	bne.n	800478a <xQueueGenericSend+0x8e>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	623b      	str	r3, [r7, #32]
}
 8004786:	bf00      	nop
 8004788:	e7fe      	b.n	8004788 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800478a:	f001 f9b1 	bl	8005af0 <xTaskGetSchedulerState>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d102      	bne.n	800479a <xQueueGenericSend+0x9e>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <xQueueGenericSend+0xa2>
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <xQueueGenericSend+0xa4>
 800479e:	2300      	movs	r3, #0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10a      	bne.n	80047ba <xQueueGenericSend+0xbe>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	61fb      	str	r3, [r7, #28]
}
 80047b6:	bf00      	nop
 80047b8:	e7fe      	b.n	80047b8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047ba:	f001 fe7f 	bl	80064bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d302      	bcc.n	80047d0 <xQueueGenericSend+0xd4>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d129      	bne.n	8004824 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047d6:	f000 fa07 	bl	8004be8 <prvCopyDataToQueue>
 80047da:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d010      	beq.n	8004806 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	3324      	adds	r3, #36	; 0x24
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 ffbf 	bl	800576c <xTaskRemoveFromEventList>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d013      	beq.n	800481c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047f4:	4b3f      	ldr	r3, [pc, #252]	; (80048f4 <xQueueGenericSend+0x1f8>)
 80047f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	e00a      	b.n	800481c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800480c:	4b39      	ldr	r3, [pc, #228]	; (80048f4 <xQueueGenericSend+0x1f8>)
 800480e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800481c:	f001 fe7e 	bl	800651c <vPortExitCritical>
				return pdPASS;
 8004820:	2301      	movs	r3, #1
 8004822:	e063      	b.n	80048ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d103      	bne.n	8004832 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800482a:	f001 fe77 	bl	800651c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800482e:	2300      	movs	r3, #0
 8004830:	e05c      	b.n	80048ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004834:	2b00      	cmp	r3, #0
 8004836:	d106      	bne.n	8004846 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004838:	f107 0314 	add.w	r3, r7, #20
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fff9 	bl	8005834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004842:	2301      	movs	r3, #1
 8004844:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004846:	f001 fe69 	bl	800651c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800484a:	f000 fd6b 	bl	8005324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800484e:	f001 fe35 	bl	80064bc <vPortEnterCritical>
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004858:	b25b      	sxtb	r3, r3
 800485a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485e:	d103      	bne.n	8004868 <xQueueGenericSend+0x16c>
 8004860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800486e:	b25b      	sxtb	r3, r3
 8004870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004874:	d103      	bne.n	800487e <xQueueGenericSend+0x182>
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800487e:	f001 fe4d 	bl	800651c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004882:	1d3a      	adds	r2, r7, #4
 8004884:	f107 0314 	add.w	r3, r7, #20
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f000 ffe8 	bl	8005860 <xTaskCheckForTimeOut>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d124      	bne.n	80048e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004896:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004898:	f000 fa9e 	bl	8004dd8 <prvIsQueueFull>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d018      	beq.n	80048d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	3310      	adds	r3, #16
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	4611      	mov	r1, r2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 ff0e 	bl	80056cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048b2:	f000 fa29 	bl	8004d08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048b6:	f000 fd43 	bl	8005340 <xTaskResumeAll>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f47f af7c 	bne.w	80047ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80048c2:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <xQueueGenericSend+0x1f8>)
 80048c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	e772      	b.n	80047ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048d6:	f000 fa17 	bl	8004d08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048da:	f000 fd31 	bl	8005340 <xTaskResumeAll>
 80048de:	e76c      	b.n	80047ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048e2:	f000 fa11 	bl	8004d08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048e6:	f000 fd2b 	bl	8005340 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048ea:	2300      	movs	r3, #0
		}
	}
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3738      	adds	r7, #56	; 0x38
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	e000ed04 	.word	0xe000ed04

080048f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08e      	sub	sp, #56	; 0x38
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10a      	bne.n	8004926 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d103      	bne.n	8004934 <xQueueGenericSendFromISR+0x3c>
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <xQueueGenericSendFromISR+0x40>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <xQueueGenericSendFromISR+0x42>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10a      	bne.n	8004954 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	623b      	str	r3, [r7, #32]
}
 8004950:	bf00      	nop
 8004952:	e7fe      	b.n	8004952 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b02      	cmp	r3, #2
 8004958:	d103      	bne.n	8004962 <xQueueGenericSendFromISR+0x6a>
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <xQueueGenericSendFromISR+0x6e>
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <xQueueGenericSendFromISR+0x70>
 8004966:	2300      	movs	r3, #0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	61fb      	str	r3, [r7, #28]
}
 800497e:	bf00      	nop
 8004980:	e7fe      	b.n	8004980 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004982:	f001 fe5d 	bl	8006640 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004986:	f3ef 8211 	mrs	r2, BASEPRI
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	61ba      	str	r2, [r7, #24]
 800499c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800499e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d302      	bcc.n	80049b4 <xQueueGenericSendFromISR+0xbc>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d12c      	bne.n	8004a0e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049c4:	f000 f910 	bl	8004be8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049c8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d112      	bne.n	80049f8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d016      	beq.n	8004a08 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	3324      	adds	r3, #36	; 0x24
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fec4 	bl	800576c <xTaskRemoveFromEventList>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00e      	beq.n	8004a08 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00b      	beq.n	8004a08 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e007      	b.n	8004a08 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049fc:	3301      	adds	r3, #1
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	b25a      	sxtb	r2, r3
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004a0c:	e001      	b.n	8004a12 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	637b      	str	r3, [r7, #52]	; 0x34
 8004a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a14:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3738      	adds	r7, #56	; 0x38
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08c      	sub	sp, #48	; 0x30
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a34:	2300      	movs	r3, #0
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <xQueueReceive+0x30>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	623b      	str	r3, [r7, #32]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d103      	bne.n	8004a66 <xQueueReceive+0x3e>
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <xQueueReceive+0x42>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <xQueueReceive+0x44>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <xQueueReceive+0x5e>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	61fb      	str	r3, [r7, #28]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a86:	f001 f833 	bl	8005af0 <xTaskGetSchedulerState>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <xQueueReceive+0x6e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <xQueueReceive+0x72>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <xQueueReceive+0x74>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <xQueueReceive+0x8e>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	61bb      	str	r3, [r7, #24]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ab6:	f001 fd01 	bl	80064bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d01f      	beq.n	8004b06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aca:	f000 f8f7 	bl	8004cbc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	1e5a      	subs	r2, r3, #1
 8004ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00f      	beq.n	8004afe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	3310      	adds	r3, #16
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fe42 	bl	800576c <xTaskRemoveFromEventList>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d007      	beq.n	8004afe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004aee:	4b3d      	ldr	r3, [pc, #244]	; (8004be4 <xQueueReceive+0x1bc>)
 8004af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004afe:	f001 fd0d 	bl	800651c <vPortExitCritical>
				return pdPASS;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e069      	b.n	8004bda <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d103      	bne.n	8004b14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b0c:	f001 fd06 	bl	800651c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b10:	2300      	movs	r3, #0
 8004b12:	e062      	b.n	8004bda <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b1a:	f107 0310 	add.w	r3, r7, #16
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fe88 	bl	8005834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b24:	2301      	movs	r3, #1
 8004b26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b28:	f001 fcf8 	bl	800651c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b2c:	f000 fbfa 	bl	8005324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b30:	f001 fcc4 	bl	80064bc <vPortEnterCritical>
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b3a:	b25b      	sxtb	r3, r3
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b40:	d103      	bne.n	8004b4a <xQueueReceive+0x122>
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b50:	b25b      	sxtb	r3, r3
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d103      	bne.n	8004b60 <xQueueReceive+0x138>
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b60:	f001 fcdc 	bl	800651c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b64:	1d3a      	adds	r2, r7, #4
 8004b66:	f107 0310 	add.w	r3, r7, #16
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fe77 	bl	8005860 <xTaskCheckForTimeOut>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d123      	bne.n	8004bc0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b7a:	f000 f917 	bl	8004dac <prvIsQueueEmpty>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d017      	beq.n	8004bb4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	3324      	adds	r3, #36	; 0x24
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fd9d 	bl	80056cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b94:	f000 f8b8 	bl	8004d08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b98:	f000 fbd2 	bl	8005340 <xTaskResumeAll>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d189      	bne.n	8004ab6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ba2:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <xQueueReceive+0x1bc>)
 8004ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	e780      	b.n	8004ab6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bb6:	f000 f8a7 	bl	8004d08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bba:	f000 fbc1 	bl	8005340 <xTaskResumeAll>
 8004bbe:	e77a      	b.n	8004ab6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bc2:	f000 f8a1 	bl	8004d08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bc6:	f000 fbbb 	bl	8005340 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bcc:	f000 f8ee 	bl	8004dac <prvIsQueueEmpty>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f43f af6f 	beq.w	8004ab6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3730      	adds	r7, #48	; 0x30
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	e000ed04 	.word	0xe000ed04

08004be8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10d      	bne.n	8004c22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d14d      	bne.n	8004caa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 ff8a 	bl	8005b2c <xTaskPriorityDisinherit>
 8004c18:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	605a      	str	r2, [r3, #4]
 8004c20:	e043      	b.n	8004caa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d119      	bne.n	8004c5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6898      	ldr	r0, [r3, #8]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c30:	461a      	mov	r2, r3
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	f001 ff46 	bl	8006ac4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	441a      	add	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d32b      	bcc.n	8004caa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	609a      	str	r2, [r3, #8]
 8004c5a:	e026      	b.n	8004caa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	68d8      	ldr	r0, [r3, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	461a      	mov	r2, r3
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	f001 ff2c 	bl	8006ac4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	425b      	negs	r3, r3
 8004c76:	441a      	add	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d207      	bcs.n	8004c98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	425b      	negs	r3, r3
 8004c92:	441a      	add	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d105      	bne.n	8004caa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004cb2:	697b      	ldr	r3, [r7, #20]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d018      	beq.n	8004d00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	441a      	add	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d303      	bcc.n	8004cf0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68d9      	ldr	r1, [r3, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6838      	ldr	r0, [r7, #0]
 8004cfc:	f001 fee2 	bl	8006ac4 <memcpy>
	}
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d10:	f001 fbd4 	bl	80064bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d1c:	e011      	b.n	8004d42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d012      	beq.n	8004d4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3324      	adds	r3, #36	; 0x24
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fd1e 	bl	800576c <xTaskRemoveFromEventList>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d36:	f000 fdf5 	bl	8005924 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	dce9      	bgt.n	8004d1e <prvUnlockQueue+0x16>
 8004d4a:	e000      	b.n	8004d4e <prvUnlockQueue+0x46>
					break;
 8004d4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	22ff      	movs	r2, #255	; 0xff
 8004d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d56:	f001 fbe1 	bl	800651c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d5a:	f001 fbaf 	bl	80064bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d66:	e011      	b.n	8004d8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d012      	beq.n	8004d96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3310      	adds	r3, #16
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fcf9 	bl	800576c <xTaskRemoveFromEventList>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d80:	f000 fdd0 	bl	8005924 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d84:	7bbb      	ldrb	r3, [r7, #14]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	dce9      	bgt.n	8004d68 <prvUnlockQueue+0x60>
 8004d94:	e000      	b.n	8004d98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	22ff      	movs	r2, #255	; 0xff
 8004d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004da0:	f001 fbbc 	bl	800651c <vPortExitCritical>
}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004db4:	f001 fb82 	bl	80064bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d102      	bne.n	8004dc6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	e001      	b.n	8004dca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dca:	f001 fba7 	bl	800651c <vPortExitCritical>

	return xReturn;
 8004dce:	68fb      	ldr	r3, [r7, #12]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004de0:	f001 fb6c 	bl	80064bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d102      	bne.n	8004df6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004df0:	2301      	movs	r3, #1
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e001      	b.n	8004dfa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dfa:	f001 fb8f 	bl	800651c <vPortExitCritical>

	return xReturn;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	e014      	b.n	8004e42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e18:	4a0e      	ldr	r2, [pc, #56]	; (8004e54 <vQueueAddToRegistry+0x4c>)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10b      	bne.n	8004e3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e24:	490b      	ldr	r1, [pc, #44]	; (8004e54 <vQueueAddToRegistry+0x4c>)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e2e:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <vQueueAddToRegistry+0x4c>)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	4413      	add	r3, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e3a:	e006      	b.n	8004e4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b07      	cmp	r3, #7
 8004e46:	d9e7      	bls.n	8004e18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e48:	bf00      	nop
 8004e4a:	bf00      	nop
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc80      	pop	{r7}
 8004e52:	4770      	bx	lr
 8004e54:	20000854 	.word	0x20000854

08004e58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e68:	f001 fb28 	bl	80064bc <vPortEnterCritical>
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e72:	b25b      	sxtb	r3, r3
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e78:	d103      	bne.n	8004e82 <vQueueWaitForMessageRestricted+0x2a>
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e88:	b25b      	sxtb	r3, r3
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8e:	d103      	bne.n	8004e98 <vQueueWaitForMessageRestricted+0x40>
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e98:	f001 fb40 	bl	800651c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d106      	bne.n	8004eb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	3324      	adds	r3, #36	; 0x24
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fc31 	bl	8005714 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004eb2:	6978      	ldr	r0, [r7, #20]
 8004eb4:	f7ff ff28 	bl	8004d08 <prvUnlockQueue>
	}
 8004eb8:	bf00      	nop
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08e      	sub	sp, #56	; 0x38
 8004ec4:	af04      	add	r7, sp, #16
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10a      	bne.n	8004eea <xTaskCreateStatic+0x2a>
	__asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	623b      	str	r3, [r7, #32]
}
 8004ee6:	bf00      	nop
 8004ee8:	e7fe      	b.n	8004ee8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10a      	bne.n	8004f06 <xTaskCreateStatic+0x46>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	61fb      	str	r3, [r7, #28]
}
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f06:	235c      	movs	r3, #92	; 0x5c
 8004f08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	2b5c      	cmp	r3, #92	; 0x5c
 8004f0e:	d00a      	beq.n	8004f26 <xTaskCreateStatic+0x66>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	61bb      	str	r3, [r7, #24]
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01e      	beq.n	8004f6a <xTaskCreateStatic+0xaa>
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d01b      	beq.n	8004f6a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f3a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f44:	2300      	movs	r3, #0
 8004f46:	9303      	str	r3, [sp, #12]
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	9302      	str	r3, [sp, #8]
 8004f4c:	f107 0314 	add.w	r3, r7, #20
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f850 	bl	8005002 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f64:	f000 f8d4 	bl	8005110 <prvAddNewTaskToReadyList>
 8004f68:	e001      	b.n	8004f6e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f6e:	697b      	ldr	r3, [r7, #20]
	}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3728      	adds	r7, #40	; 0x28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08c      	sub	sp, #48	; 0x30
 8004f7c:	af04      	add	r7, sp, #16
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	4613      	mov	r3, r2
 8004f86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f001 fb95 	bl	80066bc <pvPortMalloc>
 8004f92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00e      	beq.n	8004fb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004f9a:	205c      	movs	r0, #92	; 0x5c
 8004f9c:	f001 fb8e 	bl	80066bc <pvPortMalloc>
 8004fa0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30
 8004fae:	e005      	b.n	8004fbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fb0:	6978      	ldr	r0, [r7, #20]
 8004fb2:	f001 fc47 	bl	8006844 <vPortFree>
 8004fb6:	e001      	b.n	8004fbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d017      	beq.n	8004ff2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fca:	88fa      	ldrh	r2, [r7, #6]
 8004fcc:	2300      	movs	r3, #0
 8004fce:	9303      	str	r3, [sp, #12]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	9302      	str	r3, [sp, #8]
 8004fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f80e 	bl	8005002 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fe6:	69f8      	ldr	r0, [r7, #28]
 8004fe8:	f000 f892 	bl	8005110 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004fec:	2301      	movs	r3, #1
 8004fee:	61bb      	str	r3, [r7, #24]
 8004ff0:	e002      	b.n	8004ff8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ff8:	69bb      	ldr	r3, [r7, #24]
	}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b088      	sub	sp, #32
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
 800500e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	461a      	mov	r2, r3
 800501a:	21a5      	movs	r1, #165	; 0xa5
 800501c:	f001 fd26 	bl	8006a6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800502a:	3b01      	subs	r3, #1
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	f023 0307 	bic.w	r3, r3, #7
 8005038:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <prvInitialiseNewTask+0x58>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	617b      	str	r3, [r7, #20]
}
 8005056:	bf00      	nop
 8005058:	e7fe      	b.n	8005058 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800505a:	2300      	movs	r3, #0
 800505c:	61fb      	str	r3, [r7, #28]
 800505e:	e012      	b.n	8005086 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	4413      	add	r3, r2
 8005066:	7819      	ldrb	r1, [r3, #0]
 8005068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	4413      	add	r3, r2
 800506e:	3334      	adds	r3, #52	; 0x34
 8005070:	460a      	mov	r2, r1
 8005072:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	4413      	add	r3, r2
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d006      	beq.n	800508e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	3301      	adds	r3, #1
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	2b0f      	cmp	r3, #15
 800508a:	d9e9      	bls.n	8005060 <prvInitialiseNewTask+0x5e>
 800508c:	e000      	b.n	8005090 <prvInitialiseNewTask+0x8e>
		{
			break;
 800508e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	2b37      	cmp	r3, #55	; 0x37
 800509c:	d901      	bls.n	80050a2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800509e:	2337      	movs	r3, #55	; 0x37
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	2200      	movs	r2, #0
 80050b2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	3304      	adds	r3, #4
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff f98c 	bl	80043d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	3318      	adds	r3, #24
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff f987 	bl	80043d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	2200      	movs	r2, #0
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	68f9      	ldr	r1, [r7, #12]
 80050f0:	69b8      	ldr	r0, [r7, #24]
 80050f2:	f001 f8ef 	bl	80062d4 <pxPortInitialiseStack>
 80050f6:	4602      	mov	r2, r0
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005106:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005108:	bf00      	nop
 800510a:	3720      	adds	r7, #32
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005118:	f001 f9d0 	bl	80064bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800511c:	4b2d      	ldr	r3, [pc, #180]	; (80051d4 <prvAddNewTaskToReadyList+0xc4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3301      	adds	r3, #1
 8005122:	4a2c      	ldr	r2, [pc, #176]	; (80051d4 <prvAddNewTaskToReadyList+0xc4>)
 8005124:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005126:	4b2c      	ldr	r3, [pc, #176]	; (80051d8 <prvAddNewTaskToReadyList+0xc8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d109      	bne.n	8005142 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800512e:	4a2a      	ldr	r2, [pc, #168]	; (80051d8 <prvAddNewTaskToReadyList+0xc8>)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005134:	4b27      	ldr	r3, [pc, #156]	; (80051d4 <prvAddNewTaskToReadyList+0xc4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d110      	bne.n	800515e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800513c:	f000 fc16 	bl	800596c <prvInitialiseTaskLists>
 8005140:	e00d      	b.n	800515e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005142:	4b26      	ldr	r3, [pc, #152]	; (80051dc <prvAddNewTaskToReadyList+0xcc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d109      	bne.n	800515e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800514a:	4b23      	ldr	r3, [pc, #140]	; (80051d8 <prvAddNewTaskToReadyList+0xc8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	429a      	cmp	r2, r3
 8005156:	d802      	bhi.n	800515e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005158:	4a1f      	ldr	r2, [pc, #124]	; (80051d8 <prvAddNewTaskToReadyList+0xc8>)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800515e:	4b20      	ldr	r3, [pc, #128]	; (80051e0 <prvAddNewTaskToReadyList+0xd0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3301      	adds	r3, #1
 8005164:	4a1e      	ldr	r2, [pc, #120]	; (80051e0 <prvAddNewTaskToReadyList+0xd0>)
 8005166:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005168:	4b1d      	ldr	r3, [pc, #116]	; (80051e0 <prvAddNewTaskToReadyList+0xd0>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005174:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <prvAddNewTaskToReadyList+0xd4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d903      	bls.n	8005184 <prvAddNewTaskToReadyList+0x74>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	4a18      	ldr	r2, [pc, #96]	; (80051e4 <prvAddNewTaskToReadyList+0xd4>)
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005188:	4613      	mov	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <prvAddNewTaskToReadyList+0xd8>)
 8005192:	441a      	add	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3304      	adds	r3, #4
 8005198:	4619      	mov	r1, r3
 800519a:	4610      	mov	r0, r2
 800519c:	f7ff f927 	bl	80043ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051a0:	f001 f9bc 	bl	800651c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051a4:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <prvAddNewTaskToReadyList+0xcc>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00e      	beq.n	80051ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051ac:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <prvAddNewTaskToReadyList+0xc8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d207      	bcs.n	80051ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051ba:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <prvAddNewTaskToReadyList+0xdc>)
 80051bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051ca:	bf00      	nop
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000d68 	.word	0x20000d68
 80051d8:	20000894 	.word	0x20000894
 80051dc:	20000d74 	.word	0x20000d74
 80051e0:	20000d84 	.word	0x20000d84
 80051e4:	20000d70 	.word	0x20000d70
 80051e8:	20000898 	.word	0x20000898
 80051ec:	e000ed04 	.word	0xe000ed04

080051f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d017      	beq.n	8005232 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005202:	4b13      	ldr	r3, [pc, #76]	; (8005250 <vTaskDelay+0x60>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <vTaskDelay+0x30>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	60bb      	str	r3, [r7, #8]
}
 800521c:	bf00      	nop
 800521e:	e7fe      	b.n	800521e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005220:	f000 f880 	bl	8005324 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005224:	2100      	movs	r1, #0
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fcee 	bl	8005c08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800522c:	f000 f888 	bl	8005340 <xTaskResumeAll>
 8005230:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d107      	bne.n	8005248 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005238:	4b06      	ldr	r3, [pc, #24]	; (8005254 <vTaskDelay+0x64>)
 800523a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005248:	bf00      	nop
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	20000d90 	.word	0x20000d90
 8005254:	e000ed04 	.word	0xe000ed04

08005258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005266:	463a      	mov	r2, r7
 8005268:	1d39      	adds	r1, r7, #4
 800526a:	f107 0308 	add.w	r3, r7, #8
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff f860 	bl	8004334 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	9202      	str	r2, [sp, #8]
 800527c:	9301      	str	r3, [sp, #4]
 800527e:	2300      	movs	r3, #0
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	2300      	movs	r3, #0
 8005284:	460a      	mov	r2, r1
 8005286:	4921      	ldr	r1, [pc, #132]	; (800530c <vTaskStartScheduler+0xb4>)
 8005288:	4821      	ldr	r0, [pc, #132]	; (8005310 <vTaskStartScheduler+0xb8>)
 800528a:	f7ff fe19 	bl	8004ec0 <xTaskCreateStatic>
 800528e:	4603      	mov	r3, r0
 8005290:	4a20      	ldr	r2, [pc, #128]	; (8005314 <vTaskStartScheduler+0xbc>)
 8005292:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005294:	4b1f      	ldr	r3, [pc, #124]	; (8005314 <vTaskStartScheduler+0xbc>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800529c:	2301      	movs	r3, #1
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	e001      	b.n	80052a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d102      	bne.n	80052b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80052ac:	f000 fd00 	bl	8005cb0 <xTimerCreateTimerTask>
 80052b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d116      	bne.n	80052e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	613b      	str	r3, [r7, #16]
}
 80052ca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052cc:	4b12      	ldr	r3, [pc, #72]	; (8005318 <vTaskStartScheduler+0xc0>)
 80052ce:	f04f 32ff 	mov.w	r2, #4294967295
 80052d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052d4:	4b11      	ldr	r3, [pc, #68]	; (800531c <vTaskStartScheduler+0xc4>)
 80052d6:	2201      	movs	r2, #1
 80052d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80052da:	4b11      	ldr	r3, [pc, #68]	; (8005320 <vTaskStartScheduler+0xc8>)
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052e0:	f001 f87a 	bl	80063d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052e4:	e00e      	b.n	8005304 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d10a      	bne.n	8005304 <vTaskStartScheduler+0xac>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	60fb      	str	r3, [r7, #12]
}
 8005300:	bf00      	nop
 8005302:	e7fe      	b.n	8005302 <vTaskStartScheduler+0xaa>
}
 8005304:	bf00      	nop
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	08006b54 	.word	0x08006b54
 8005310:	0800593d 	.word	0x0800593d
 8005314:	20000d8c 	.word	0x20000d8c
 8005318:	20000d88 	.word	0x20000d88
 800531c:	20000d74 	.word	0x20000d74
 8005320:	20000d6c 	.word	0x20000d6c

08005324 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005328:	4b04      	ldr	r3, [pc, #16]	; (800533c <vTaskSuspendAll+0x18>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3301      	adds	r3, #1
 800532e:	4a03      	ldr	r2, [pc, #12]	; (800533c <vTaskSuspendAll+0x18>)
 8005330:	6013      	str	r3, [r2, #0]
}
 8005332:	bf00      	nop
 8005334:	46bd      	mov	sp, r7
 8005336:	bc80      	pop	{r7}
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	20000d90 	.word	0x20000d90

08005340 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800534a:	2300      	movs	r3, #0
 800534c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800534e:	4b42      	ldr	r3, [pc, #264]	; (8005458 <xTaskResumeAll+0x118>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <xTaskResumeAll+0x2c>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	603b      	str	r3, [r7, #0]
}
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800536c:	f001 f8a6 	bl	80064bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005370:	4b39      	ldr	r3, [pc, #228]	; (8005458 <xTaskResumeAll+0x118>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3b01      	subs	r3, #1
 8005376:	4a38      	ldr	r2, [pc, #224]	; (8005458 <xTaskResumeAll+0x118>)
 8005378:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800537a:	4b37      	ldr	r3, [pc, #220]	; (8005458 <xTaskResumeAll+0x118>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d162      	bne.n	8005448 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005382:	4b36      	ldr	r3, [pc, #216]	; (800545c <xTaskResumeAll+0x11c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d05e      	beq.n	8005448 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800538a:	e02f      	b.n	80053ec <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800538c:	4b34      	ldr	r3, [pc, #208]	; (8005460 <xTaskResumeAll+0x120>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3318      	adds	r3, #24
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff f883 	bl	80044a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3304      	adds	r3, #4
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff f87e 	bl	80044a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ac:	4b2d      	ldr	r3, [pc, #180]	; (8005464 <xTaskResumeAll+0x124>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d903      	bls.n	80053bc <xTaskResumeAll+0x7c>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	4a2a      	ldr	r2, [pc, #168]	; (8005464 <xTaskResumeAll+0x124>)
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4a27      	ldr	r2, [pc, #156]	; (8005468 <xTaskResumeAll+0x128>)
 80053ca:	441a      	add	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f7ff f80b 	bl	80043ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053dc:	4b23      	ldr	r3, [pc, #140]	; (800546c <xTaskResumeAll+0x12c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d302      	bcc.n	80053ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80053e6:	4b22      	ldr	r3, [pc, #136]	; (8005470 <xTaskResumeAll+0x130>)
 80053e8:	2201      	movs	r2, #1
 80053ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053ec:	4b1c      	ldr	r3, [pc, #112]	; (8005460 <xTaskResumeAll+0x120>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1cb      	bne.n	800538c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053fa:	f000 fb55 	bl	8005aa8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80053fe:	4b1d      	ldr	r3, [pc, #116]	; (8005474 <xTaskResumeAll+0x134>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d010      	beq.n	800542c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800540a:	f000 f845 	bl	8005498 <xTaskIncrementTick>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005414:	4b16      	ldr	r3, [pc, #88]	; (8005470 <xTaskResumeAll+0x130>)
 8005416:	2201      	movs	r2, #1
 8005418:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3b01      	subs	r3, #1
 800541e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f1      	bne.n	800540a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005426:	4b13      	ldr	r3, [pc, #76]	; (8005474 <xTaskResumeAll+0x134>)
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800542c:	4b10      	ldr	r3, [pc, #64]	; (8005470 <xTaskResumeAll+0x130>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d009      	beq.n	8005448 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005434:	2301      	movs	r3, #1
 8005436:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005438:	4b0f      	ldr	r3, [pc, #60]	; (8005478 <xTaskResumeAll+0x138>)
 800543a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005448:	f001 f868 	bl	800651c <vPortExitCritical>

	return xAlreadyYielded;
 800544c:	68bb      	ldr	r3, [r7, #8]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000d90 	.word	0x20000d90
 800545c:	20000d68 	.word	0x20000d68
 8005460:	20000d28 	.word	0x20000d28
 8005464:	20000d70 	.word	0x20000d70
 8005468:	20000898 	.word	0x20000898
 800546c:	20000894 	.word	0x20000894
 8005470:	20000d7c 	.word	0x20000d7c
 8005474:	20000d78 	.word	0x20000d78
 8005478:	e000ed04 	.word	0xe000ed04

0800547c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005482:	4b04      	ldr	r3, [pc, #16]	; (8005494 <xTaskGetTickCount+0x18>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005488:	687b      	ldr	r3, [r7, #4]
}
 800548a:	4618      	mov	r0, r3
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr
 8005494:	20000d6c 	.word	0x20000d6c

08005498 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054a2:	4b51      	ldr	r3, [pc, #324]	; (80055e8 <xTaskIncrementTick+0x150>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f040 808e 	bne.w	80055c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054ac:	4b4f      	ldr	r3, [pc, #316]	; (80055ec <xTaskIncrementTick+0x154>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3301      	adds	r3, #1
 80054b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054b4:	4a4d      	ldr	r2, [pc, #308]	; (80055ec <xTaskIncrementTick+0x154>)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d120      	bne.n	8005502 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80054c0:	4b4b      	ldr	r3, [pc, #300]	; (80055f0 <xTaskIncrementTick+0x158>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	603b      	str	r3, [r7, #0]
}
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <xTaskIncrementTick+0x46>
 80054e0:	4b43      	ldr	r3, [pc, #268]	; (80055f0 <xTaskIncrementTick+0x158>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	4b43      	ldr	r3, [pc, #268]	; (80055f4 <xTaskIncrementTick+0x15c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a41      	ldr	r2, [pc, #260]	; (80055f0 <xTaskIncrementTick+0x158>)
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	4a41      	ldr	r2, [pc, #260]	; (80055f4 <xTaskIncrementTick+0x15c>)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	4b40      	ldr	r3, [pc, #256]	; (80055f8 <xTaskIncrementTick+0x160>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3301      	adds	r3, #1
 80054fa:	4a3f      	ldr	r2, [pc, #252]	; (80055f8 <xTaskIncrementTick+0x160>)
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	f000 fad3 	bl	8005aa8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005502:	4b3e      	ldr	r3, [pc, #248]	; (80055fc <xTaskIncrementTick+0x164>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	429a      	cmp	r2, r3
 800550a:	d34e      	bcc.n	80055aa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800550c:	4b38      	ldr	r3, [pc, #224]	; (80055f0 <xTaskIncrementTick+0x158>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <xTaskIncrementTick+0x82>
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <xTaskIncrementTick+0x84>
 800551a:	2300      	movs	r3, #0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005520:	4b36      	ldr	r3, [pc, #216]	; (80055fc <xTaskIncrementTick+0x164>)
 8005522:	f04f 32ff 	mov.w	r2, #4294967295
 8005526:	601a      	str	r2, [r3, #0]
					break;
 8005528:	e03f      	b.n	80055aa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800552a:	4b31      	ldr	r3, [pc, #196]	; (80055f0 <xTaskIncrementTick+0x158>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	429a      	cmp	r2, r3
 8005540:	d203      	bcs.n	800554a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005542:	4a2e      	ldr	r2, [pc, #184]	; (80055fc <xTaskIncrementTick+0x164>)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6013      	str	r3, [r2, #0]
						break;
 8005548:	e02f      	b.n	80055aa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	3304      	adds	r3, #4
 800554e:	4618      	mov	r0, r3
 8005550:	f7fe ffa8 	bl	80044a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	3318      	adds	r3, #24
 8005560:	4618      	mov	r0, r3
 8005562:	f7fe ff9f 	bl	80044a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556a:	4b25      	ldr	r3, [pc, #148]	; (8005600 <xTaskIncrementTick+0x168>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d903      	bls.n	800557a <xTaskIncrementTick+0xe2>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	4a22      	ldr	r2, [pc, #136]	; (8005600 <xTaskIncrementTick+0x168>)
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557e:	4613      	mov	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4a1f      	ldr	r2, [pc, #124]	; (8005604 <xTaskIncrementTick+0x16c>)
 8005588:	441a      	add	r2, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	3304      	adds	r3, #4
 800558e:	4619      	mov	r1, r3
 8005590:	4610      	mov	r0, r2
 8005592:	f7fe ff2c 	bl	80043ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559a:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <xTaskIncrementTick+0x170>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d3b3      	bcc.n	800550c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80055a4:	2301      	movs	r3, #1
 80055a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055a8:	e7b0      	b.n	800550c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055aa:	4b17      	ldr	r3, [pc, #92]	; (8005608 <xTaskIncrementTick+0x170>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	4914      	ldr	r1, [pc, #80]	; (8005604 <xTaskIncrementTick+0x16c>)
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	440b      	add	r3, r1
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d907      	bls.n	80055d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80055c2:	2301      	movs	r3, #1
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e004      	b.n	80055d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80055c8:	4b10      	ldr	r3, [pc, #64]	; (800560c <xTaskIncrementTick+0x174>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3301      	adds	r3, #1
 80055ce:	4a0f      	ldr	r2, [pc, #60]	; (800560c <xTaskIncrementTick+0x174>)
 80055d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80055d2:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <xTaskIncrementTick+0x178>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80055da:	2301      	movs	r3, #1
 80055dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80055de:	697b      	ldr	r3, [r7, #20]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20000d90 	.word	0x20000d90
 80055ec:	20000d6c 	.word	0x20000d6c
 80055f0:	20000d20 	.word	0x20000d20
 80055f4:	20000d24 	.word	0x20000d24
 80055f8:	20000d80 	.word	0x20000d80
 80055fc:	20000d88 	.word	0x20000d88
 8005600:	20000d70 	.word	0x20000d70
 8005604:	20000898 	.word	0x20000898
 8005608:	20000894 	.word	0x20000894
 800560c:	20000d78 	.word	0x20000d78
 8005610:	20000d7c 	.word	0x20000d7c

08005614 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800561a:	4b27      	ldr	r3, [pc, #156]	; (80056b8 <vTaskSwitchContext+0xa4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005622:	4b26      	ldr	r3, [pc, #152]	; (80056bc <vTaskSwitchContext+0xa8>)
 8005624:	2201      	movs	r2, #1
 8005626:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005628:	e041      	b.n	80056ae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800562a:	4b24      	ldr	r3, [pc, #144]	; (80056bc <vTaskSwitchContext+0xa8>)
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005630:	4b23      	ldr	r3, [pc, #140]	; (80056c0 <vTaskSwitchContext+0xac>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	e010      	b.n	800565a <vTaskSwitchContext+0x46>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10a      	bne.n	8005654 <vTaskSwitchContext+0x40>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	607b      	str	r3, [r7, #4]
}
 8005650:	bf00      	nop
 8005652:	e7fe      	b.n	8005652 <vTaskSwitchContext+0x3e>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3b01      	subs	r3, #1
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	491a      	ldr	r1, [pc, #104]	; (80056c4 <vTaskSwitchContext+0xb0>)
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0e4      	beq.n	8005638 <vTaskSwitchContext+0x24>
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4a12      	ldr	r2, [pc, #72]	; (80056c4 <vTaskSwitchContext+0xb0>)
 800567a:	4413      	add	r3, r2
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	605a      	str	r2, [r3, #4]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	3308      	adds	r3, #8
 8005690:	429a      	cmp	r2, r3
 8005692:	d104      	bne.n	800569e <vTaskSwitchContext+0x8a>
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	605a      	str	r2, [r3, #4]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4a08      	ldr	r2, [pc, #32]	; (80056c8 <vTaskSwitchContext+0xb4>)
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	4a05      	ldr	r2, [pc, #20]	; (80056c0 <vTaskSwitchContext+0xac>)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6013      	str	r3, [r2, #0]
}
 80056ae:	bf00      	nop
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr
 80056b8:	20000d90 	.word	0x20000d90
 80056bc:	20000d7c 	.word	0x20000d7c
 80056c0:	20000d70 	.word	0x20000d70
 80056c4:	20000898 	.word	0x20000898
 80056c8:	20000894 	.word	0x20000894

080056cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10a      	bne.n	80056f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	60fb      	str	r3, [r7, #12]
}
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056f2:	4b07      	ldr	r3, [pc, #28]	; (8005710 <vTaskPlaceOnEventList+0x44>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3318      	adds	r3, #24
 80056f8:	4619      	mov	r1, r3
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7fe fe9a 	bl	8004434 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005700:	2101      	movs	r1, #1
 8005702:	6838      	ldr	r0, [r7, #0]
 8005704:	f000 fa80 	bl	8005c08 <prvAddCurrentTaskToDelayedList>
}
 8005708:	bf00      	nop
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20000894 	.word	0x20000894

08005714 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10a      	bne.n	800573c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	617b      	str	r3, [r7, #20]
}
 8005738:	bf00      	nop
 800573a:	e7fe      	b.n	800573a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800573c:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <vTaskPlaceOnEventListRestricted+0x54>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3318      	adds	r3, #24
 8005742:	4619      	mov	r1, r3
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f7fe fe52 	bl	80043ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005750:	f04f 33ff 	mov.w	r3, #4294967295
 8005754:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	68b8      	ldr	r0, [r7, #8]
 800575a:	f000 fa55 	bl	8005c08 <prvAddCurrentTaskToDelayedList>
	}
 800575e:	bf00      	nop
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000894 	.word	0x20000894

0800576c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10a      	bne.n	8005798 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	60fb      	str	r3, [r7, #12]
}
 8005794:	bf00      	nop
 8005796:	e7fe      	b.n	8005796 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	3318      	adds	r3, #24
 800579c:	4618      	mov	r0, r3
 800579e:	f7fe fe81 	bl	80044a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057a2:	4b1e      	ldr	r3, [pc, #120]	; (800581c <xTaskRemoveFromEventList+0xb0>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d11d      	bne.n	80057e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	3304      	adds	r3, #4
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fe fe78 	bl	80044a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b8:	4b19      	ldr	r3, [pc, #100]	; (8005820 <xTaskRemoveFromEventList+0xb4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d903      	bls.n	80057c8 <xTaskRemoveFromEventList+0x5c>
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	4a16      	ldr	r2, [pc, #88]	; (8005820 <xTaskRemoveFromEventList+0xb4>)
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4a13      	ldr	r2, [pc, #76]	; (8005824 <xTaskRemoveFromEventList+0xb8>)
 80057d6:	441a      	add	r2, r3
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	3304      	adds	r3, #4
 80057dc:	4619      	mov	r1, r3
 80057de:	4610      	mov	r0, r2
 80057e0:	f7fe fe05 	bl	80043ee <vListInsertEnd>
 80057e4:	e005      	b.n	80057f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	3318      	adds	r3, #24
 80057ea:	4619      	mov	r1, r3
 80057ec:	480e      	ldr	r0, [pc, #56]	; (8005828 <xTaskRemoveFromEventList+0xbc>)
 80057ee:	f7fe fdfe 	bl	80043ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f6:	4b0d      	ldr	r3, [pc, #52]	; (800582c <xTaskRemoveFromEventList+0xc0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d905      	bls.n	800580c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005800:	2301      	movs	r3, #1
 8005802:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <xTaskRemoveFromEventList+0xc4>)
 8005806:	2201      	movs	r2, #1
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	e001      	b.n	8005810 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005810:	697b      	ldr	r3, [r7, #20]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000d90 	.word	0x20000d90
 8005820:	20000d70 	.word	0x20000d70
 8005824:	20000898 	.word	0x20000898
 8005828:	20000d28 	.word	0x20000d28
 800582c:	20000894 	.word	0x20000894
 8005830:	20000d7c 	.word	0x20000d7c

08005834 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800583c:	4b06      	ldr	r3, [pc, #24]	; (8005858 <vTaskInternalSetTimeOutState+0x24>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005844:	4b05      	ldr	r3, [pc, #20]	; (800585c <vTaskInternalSetTimeOutState+0x28>)
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	605a      	str	r2, [r3, #4]
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	20000d80 	.word	0x20000d80
 800585c:	20000d6c 	.word	0x20000d6c

08005860 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b088      	sub	sp, #32
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	613b      	str	r3, [r7, #16]
}
 8005882:	bf00      	nop
 8005884:	e7fe      	b.n	8005884 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	60fb      	str	r3, [r7, #12]
}
 800589e:	bf00      	nop
 80058a0:	e7fe      	b.n	80058a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80058a2:	f000 fe0b 	bl	80064bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058a6:	4b1d      	ldr	r3, [pc, #116]	; (800591c <xTaskCheckForTimeOut+0xbc>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058be:	d102      	bne.n	80058c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61fb      	str	r3, [r7, #28]
 80058c4:	e023      	b.n	800590e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4b15      	ldr	r3, [pc, #84]	; (8005920 <xTaskCheckForTimeOut+0xc0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d007      	beq.n	80058e2 <xTaskCheckForTimeOut+0x82>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d302      	bcc.n	80058e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058dc:	2301      	movs	r3, #1
 80058de:	61fb      	str	r3, [r7, #28]
 80058e0:	e015      	b.n	800590e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d20b      	bcs.n	8005904 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	1ad2      	subs	r2, r2, r3
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff ff9b 	bl	8005834 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058fe:	2300      	movs	r3, #0
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	e004      	b.n	800590e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2200      	movs	r2, #0
 8005908:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800590a:	2301      	movs	r3, #1
 800590c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800590e:	f000 fe05 	bl	800651c <vPortExitCritical>

	return xReturn;
 8005912:	69fb      	ldr	r3, [r7, #28]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3720      	adds	r7, #32
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20000d6c 	.word	0x20000d6c
 8005920:	20000d80 	.word	0x20000d80

08005924 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005928:	4b03      	ldr	r3, [pc, #12]	; (8005938 <vTaskMissedYield+0x14>)
 800592a:	2201      	movs	r2, #1
 800592c:	601a      	str	r2, [r3, #0]
}
 800592e:	bf00      	nop
 8005930:	46bd      	mov	sp, r7
 8005932:	bc80      	pop	{r7}
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	20000d7c 	.word	0x20000d7c

0800593c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005944:	f000 f852 	bl	80059ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005948:	4b06      	ldr	r3, [pc, #24]	; (8005964 <prvIdleTask+0x28>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d9f9      	bls.n	8005944 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005950:	4b05      	ldr	r3, [pc, #20]	; (8005968 <prvIdleTask+0x2c>)
 8005952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005960:	e7f0      	b.n	8005944 <prvIdleTask+0x8>
 8005962:	bf00      	nop
 8005964:	20000898 	.word	0x20000898
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005972:	2300      	movs	r3, #0
 8005974:	607b      	str	r3, [r7, #4]
 8005976:	e00c      	b.n	8005992 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4a12      	ldr	r2, [pc, #72]	; (80059cc <prvInitialiseTaskLists+0x60>)
 8005984:	4413      	add	r3, r2
 8005986:	4618      	mov	r0, r3
 8005988:	f7fe fd06 	bl	8004398 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3301      	adds	r3, #1
 8005990:	607b      	str	r3, [r7, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b37      	cmp	r3, #55	; 0x37
 8005996:	d9ef      	bls.n	8005978 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005998:	480d      	ldr	r0, [pc, #52]	; (80059d0 <prvInitialiseTaskLists+0x64>)
 800599a:	f7fe fcfd 	bl	8004398 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800599e:	480d      	ldr	r0, [pc, #52]	; (80059d4 <prvInitialiseTaskLists+0x68>)
 80059a0:	f7fe fcfa 	bl	8004398 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059a4:	480c      	ldr	r0, [pc, #48]	; (80059d8 <prvInitialiseTaskLists+0x6c>)
 80059a6:	f7fe fcf7 	bl	8004398 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059aa:	480c      	ldr	r0, [pc, #48]	; (80059dc <prvInitialiseTaskLists+0x70>)
 80059ac:	f7fe fcf4 	bl	8004398 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059b0:	480b      	ldr	r0, [pc, #44]	; (80059e0 <prvInitialiseTaskLists+0x74>)
 80059b2:	f7fe fcf1 	bl	8004398 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059b6:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <prvInitialiseTaskLists+0x78>)
 80059b8:	4a05      	ldr	r2, [pc, #20]	; (80059d0 <prvInitialiseTaskLists+0x64>)
 80059ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059bc:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <prvInitialiseTaskLists+0x7c>)
 80059be:	4a05      	ldr	r2, [pc, #20]	; (80059d4 <prvInitialiseTaskLists+0x68>)
 80059c0:	601a      	str	r2, [r3, #0]
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000898 	.word	0x20000898
 80059d0:	20000cf8 	.word	0x20000cf8
 80059d4:	20000d0c 	.word	0x20000d0c
 80059d8:	20000d28 	.word	0x20000d28
 80059dc:	20000d3c 	.word	0x20000d3c
 80059e0:	20000d54 	.word	0x20000d54
 80059e4:	20000d20 	.word	0x20000d20
 80059e8:	20000d24 	.word	0x20000d24

080059ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059f2:	e019      	b.n	8005a28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059f4:	f000 fd62 	bl	80064bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80059f8:	4b10      	ldr	r3, [pc, #64]	; (8005a3c <prvCheckTasksWaitingTermination+0x50>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fe fd4d 	bl	80044a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a0a:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <prvCheckTasksWaitingTermination+0x54>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	4a0b      	ldr	r2, [pc, #44]	; (8005a40 <prvCheckTasksWaitingTermination+0x54>)
 8005a12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a14:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <prvCheckTasksWaitingTermination+0x58>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	4a0a      	ldr	r2, [pc, #40]	; (8005a44 <prvCheckTasksWaitingTermination+0x58>)
 8005a1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a1e:	f000 fd7d 	bl	800651c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f810 	bl	8005a48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a28:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <prvCheckTasksWaitingTermination+0x58>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e1      	bne.n	80059f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000d3c 	.word	0x20000d3c
 8005a40:	20000d68 	.word	0x20000d68
 8005a44:	20000d50 	.word	0x20000d50

08005a48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d108      	bne.n	8005a6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fef0 	bl	8006844 <vPortFree>
				vPortFree( pxTCB );
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 feed 	bl	8006844 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a6a:	e018      	b.n	8005a9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d103      	bne.n	8005a7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fee4 	bl	8006844 <vPortFree>
	}
 8005a7c:	e00f      	b.n	8005a9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d00a      	beq.n	8005a9e <prvDeleteTCB+0x56>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	60fb      	str	r3, [r7, #12]
}
 8005a9a:	bf00      	nop
 8005a9c:	e7fe      	b.n	8005a9c <prvDeleteTCB+0x54>
	}
 8005a9e:	bf00      	nop
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aae:	4b0e      	ldr	r3, [pc, #56]	; (8005ae8 <prvResetNextTaskUnblockTime+0x40>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <prvResetNextTaskUnblockTime+0x14>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <prvResetNextTaskUnblockTime+0x16>
 8005abc:	2300      	movs	r3, #0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d004      	beq.n	8005acc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ac2:	4b0a      	ldr	r3, [pc, #40]	; (8005aec <prvResetNextTaskUnblockTime+0x44>)
 8005ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005aca:	e008      	b.n	8005ade <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005acc:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <prvResetNextTaskUnblockTime+0x40>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	4a04      	ldr	r2, [pc, #16]	; (8005aec <prvResetNextTaskUnblockTime+0x44>)
 8005adc:	6013      	str	r3, [r2, #0]
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bc80      	pop	{r7}
 8005ae6:	4770      	bx	lr
 8005ae8:	20000d20 	.word	0x20000d20
 8005aec:	20000d88 	.word	0x20000d88

08005af0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005af6:	4b0b      	ldr	r3, [pc, #44]	; (8005b24 <xTaskGetSchedulerState+0x34>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d102      	bne.n	8005b04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005afe:	2301      	movs	r3, #1
 8005b00:	607b      	str	r3, [r7, #4]
 8005b02:	e008      	b.n	8005b16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b04:	4b08      	ldr	r3, [pc, #32]	; (8005b28 <xTaskGetSchedulerState+0x38>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d102      	bne.n	8005b12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	607b      	str	r3, [r7, #4]
 8005b10:	e001      	b.n	8005b16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b12:	2300      	movs	r3, #0
 8005b14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b16:	687b      	ldr	r3, [r7, #4]
	}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20000d74 	.word	0x20000d74
 8005b28:	20000d90 	.word	0x20000d90

08005b2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d056      	beq.n	8005bf0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b42:	4b2e      	ldr	r3, [pc, #184]	; (8005bfc <xTaskPriorityDisinherit+0xd0>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d00a      	beq.n	8005b62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	60fb      	str	r3, [r7, #12]
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10a      	bne.n	8005b80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	60bb      	str	r3, [r7, #8]
}
 8005b7c:	bf00      	nop
 8005b7e:	e7fe      	b.n	8005b7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b84:	1e5a      	subs	r2, r3, #1
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d02c      	beq.n	8005bf0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d128      	bne.n	8005bf0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe fc7e 	bl	80044a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <xTaskPriorityDisinherit+0xd4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d903      	bls.n	8005bd0 <xTaskPriorityDisinherit+0xa4>
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	4a0c      	ldr	r2, [pc, #48]	; (8005c00 <xTaskPriorityDisinherit+0xd4>)
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4a09      	ldr	r2, [pc, #36]	; (8005c04 <xTaskPriorityDisinherit+0xd8>)
 8005bde:	441a      	add	r2, r3
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4619      	mov	r1, r3
 8005be6:	4610      	mov	r0, r2
 8005be8:	f7fe fc01 	bl	80043ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bec:	2301      	movs	r3, #1
 8005bee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bf0:	697b      	ldr	r3, [r7, #20]
	}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000894 	.word	0x20000894
 8005c00:	20000d70 	.word	0x20000d70
 8005c04:	20000898 	.word	0x20000898

08005c08 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c12:	4b21      	ldr	r3, [pc, #132]	; (8005c98 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c18:	4b20      	ldr	r3, [pc, #128]	; (8005c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe fc40 	bl	80044a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2a:	d10a      	bne.n	8005c42 <prvAddCurrentTaskToDelayedList+0x3a>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c32:	4b1a      	ldr	r3, [pc, #104]	; (8005c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3304      	adds	r3, #4
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4819      	ldr	r0, [pc, #100]	; (8005ca0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c3c:	f7fe fbd7 	bl	80043ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c40:	e026      	b.n	8005c90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4413      	add	r3, r2
 8005c48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c4a:	4b14      	ldr	r3, [pc, #80]	; (8005c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d209      	bcs.n	8005c6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c5a:	4b12      	ldr	r3, [pc, #72]	; (8005ca4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	4b0f      	ldr	r3, [pc, #60]	; (8005c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3304      	adds	r3, #4
 8005c64:	4619      	mov	r1, r3
 8005c66:	4610      	mov	r0, r2
 8005c68:	f7fe fbe4 	bl	8004434 <vListInsert>
}
 8005c6c:	e010      	b.n	8005c90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ca8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3304      	adds	r3, #4
 8005c78:	4619      	mov	r1, r3
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	f7fe fbda 	bl	8004434 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c80:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d202      	bcs.n	8005c90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c8a:	4a08      	ldr	r2, [pc, #32]	; (8005cac <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	6013      	str	r3, [r2, #0]
}
 8005c90:	bf00      	nop
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000d6c 	.word	0x20000d6c
 8005c9c:	20000894 	.word	0x20000894
 8005ca0:	20000d54 	.word	0x20000d54
 8005ca4:	20000d24 	.word	0x20000d24
 8005ca8:	20000d20 	.word	0x20000d20
 8005cac:	20000d88 	.word	0x20000d88

08005cb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08a      	sub	sp, #40	; 0x28
 8005cb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005cba:	f000 facb 	bl	8006254 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005cbe:	4b1c      	ldr	r3, [pc, #112]	; (8005d30 <xTimerCreateTimerTask+0x80>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d021      	beq.n	8005d0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005cce:	1d3a      	adds	r2, r7, #4
 8005cd0:	f107 0108 	add.w	r1, r7, #8
 8005cd4:	f107 030c 	add.w	r3, r7, #12
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fe fb43 	bl	8004364 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	9202      	str	r2, [sp, #8]
 8005ce6:	9301      	str	r3, [sp, #4]
 8005ce8:	2302      	movs	r3, #2
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	2300      	movs	r3, #0
 8005cee:	460a      	mov	r2, r1
 8005cf0:	4910      	ldr	r1, [pc, #64]	; (8005d34 <xTimerCreateTimerTask+0x84>)
 8005cf2:	4811      	ldr	r0, [pc, #68]	; (8005d38 <xTimerCreateTimerTask+0x88>)
 8005cf4:	f7ff f8e4 	bl	8004ec0 <xTaskCreateStatic>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	4a10      	ldr	r2, [pc, #64]	; (8005d3c <xTimerCreateTimerTask+0x8c>)
 8005cfc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005cfe:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <xTimerCreateTimerTask+0x8c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d06:	2301      	movs	r3, #1
 8005d08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10a      	bne.n	8005d26 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	613b      	str	r3, [r7, #16]
}
 8005d22:	bf00      	nop
 8005d24:	e7fe      	b.n	8005d24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d26:	697b      	ldr	r3, [r7, #20]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	20000dc4 	.word	0x20000dc4
 8005d34:	08006b5c 	.word	0x08006b5c
 8005d38:	08005e5d 	.word	0x08005e5d
 8005d3c:	20000dc8 	.word	0x20000dc8

08005d40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08a      	sub	sp, #40	; 0x28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10a      	bne.n	8005d6e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	623b      	str	r3, [r7, #32]
}
 8005d6a:	bf00      	nop
 8005d6c:	e7fe      	b.n	8005d6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d6e:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <xTimerGenericCommand+0x98>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d02a      	beq.n	8005dcc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b05      	cmp	r3, #5
 8005d86:	dc18      	bgt.n	8005dba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d88:	f7ff feb2 	bl	8005af0 <xTaskGetSchedulerState>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d109      	bne.n	8005da6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d92:	4b11      	ldr	r3, [pc, #68]	; (8005dd8 <xTimerGenericCommand+0x98>)
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	f107 0110 	add.w	r1, r7, #16
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9e:	f7fe fcad 	bl	80046fc <xQueueGenericSend>
 8005da2:	6278      	str	r0, [r7, #36]	; 0x24
 8005da4:	e012      	b.n	8005dcc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005da6:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <xTimerGenericCommand+0x98>)
 8005da8:	6818      	ldr	r0, [r3, #0]
 8005daa:	f107 0110 	add.w	r1, r7, #16
 8005dae:	2300      	movs	r3, #0
 8005db0:	2200      	movs	r2, #0
 8005db2:	f7fe fca3 	bl	80046fc <xQueueGenericSend>
 8005db6:	6278      	str	r0, [r7, #36]	; 0x24
 8005db8:	e008      	b.n	8005dcc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005dba:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <xTimerGenericCommand+0x98>)
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	f107 0110 	add.w	r1, r7, #16
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	f7fe fd97 	bl	80048f8 <xQueueGenericSendFromISR>
 8005dca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3728      	adds	r7, #40	; 0x28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000dc4 	.word	0x20000dc4

08005ddc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005de6:	4b1c      	ldr	r3, [pc, #112]	; (8005e58 <prvProcessExpiredTimer+0x7c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fe fb55 	bl	80044a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d122      	bne.n	8005e48 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	18d1      	adds	r1, r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	6978      	ldr	r0, [r7, #20]
 8005e10:	f000 f8c8 	bl	8005fa4 <prvInsertTimerInActiveList>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d016      	beq.n	8005e48 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	2100      	movs	r1, #0
 8005e24:	6978      	ldr	r0, [r7, #20]
 8005e26:	f7ff ff8b 	bl	8005d40 <xTimerGenericCommand>
 8005e2a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10a      	bne.n	8005e48 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	60fb      	str	r3, [r7, #12]
}
 8005e44:	bf00      	nop
 8005e46:	e7fe      	b.n	8005e46 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	6978      	ldr	r0, [r7, #20]
 8005e4e:	4798      	blx	r3
}
 8005e50:	bf00      	nop
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20000dbc 	.word	0x20000dbc

08005e5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e64:	f107 0308 	add.w	r3, r7, #8
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 f857 	bl	8005f1c <prvGetNextExpireTime>
 8005e6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4619      	mov	r1, r3
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f803 	bl	8005e80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e7a:	f000 f8d5 	bl	8006028 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e7e:	e7f1      	b.n	8005e64 <prvTimerTask+0x8>

08005e80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e8a:	f7ff fa4b 	bl	8005324 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e8e:	f107 0308 	add.w	r3, r7, #8
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 f866 	bl	8005f64 <prvSampleTimeNow>
 8005e98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d130      	bne.n	8005f02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10a      	bne.n	8005ebc <prvProcessTimerOrBlockTask+0x3c>
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d806      	bhi.n	8005ebc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005eae:	f7ff fa47 	bl	8005340 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005eb2:	68f9      	ldr	r1, [r7, #12]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff ff91 	bl	8005ddc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005eba:	e024      	b.n	8005f06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d008      	beq.n	8005ed4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ec2:	4b13      	ldr	r3, [pc, #76]	; (8005f10 <prvProcessTimerOrBlockTask+0x90>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	bf0c      	ite	eq
 8005ecc:	2301      	moveq	r3, #1
 8005ece:	2300      	movne	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ed4:	4b0f      	ldr	r3, [pc, #60]	; (8005f14 <prvProcessTimerOrBlockTask+0x94>)
 8005ed6:	6818      	ldr	r0, [r3, #0]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	f7fe ffb9 	bl	8004e58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ee6:	f7ff fa2b 	bl	8005340 <xTaskResumeAll>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ef0:	4b09      	ldr	r3, [pc, #36]	; (8005f18 <prvProcessTimerOrBlockTask+0x98>)
 8005ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	f3bf 8f6f 	isb	sy
}
 8005f00:	e001      	b.n	8005f06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f02:	f7ff fa1d 	bl	8005340 <xTaskResumeAll>
}
 8005f06:	bf00      	nop
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	20000dc0 	.word	0x20000dc0
 8005f14:	20000dc4 	.word	0x20000dc4
 8005f18:	e000ed04 	.word	0xe000ed04

08005f1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f24:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <prvGetNextExpireTime+0x44>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	bf0c      	ite	eq
 8005f2e:	2301      	moveq	r3, #1
 8005f30:	2300      	movne	r3, #0
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	461a      	mov	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d105      	bne.n	8005f4e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f42:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <prvGetNextExpireTime+0x44>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	e001      	b.n	8005f52 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f52:	68fb      	ldr	r3, [r7, #12]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bc80      	pop	{r7}
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	20000dbc 	.word	0x20000dbc

08005f64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f6c:	f7ff fa86 	bl	800547c <xTaskGetTickCount>
 8005f70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f72:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <prvSampleTimeNow+0x3c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d205      	bcs.n	8005f88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f7c:	f000 f908 	bl	8006190 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	e002      	b.n	8005f8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f8e:	4a04      	ldr	r2, [pc, #16]	; (8005fa0 <prvSampleTimeNow+0x3c>)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f94:	68fb      	ldr	r3, [r7, #12]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20000dcc 	.word	0x20000dcc

08005fa4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d812      	bhi.n	8005ff0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	1ad2      	subs	r2, r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d302      	bcc.n	8005fde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	e01b      	b.n	8006016 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fde:	4b10      	ldr	r3, [pc, #64]	; (8006020 <prvInsertTimerInActiveList+0x7c>)
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4610      	mov	r0, r2
 8005fea:	f7fe fa23 	bl	8004434 <vListInsert>
 8005fee:	e012      	b.n	8006016 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d206      	bcs.n	8006006 <prvInsertTimerInActiveList+0x62>
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d302      	bcc.n	8006006 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006000:	2301      	movs	r3, #1
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	e007      	b.n	8006016 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006006:	4b07      	ldr	r3, [pc, #28]	; (8006024 <prvInsertTimerInActiveList+0x80>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3304      	adds	r3, #4
 800600e:	4619      	mov	r1, r3
 8006010:	4610      	mov	r0, r2
 8006012:	f7fe fa0f 	bl	8004434 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006016:	697b      	ldr	r3, [r7, #20]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	20000dc0 	.word	0x20000dc0
 8006024:	20000dbc 	.word	0x20000dbc

08006028 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08e      	sub	sp, #56	; 0x38
 800602c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800602e:	e09d      	b.n	800616c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	da18      	bge.n	8006068 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006036:	1d3b      	adds	r3, r7, #4
 8006038:	3304      	adds	r3, #4
 800603a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800603c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10a      	bne.n	8006058 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	61fb      	str	r3, [r7, #28]
}
 8006054:	bf00      	nop
 8006056:	e7fe      	b.n	8006056 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800605e:	6850      	ldr	r0, [r2, #4]
 8006060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006062:	6892      	ldr	r2, [r2, #8]
 8006064:	4611      	mov	r1, r2
 8006066:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	db7e      	blt.n	800616c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d004      	beq.n	8006084 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607c:	3304      	adds	r3, #4
 800607e:	4618      	mov	r0, r3
 8006080:	f7fe fa10 	bl	80044a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006084:	463b      	mov	r3, r7
 8006086:	4618      	mov	r0, r3
 8006088:	f7ff ff6c 	bl	8005f64 <prvSampleTimeNow>
 800608c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b09      	cmp	r3, #9
 8006092:	d86a      	bhi.n	800616a <prvProcessReceivedCommands+0x142>
 8006094:	a201      	add	r2, pc, #4	; (adr r2, 800609c <prvProcessReceivedCommands+0x74>)
 8006096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609a:	bf00      	nop
 800609c:	080060c5 	.word	0x080060c5
 80060a0:	080060c5 	.word	0x080060c5
 80060a4:	080060c5 	.word	0x080060c5
 80060a8:	0800616d 	.word	0x0800616d
 80060ac:	08006121 	.word	0x08006121
 80060b0:	08006159 	.word	0x08006159
 80060b4:	080060c5 	.word	0x080060c5
 80060b8:	080060c5 	.word	0x080060c5
 80060bc:	0800616d 	.word	0x0800616d
 80060c0:	08006121 	.word	0x08006121
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	18d1      	adds	r1, r2, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060d2:	f7ff ff67 	bl	8005fa4 <prvInsertTimerInActiveList>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d047      	beq.n	800616c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060e2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80060e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d13f      	bne.n	800616c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	441a      	add	r2, r3
 80060f4:	2300      	movs	r3, #0
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	2300      	movs	r3, #0
 80060fa:	2100      	movs	r1, #0
 80060fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060fe:	f7ff fe1f 	bl	8005d40 <xTimerGenericCommand>
 8006102:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d130      	bne.n	800616c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	61bb      	str	r3, [r7, #24]
}
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10a      	bne.n	8006144 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	617b      	str	r3, [r7, #20]
}
 8006140:	bf00      	nop
 8006142:	e7fe      	b.n	8006142 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	699a      	ldr	r2, [r3, #24]
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	18d1      	adds	r1, r2, r3
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006152:	f7ff ff27 	bl	8005fa4 <prvInsertTimerInActiveList>
					break;
 8006156:	e009      	b.n	800616c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d104      	bne.n	800616c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006164:	f000 fb6e 	bl	8006844 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006168:	e000      	b.n	800616c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800616a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800616c:	4b07      	ldr	r3, [pc, #28]	; (800618c <prvProcessReceivedCommands+0x164>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	1d39      	adds	r1, r7, #4
 8006172:	2200      	movs	r2, #0
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe fc57 	bl	8004a28 <xQueueReceive>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	f47f af57 	bne.w	8006030 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006182:	bf00      	nop
 8006184:	bf00      	nop
 8006186:	3730      	adds	r7, #48	; 0x30
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	20000dc4 	.word	0x20000dc4

08006190 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006196:	e045      	b.n	8006224 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006198:	4b2c      	ldr	r3, [pc, #176]	; (800624c <prvSwitchTimerLists+0xbc>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061a2:	4b2a      	ldr	r3, [pc, #168]	; (800624c <prvSwitchTimerLists+0xbc>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	3304      	adds	r3, #4
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fe f977 	bl	80044a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d12e      	bne.n	8006224 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4413      	add	r3, r2
 80061ce:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d90e      	bls.n	80061f6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061e4:	4b19      	ldr	r3, [pc, #100]	; (800624c <prvSwitchTimerLists+0xbc>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	f7fe f920 	bl	8004434 <vListInsert>
 80061f4:	e016      	b.n	8006224 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061f6:	2300      	movs	r3, #0
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	2300      	movs	r3, #0
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	2100      	movs	r1, #0
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7ff fd9d 	bl	8005d40 <xTimerGenericCommand>
 8006206:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10a      	bne.n	8006224 <prvSwitchTimerLists+0x94>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	603b      	str	r3, [r7, #0]
}
 8006220:	bf00      	nop
 8006222:	e7fe      	b.n	8006222 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006224:	4b09      	ldr	r3, [pc, #36]	; (800624c <prvSwitchTimerLists+0xbc>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1b4      	bne.n	8006198 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800622e:	4b07      	ldr	r3, [pc, #28]	; (800624c <prvSwitchTimerLists+0xbc>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006234:	4b06      	ldr	r3, [pc, #24]	; (8006250 <prvSwitchTimerLists+0xc0>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a04      	ldr	r2, [pc, #16]	; (800624c <prvSwitchTimerLists+0xbc>)
 800623a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800623c:	4a04      	ldr	r2, [pc, #16]	; (8006250 <prvSwitchTimerLists+0xc0>)
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	6013      	str	r3, [r2, #0]
}
 8006242:	bf00      	nop
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000dbc 	.word	0x20000dbc
 8006250:	20000dc0 	.word	0x20000dc0

08006254 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800625a:	f000 f92f 	bl	80064bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800625e:	4b15      	ldr	r3, [pc, #84]	; (80062b4 <prvCheckForValidListAndQueue+0x60>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d120      	bne.n	80062a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006266:	4814      	ldr	r0, [pc, #80]	; (80062b8 <prvCheckForValidListAndQueue+0x64>)
 8006268:	f7fe f896 	bl	8004398 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800626c:	4813      	ldr	r0, [pc, #76]	; (80062bc <prvCheckForValidListAndQueue+0x68>)
 800626e:	f7fe f893 	bl	8004398 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006272:	4b13      	ldr	r3, [pc, #76]	; (80062c0 <prvCheckForValidListAndQueue+0x6c>)
 8006274:	4a10      	ldr	r2, [pc, #64]	; (80062b8 <prvCheckForValidListAndQueue+0x64>)
 8006276:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006278:	4b12      	ldr	r3, [pc, #72]	; (80062c4 <prvCheckForValidListAndQueue+0x70>)
 800627a:	4a10      	ldr	r2, [pc, #64]	; (80062bc <prvCheckForValidListAndQueue+0x68>)
 800627c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800627e:	2300      	movs	r3, #0
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	4b11      	ldr	r3, [pc, #68]	; (80062c8 <prvCheckForValidListAndQueue+0x74>)
 8006284:	4a11      	ldr	r2, [pc, #68]	; (80062cc <prvCheckForValidListAndQueue+0x78>)
 8006286:	2110      	movs	r1, #16
 8006288:	200a      	movs	r0, #10
 800628a:	f7fe f99d 	bl	80045c8 <xQueueGenericCreateStatic>
 800628e:	4603      	mov	r3, r0
 8006290:	4a08      	ldr	r2, [pc, #32]	; (80062b4 <prvCheckForValidListAndQueue+0x60>)
 8006292:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006294:	4b07      	ldr	r3, [pc, #28]	; (80062b4 <prvCheckForValidListAndQueue+0x60>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d005      	beq.n	80062a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800629c:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <prvCheckForValidListAndQueue+0x60>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	490b      	ldr	r1, [pc, #44]	; (80062d0 <prvCheckForValidListAndQueue+0x7c>)
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fe fdb0 	bl	8004e08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062a8:	f000 f938 	bl	800651c <vPortExitCritical>
}
 80062ac:	bf00      	nop
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	20000dc4 	.word	0x20000dc4
 80062b8:	20000d94 	.word	0x20000d94
 80062bc:	20000da8 	.word	0x20000da8
 80062c0:	20000dbc 	.word	0x20000dbc
 80062c4:	20000dc0 	.word	0x20000dc0
 80062c8:	20000e70 	.word	0x20000e70
 80062cc:	20000dd0 	.word	0x20000dd0
 80062d0:	08006b64 	.word	0x08006b64

080062d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3b04      	subs	r3, #4
 80062e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3b04      	subs	r3, #4
 80062f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f023 0201 	bic.w	r2, r3, #1
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	3b04      	subs	r3, #4
 8006302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006304:	4a08      	ldr	r2, [pc, #32]	; (8006328 <pxPortInitialiseStack+0x54>)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	3b14      	subs	r3, #20
 800630e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3b20      	subs	r3, #32
 800631a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800631c:	68fb      	ldr	r3, [r7, #12]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	bc80      	pop	{r7}
 8006326:	4770      	bx	lr
 8006328:	0800632d 	.word	0x0800632d

0800632c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006332:	2300      	movs	r3, #0
 8006334:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006336:	4b12      	ldr	r3, [pc, #72]	; (8006380 <prvTaskExitError+0x54>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633e:	d00a      	beq.n	8006356 <prvTaskExitError+0x2a>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	60fb      	str	r3, [r7, #12]
}
 8006352:	bf00      	nop
 8006354:	e7fe      	b.n	8006354 <prvTaskExitError+0x28>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	60bb      	str	r3, [r7, #8]
}
 8006368:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800636a:	bf00      	nop
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d0fc      	beq.n	800636c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006372:	bf00      	nop
 8006374:	bf00      	nop
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	bc80      	pop	{r7}
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	20000024 	.word	0x20000024
	...

08006390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006390:	4b07      	ldr	r3, [pc, #28]	; (80063b0 <pxCurrentTCBConst2>)
 8006392:	6819      	ldr	r1, [r3, #0]
 8006394:	6808      	ldr	r0, [r1, #0]
 8006396:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800639a:	f380 8809 	msr	PSP, r0
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f04f 0000 	mov.w	r0, #0
 80063a6:	f380 8811 	msr	BASEPRI, r0
 80063aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80063ae:	4770      	bx	lr

080063b0 <pxCurrentTCBConst2>:
 80063b0:	20000894 	.word	0x20000894
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop

080063b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80063b8:	4806      	ldr	r0, [pc, #24]	; (80063d4 <prvPortStartFirstTask+0x1c>)
 80063ba:	6800      	ldr	r0, [r0, #0]
 80063bc:	6800      	ldr	r0, [r0, #0]
 80063be:	f380 8808 	msr	MSP, r0
 80063c2:	b662      	cpsie	i
 80063c4:	b661      	cpsie	f
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	df00      	svc	0
 80063d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063d2:	bf00      	nop
 80063d4:	e000ed08 	.word	0xe000ed08

080063d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063de:	4b32      	ldr	r3, [pc, #200]	; (80064a8 <xPortStartScheduler+0xd0>)
 80063e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	22ff      	movs	r2, #255	; 0xff
 80063ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006400:	b2da      	uxtb	r2, r3
 8006402:	4b2a      	ldr	r3, [pc, #168]	; (80064ac <xPortStartScheduler+0xd4>)
 8006404:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006406:	4b2a      	ldr	r3, [pc, #168]	; (80064b0 <xPortStartScheduler+0xd8>)
 8006408:	2207      	movs	r2, #7
 800640a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800640c:	e009      	b.n	8006422 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800640e:	4b28      	ldr	r3, [pc, #160]	; (80064b0 <xPortStartScheduler+0xd8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3b01      	subs	r3, #1
 8006414:	4a26      	ldr	r2, [pc, #152]	; (80064b0 <xPortStartScheduler+0xd8>)
 8006416:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	b2db      	uxtb	r3, r3
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	b2db      	uxtb	r3, r3
 8006420:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006422:	78fb      	ldrb	r3, [r7, #3]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800642a:	2b80      	cmp	r3, #128	; 0x80
 800642c:	d0ef      	beq.n	800640e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800642e:	4b20      	ldr	r3, [pc, #128]	; (80064b0 <xPortStartScheduler+0xd8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f1c3 0307 	rsb	r3, r3, #7
 8006436:	2b04      	cmp	r3, #4
 8006438:	d00a      	beq.n	8006450 <xPortStartScheduler+0x78>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	60bb      	str	r3, [r7, #8]
}
 800644c:	bf00      	nop
 800644e:	e7fe      	b.n	800644e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006450:	4b17      	ldr	r3, [pc, #92]	; (80064b0 <xPortStartScheduler+0xd8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	021b      	lsls	r3, r3, #8
 8006456:	4a16      	ldr	r2, [pc, #88]	; (80064b0 <xPortStartScheduler+0xd8>)
 8006458:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800645a:	4b15      	ldr	r3, [pc, #84]	; (80064b0 <xPortStartScheduler+0xd8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006462:	4a13      	ldr	r2, [pc, #76]	; (80064b0 <xPortStartScheduler+0xd8>)
 8006464:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	b2da      	uxtb	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800646e:	4b11      	ldr	r3, [pc, #68]	; (80064b4 <xPortStartScheduler+0xdc>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a10      	ldr	r2, [pc, #64]	; (80064b4 <xPortStartScheduler+0xdc>)
 8006474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006478:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800647a:	4b0e      	ldr	r3, [pc, #56]	; (80064b4 <xPortStartScheduler+0xdc>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a0d      	ldr	r2, [pc, #52]	; (80064b4 <xPortStartScheduler+0xdc>)
 8006480:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006484:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006486:	f000 f8b9 	bl	80065fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800648a:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <xPortStartScheduler+0xe0>)
 800648c:	2200      	movs	r2, #0
 800648e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006490:	f7ff ff92 	bl	80063b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006494:	f7ff f8be 	bl	8005614 <vTaskSwitchContext>
	prvTaskExitError();
 8006498:	f7ff ff48 	bl	800632c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	e000e400 	.word	0xe000e400
 80064ac:	20000ec0 	.word	0x20000ec0
 80064b0:	20000ec4 	.word	0x20000ec4
 80064b4:	e000ed20 	.word	0xe000ed20
 80064b8:	20000024 	.word	0x20000024

080064bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
	__asm volatile
 80064c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	607b      	str	r3, [r7, #4]
}
 80064d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064d6:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <vPortEnterCritical+0x58>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	3301      	adds	r3, #1
 80064dc:	4a0d      	ldr	r2, [pc, #52]	; (8006514 <vPortEnterCritical+0x58>)
 80064de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064e0:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <vPortEnterCritical+0x58>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d10f      	bne.n	8006508 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064e8:	4b0b      	ldr	r3, [pc, #44]	; (8006518 <vPortEnterCritical+0x5c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <vPortEnterCritical+0x4c>
	__asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	603b      	str	r3, [r7, #0]
}
 8006504:	bf00      	nop
 8006506:	e7fe      	b.n	8006506 <vPortEnterCritical+0x4a>
	}
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	bc80      	pop	{r7}
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	20000024 	.word	0x20000024
 8006518:	e000ed04 	.word	0xe000ed04

0800651c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006522:	4b11      	ldr	r3, [pc, #68]	; (8006568 <vPortExitCritical+0x4c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10a      	bne.n	8006540 <vPortExitCritical+0x24>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	607b      	str	r3, [r7, #4]
}
 800653c:	bf00      	nop
 800653e:	e7fe      	b.n	800653e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006540:	4b09      	ldr	r3, [pc, #36]	; (8006568 <vPortExitCritical+0x4c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3b01      	subs	r3, #1
 8006546:	4a08      	ldr	r2, [pc, #32]	; (8006568 <vPortExitCritical+0x4c>)
 8006548:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800654a:	4b07      	ldr	r3, [pc, #28]	; (8006568 <vPortExitCritical+0x4c>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d105      	bne.n	800655e <vPortExitCritical+0x42>
 8006552:	2300      	movs	r3, #0
 8006554:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	f383 8811 	msr	BASEPRI, r3
}
 800655c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr
 8006568:	20000024 	.word	0x20000024
 800656c:	00000000 	.word	0x00000000

08006570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006570:	f3ef 8009 	mrs	r0, PSP
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <pxCurrentTCBConst>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006580:	6010      	str	r0, [r2, #0]
 8006582:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006586:	f04f 0050 	mov.w	r0, #80	; 0x50
 800658a:	f380 8811 	msr	BASEPRI, r0
 800658e:	f7ff f841 	bl	8005614 <vTaskSwitchContext>
 8006592:	f04f 0000 	mov.w	r0, #0
 8006596:	f380 8811 	msr	BASEPRI, r0
 800659a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800659e:	6819      	ldr	r1, [r3, #0]
 80065a0:	6808      	ldr	r0, [r1, #0]
 80065a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80065a6:	f380 8809 	msr	PSP, r0
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	4770      	bx	lr

080065b0 <pxCurrentTCBConst>:
 80065b0:	20000894 	.word	0x20000894
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop

080065b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	607b      	str	r3, [r7, #4]
}
 80065d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065d2:	f7fe ff61 	bl	8005498 <xTaskIncrementTick>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065dc:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <SysTick_Handler+0x40>)
 80065de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	2300      	movs	r3, #0
 80065e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	f383 8811 	msr	BASEPRI, r3
}
 80065ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006600:	4b0a      	ldr	r3, [pc, #40]	; (800662c <vPortSetupTimerInterrupt+0x30>)
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006606:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <vPortSetupTimerInterrupt+0x34>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800660c:	4b09      	ldr	r3, [pc, #36]	; (8006634 <vPortSetupTimerInterrupt+0x38>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a09      	ldr	r2, [pc, #36]	; (8006638 <vPortSetupTimerInterrupt+0x3c>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	099b      	lsrs	r3, r3, #6
 8006618:	4a08      	ldr	r2, [pc, #32]	; (800663c <vPortSetupTimerInterrupt+0x40>)
 800661a:	3b01      	subs	r3, #1
 800661c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800661e:	4b03      	ldr	r3, [pc, #12]	; (800662c <vPortSetupTimerInterrupt+0x30>)
 8006620:	2207      	movs	r2, #7
 8006622:	601a      	str	r2, [r3, #0]
}
 8006624:	bf00      	nop
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr
 800662c:	e000e010 	.word	0xe000e010
 8006630:	e000e018 	.word	0xe000e018
 8006634:	20000018 	.word	0x20000018
 8006638:	10624dd3 	.word	0x10624dd3
 800663c:	e000e014 	.word	0xe000e014

08006640 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006646:	f3ef 8305 	mrs	r3, IPSR
 800664a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2b0f      	cmp	r3, #15
 8006650:	d914      	bls.n	800667c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006652:	4a16      	ldr	r2, [pc, #88]	; (80066ac <vPortValidateInterruptPriority+0x6c>)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800665c:	4b14      	ldr	r3, [pc, #80]	; (80066b0 <vPortValidateInterruptPriority+0x70>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	7afa      	ldrb	r2, [r7, #11]
 8006662:	429a      	cmp	r2, r3
 8006664:	d20a      	bcs.n	800667c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	607b      	str	r3, [r7, #4]
}
 8006678:	bf00      	nop
 800667a:	e7fe      	b.n	800667a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800667c:	4b0d      	ldr	r3, [pc, #52]	; (80066b4 <vPortValidateInterruptPriority+0x74>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006684:	4b0c      	ldr	r3, [pc, #48]	; (80066b8 <vPortValidateInterruptPriority+0x78>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d90a      	bls.n	80066a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	603b      	str	r3, [r7, #0]
}
 800669e:	bf00      	nop
 80066a0:	e7fe      	b.n	80066a0 <vPortValidateInterruptPriority+0x60>
	}
 80066a2:	bf00      	nop
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bc80      	pop	{r7}
 80066aa:	4770      	bx	lr
 80066ac:	e000e3f0 	.word	0xe000e3f0
 80066b0:	20000ec0 	.word	0x20000ec0
 80066b4:	e000ed0c 	.word	0xe000ed0c
 80066b8:	20000ec4 	.word	0x20000ec4

080066bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08a      	sub	sp, #40	; 0x28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066c4:	2300      	movs	r3, #0
 80066c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066c8:	f7fe fe2c 	bl	8005324 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066cc:	4b58      	ldr	r3, [pc, #352]	; (8006830 <pvPortMalloc+0x174>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066d4:	f000 f910 	bl	80068f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066d8:	4b56      	ldr	r3, [pc, #344]	; (8006834 <pvPortMalloc+0x178>)
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4013      	ands	r3, r2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f040 808e 	bne.w	8006802 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01d      	beq.n	8006728 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80066ec:	2208      	movs	r2, #8
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4413      	add	r3, r2
 80066f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d014      	beq.n	8006728 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f023 0307 	bic.w	r3, r3, #7
 8006704:	3308      	adds	r3, #8
 8006706:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <pvPortMalloc+0x6c>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	617b      	str	r3, [r7, #20]
}
 8006724:	bf00      	nop
 8006726:	e7fe      	b.n	8006726 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d069      	beq.n	8006802 <pvPortMalloc+0x146>
 800672e:	4b42      	ldr	r3, [pc, #264]	; (8006838 <pvPortMalloc+0x17c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	429a      	cmp	r2, r3
 8006736:	d864      	bhi.n	8006802 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006738:	4b40      	ldr	r3, [pc, #256]	; (800683c <pvPortMalloc+0x180>)
 800673a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800673c:	4b3f      	ldr	r3, [pc, #252]	; (800683c <pvPortMalloc+0x180>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006742:	e004      	b.n	800674e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	429a      	cmp	r2, r3
 8006756:	d903      	bls.n	8006760 <pvPortMalloc+0xa4>
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1f1      	bne.n	8006744 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006760:	4b33      	ldr	r3, [pc, #204]	; (8006830 <pvPortMalloc+0x174>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006766:	429a      	cmp	r2, r3
 8006768:	d04b      	beq.n	8006802 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2208      	movs	r2, #8
 8006770:	4413      	add	r3, r2
 8006772:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	1ad2      	subs	r2, r2, r3
 8006784:	2308      	movs	r3, #8
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	429a      	cmp	r2, r3
 800678a:	d91f      	bls.n	80067cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800678c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4413      	add	r3, r2
 8006792:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <pvPortMalloc+0xf8>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	613b      	str	r3, [r7, #16]
}
 80067b0:	bf00      	nop
 80067b2:	e7fe      	b.n	80067b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	1ad2      	subs	r2, r2, r3
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067c6:	69b8      	ldr	r0, [r7, #24]
 80067c8:	f000 f8f8 	bl	80069bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067cc:	4b1a      	ldr	r3, [pc, #104]	; (8006838 <pvPortMalloc+0x17c>)
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	4a18      	ldr	r2, [pc, #96]	; (8006838 <pvPortMalloc+0x17c>)
 80067d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067da:	4b17      	ldr	r3, [pc, #92]	; (8006838 <pvPortMalloc+0x17c>)
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	4b18      	ldr	r3, [pc, #96]	; (8006840 <pvPortMalloc+0x184>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d203      	bcs.n	80067ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067e6:	4b14      	ldr	r3, [pc, #80]	; (8006838 <pvPortMalloc+0x17c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a15      	ldr	r2, [pc, #84]	; (8006840 <pvPortMalloc+0x184>)
 80067ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	4b10      	ldr	r3, [pc, #64]	; (8006834 <pvPortMalloc+0x178>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	431a      	orrs	r2, r3
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006802:	f7fe fd9d 	bl	8005340 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00a      	beq.n	8006826 <pvPortMalloc+0x16a>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	60fb      	str	r3, [r7, #12]
}
 8006822:	bf00      	nop
 8006824:	e7fe      	b.n	8006824 <pvPortMalloc+0x168>
	return pvReturn;
 8006826:	69fb      	ldr	r3, [r7, #28]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3728      	adds	r7, #40	; 0x28
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	20001ad0 	.word	0x20001ad0
 8006834:	20001adc 	.word	0x20001adc
 8006838:	20001ad4 	.word	0x20001ad4
 800683c:	20001ac8 	.word	0x20001ac8
 8006840:	20001ad8 	.word	0x20001ad8

08006844 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d048      	beq.n	80068e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006856:	2308      	movs	r3, #8
 8006858:	425b      	negs	r3, r3
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4413      	add	r3, r2
 800685e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <vPortFree+0xac>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4013      	ands	r3, r2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10a      	bne.n	8006888 <vPortFree+0x44>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	60fb      	str	r3, [r7, #12]
}
 8006884:	bf00      	nop
 8006886:	e7fe      	b.n	8006886 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00a      	beq.n	80068a6 <vPortFree+0x62>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	60bb      	str	r3, [r7, #8]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	4b11      	ldr	r3, [pc, #68]	; (80068f0 <vPortFree+0xac>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4013      	ands	r3, r2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d019      	beq.n	80068e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d115      	bne.n	80068e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <vPortFree+0xac>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	43db      	mvns	r3, r3
 80068c6:	401a      	ands	r2, r3
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068cc:	f7fe fd2a 	bl	8005324 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	4b07      	ldr	r3, [pc, #28]	; (80068f4 <vPortFree+0xb0>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4413      	add	r3, r2
 80068da:	4a06      	ldr	r2, [pc, #24]	; (80068f4 <vPortFree+0xb0>)
 80068dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068de:	6938      	ldr	r0, [r7, #16]
 80068e0:	f000 f86c 	bl	80069bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80068e4:	f7fe fd2c 	bl	8005340 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068e8:	bf00      	nop
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20001adc 	.word	0x20001adc
 80068f4:	20001ad4 	.word	0x20001ad4

080068f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006902:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006904:	4b27      	ldr	r3, [pc, #156]	; (80069a4 <prvHeapInit+0xac>)
 8006906:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f003 0307 	and.w	r3, r3, #7
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00c      	beq.n	800692c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3307      	adds	r3, #7
 8006916:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0307 	bic.w	r3, r3, #7
 800691e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	4a1f      	ldr	r2, [pc, #124]	; (80069a4 <prvHeapInit+0xac>)
 8006928:	4413      	add	r3, r2
 800692a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006930:	4a1d      	ldr	r2, [pc, #116]	; (80069a8 <prvHeapInit+0xb0>)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006936:	4b1c      	ldr	r3, [pc, #112]	; (80069a8 <prvHeapInit+0xb0>)
 8006938:	2200      	movs	r2, #0
 800693a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	4413      	add	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006944:	2208      	movs	r2, #8
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1a9b      	subs	r3, r3, r2
 800694a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f023 0307 	bic.w	r3, r3, #7
 8006952:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4a15      	ldr	r2, [pc, #84]	; (80069ac <prvHeapInit+0xb4>)
 8006958:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800695a:	4b14      	ldr	r3, [pc, #80]	; (80069ac <prvHeapInit+0xb4>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2200      	movs	r2, #0
 8006960:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006962:	4b12      	ldr	r3, [pc, #72]	; (80069ac <prvHeapInit+0xb4>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	1ad2      	subs	r2, r2, r3
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006978:	4b0c      	ldr	r3, [pc, #48]	; (80069ac <prvHeapInit+0xb4>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	4a0a      	ldr	r2, [pc, #40]	; (80069b0 <prvHeapInit+0xb8>)
 8006986:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	4a09      	ldr	r2, [pc, #36]	; (80069b4 <prvHeapInit+0xbc>)
 800698e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006990:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <prvHeapInit+0xc0>)
 8006992:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006996:	601a      	str	r2, [r3, #0]
}
 8006998:	bf00      	nop
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	20000ec8 	.word	0x20000ec8
 80069a8:	20001ac8 	.word	0x20001ac8
 80069ac:	20001ad0 	.word	0x20001ad0
 80069b0:	20001ad8 	.word	0x20001ad8
 80069b4:	20001ad4 	.word	0x20001ad4
 80069b8:	20001adc 	.word	0x20001adc

080069bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069c4:	4b27      	ldr	r3, [pc, #156]	; (8006a64 <prvInsertBlockIntoFreeList+0xa8>)
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	e002      	b.n	80069d0 <prvInsertBlockIntoFreeList+0x14>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d8f7      	bhi.n	80069ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	4413      	add	r3, r2
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d108      	bne.n	80069fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	441a      	add	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	441a      	add	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d118      	bne.n	8006a44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	4b14      	ldr	r3, [pc, #80]	; (8006a68 <prvInsertBlockIntoFreeList+0xac>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d00d      	beq.n	8006a3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	441a      	add	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	e008      	b.n	8006a4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a3a:	4b0b      	ldr	r3, [pc, #44]	; (8006a68 <prvInsertBlockIntoFreeList+0xac>)
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	e003      	b.n	8006a4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d002      	beq.n	8006a5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a5a:	bf00      	nop
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bc80      	pop	{r7}
 8006a62:	4770      	bx	lr
 8006a64:	20001ac8 	.word	0x20001ac8
 8006a68:	20001ad0 	.word	0x20001ad0

08006a6c <memset>:
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	4402      	add	r2, r0
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d100      	bne.n	8006a76 <memset+0xa>
 8006a74:	4770      	bx	lr
 8006a76:	f803 1b01 	strb.w	r1, [r3], #1
 8006a7a:	e7f9      	b.n	8006a70 <memset+0x4>

08006a7c <__libc_init_array>:
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	2600      	movs	r6, #0
 8006a80:	4d0c      	ldr	r5, [pc, #48]	; (8006ab4 <__libc_init_array+0x38>)
 8006a82:	4c0d      	ldr	r4, [pc, #52]	; (8006ab8 <__libc_init_array+0x3c>)
 8006a84:	1b64      	subs	r4, r4, r5
 8006a86:	10a4      	asrs	r4, r4, #2
 8006a88:	42a6      	cmp	r6, r4
 8006a8a:	d109      	bne.n	8006aa0 <__libc_init_array+0x24>
 8006a8c:	f000 f828 	bl	8006ae0 <_init>
 8006a90:	2600      	movs	r6, #0
 8006a92:	4d0a      	ldr	r5, [pc, #40]	; (8006abc <__libc_init_array+0x40>)
 8006a94:	4c0a      	ldr	r4, [pc, #40]	; (8006ac0 <__libc_init_array+0x44>)
 8006a96:	1b64      	subs	r4, r4, r5
 8006a98:	10a4      	asrs	r4, r4, #2
 8006a9a:	42a6      	cmp	r6, r4
 8006a9c:	d105      	bne.n	8006aaa <__libc_init_array+0x2e>
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa4:	4798      	blx	r3
 8006aa6:	3601      	adds	r6, #1
 8006aa8:	e7ee      	b.n	8006a88 <__libc_init_array+0xc>
 8006aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aae:	4798      	blx	r3
 8006ab0:	3601      	adds	r6, #1
 8006ab2:	e7f2      	b.n	8006a9a <__libc_init_array+0x1e>
 8006ab4:	08006be4 	.word	0x08006be4
 8006ab8:	08006be4 	.word	0x08006be4
 8006abc:	08006be4 	.word	0x08006be4
 8006ac0:	08006be8 	.word	0x08006be8

08006ac4 <memcpy>:
 8006ac4:	440a      	add	r2, r1
 8006ac6:	4291      	cmp	r1, r2
 8006ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006acc:	d100      	bne.n	8006ad0 <memcpy+0xc>
 8006ace:	4770      	bx	lr
 8006ad0:	b510      	push	{r4, lr}
 8006ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ad6:	4291      	cmp	r1, r2
 8006ad8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006adc:	d1f9      	bne.n	8006ad2 <memcpy+0xe>
 8006ade:	bd10      	pop	{r4, pc}

08006ae0 <_init>:
 8006ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae2:	bf00      	nop
 8006ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ae6:	bc08      	pop	{r3}
 8006ae8:	469e      	mov	lr, r3
 8006aea:	4770      	bx	lr

08006aec <_fini>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	bf00      	nop
 8006af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af2:	bc08      	pop	{r3}
 8006af4:	469e      	mov	lr, r3
 8006af6:	4770      	bx	lr
