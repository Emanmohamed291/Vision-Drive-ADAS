
servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e58  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005f68  08005f68  00006f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006024  08006024  00008028  2**0
                  CONTENTS
  4 .ARM          00000000  08006024  08006024  00008028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006024  08006024  00008028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006024  08006024  00007024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006028  08006028  00007028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  0800602c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a90  20000028  08006054  00008028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ab8  08006054  00008ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ed3  00000000  00000000  00008051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a63  00000000  00000000  0001ef24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  00022988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f63  00000000  00000000  00023d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019891  00000000  00000000  00024ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019fb8  00000000  00000000  0003e574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093b77  00000000  00000000  0005852c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec0a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005154  00000000  00000000  000ec0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000f123c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000028 	.word	0x20000028
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f50 	.word	0x08005f50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000002c 	.word	0x2000002c
 800014c:	08005f50 	.word	0x08005f50

08000150 <DCMotor_Start>:
/****************************/

/*APIs Implementation*/

DCMotorErrorStatus_t DCMotor_Start(uint32_t Copy_u32DCMotor)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 8000158:	2300      	movs	r3, #0
 800015a:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2b01      	cmp	r3, #1
 8000160:	d902      	bls.n	8000168 <DCMotor_Start+0x18>
    {
    	Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000162:	2301      	movs	r3, #1
 8000164:	73fb      	strb	r3, [r7, #15]
 8000166:	e05a      	b.n	800021e <DCMotor_Start+0xce>
    }
    else
    {
    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 8000168:	492f      	ldr	r1, [pc, #188]	@ (8000228 <DCMotor_Start+0xd8>)
 800016a:	687a      	ldr	r2, [r7, #4]
 800016c:	4613      	mov	r3, r2
 800016e:	009b      	lsls	r3, r3, #2
 8000170:	4413      	add	r3, r2
 8000172:	009b      	lsls	r3, r3, #2
 8000174:	440b      	add	r3, r1
 8000176:	3310      	adds	r3, #16
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	2b02      	cmp	r3, #2
 800017c:	d14d      	bne.n	800021a <DCMotor_Start+0xca>
    		case Timer_2:
    		    __HAL_TIM_SET_COMPARE(&htim2,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    			HAL_TIM_PWM_Start(&htim2, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		case Timer_3:
    		    __HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 800017e:	492a      	ldr	r1, [pc, #168]	@ (8000228 <DCMotor_Start+0xd8>)
 8000180:	687a      	ldr	r2, [r7, #4]
 8000182:	4613      	mov	r3, r2
 8000184:	009b      	lsls	r3, r3, #2
 8000186:	4413      	add	r3, r2
 8000188:	009b      	lsls	r3, r3, #2
 800018a:	440b      	add	r3, r1
 800018c:	3311      	adds	r3, #17
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d107      	bne.n	80001a4 <DCMotor_Start+0x54>
 8000194:	4b25      	ldr	r3, [pc, #148]	@ (800022c <DCMotor_Start+0xdc>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4925      	ldr	r1, [pc, #148]	@ (8000230 <DCMotor_Start+0xe0>)
 800019a:	687a      	ldr	r2, [r7, #4]
 800019c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80001a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80001a2:	e02c      	b.n	80001fe <DCMotor_Start+0xae>
 80001a4:	4920      	ldr	r1, [pc, #128]	@ (8000228 <DCMotor_Start+0xd8>)
 80001a6:	687a      	ldr	r2, [r7, #4]
 80001a8:	4613      	mov	r3, r2
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	4413      	add	r3, r2
 80001ae:	009b      	lsls	r3, r3, #2
 80001b0:	440b      	add	r3, r1
 80001b2:	3311      	adds	r3, #17
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	2b04      	cmp	r3, #4
 80001b8:	d107      	bne.n	80001ca <DCMotor_Start+0x7a>
 80001ba:	4b1c      	ldr	r3, [pc, #112]	@ (800022c <DCMotor_Start+0xdc>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	491c      	ldr	r1, [pc, #112]	@ (8000230 <DCMotor_Start+0xe0>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001c6:	6393      	str	r3, [r2, #56]	@ 0x38
 80001c8:	e019      	b.n	80001fe <DCMotor_Start+0xae>
 80001ca:	4917      	ldr	r1, [pc, #92]	@ (8000228 <DCMotor_Start+0xd8>)
 80001cc:	687a      	ldr	r2, [r7, #4]
 80001ce:	4613      	mov	r3, r2
 80001d0:	009b      	lsls	r3, r3, #2
 80001d2:	4413      	add	r3, r2
 80001d4:	009b      	lsls	r3, r3, #2
 80001d6:	440b      	add	r3, r1
 80001d8:	3311      	adds	r3, #17
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	2b08      	cmp	r3, #8
 80001de:	d107      	bne.n	80001f0 <DCMotor_Start+0xa0>
 80001e0:	4b12      	ldr	r3, [pc, #72]	@ (800022c <DCMotor_Start+0xdc>)
 80001e2:	681a      	ldr	r2, [r3, #0]
 80001e4:	4912      	ldr	r1, [pc, #72]	@ (8000230 <DCMotor_Start+0xe0>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ec:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80001ee:	e006      	b.n	80001fe <DCMotor_Start+0xae>
 80001f0:	4b0e      	ldr	r3, [pc, #56]	@ (800022c <DCMotor_Start+0xdc>)
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	490e      	ldr	r1, [pc, #56]	@ (8000230 <DCMotor_Start+0xe0>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fc:	6413      	str	r3, [r2, #64]	@ 0x40
    		    HAL_TIM_PWM_Start(&htim3, DCMotors[Copy_u32DCMotor].Enable_Channel);
 80001fe:	490a      	ldr	r1, [pc, #40]	@ (8000228 <DCMotor_Start+0xd8>)
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	4613      	mov	r3, r2
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	4413      	add	r3, r2
 8000208:	009b      	lsls	r3, r3, #2
 800020a:	440b      	add	r3, r1
 800020c:	3311      	adds	r3, #17
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	4619      	mov	r1, r3
 8000212:	4806      	ldr	r0, [pc, #24]	@ (800022c <DCMotor_Start+0xdc>)
 8000214:	f001 fea6 	bl	8001f64 <HAL_TIM_PWM_Start>
    		    break;
 8000218:	e001      	b.n	800021e <DCMotor_Start+0xce>
    		/*case Timer_4:
    		    __HAL_TIM_SET_COMPARE(&htim4,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    HAL_TIM_PWM_Start(&htim4, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 800021a:	2301      	movs	r3, #1
 800021c:	73fb      	strb	r3, [r7, #15]
    	}
    }
    return Ret_ErrorStatus;
 800021e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000220:	4618      	mov	r0, r3
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	08005fac 	.word	0x08005fac
 800022c:	200000dc 	.word	0x200000dc
 8000230:	20000000 	.word	0x20000000

08000234 <DCMotor_Stop>:



DCMotorErrorStatus_t DCMotor_Stop(uint32_t Copy_u32DCMotor)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 800023c:	2300      	movs	r3, #0
 800023e:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2b01      	cmp	r3, #1
 8000244:	d902      	bls.n	800024c <DCMotor_Stop+0x18>
    {
      	Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 8000246:	2301      	movs	r3, #1
 8000248:	73fb      	strb	r3, [r7, #15]
 800024a:	e01a      	b.n	8000282 <DCMotor_Stop+0x4e>
    }
    else
    {
    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 800024c:	490f      	ldr	r1, [pc, #60]	@ (800028c <DCMotor_Stop+0x58>)
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	4613      	mov	r3, r2
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	4413      	add	r3, r2
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	440b      	add	r3, r1
 800025a:	3310      	adds	r3, #16
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b02      	cmp	r3, #2
 8000260:	d10d      	bne.n	800027e <DCMotor_Stop+0x4a>
    			break;
    		case Timer_2:
    			HAL_TIM_PWM_Stop(&htim2, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		case Timer_3:
    			HAL_TIM_PWM_Stop(&htim3, DCMotors[Copy_u32DCMotor].Enable_Channel);
 8000262:	490a      	ldr	r1, [pc, #40]	@ (800028c <DCMotor_Stop+0x58>)
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	4613      	mov	r3, r2
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	4413      	add	r3, r2
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	440b      	add	r3, r1
 8000270:	3311      	adds	r3, #17
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	4619      	mov	r1, r3
 8000276:	4806      	ldr	r0, [pc, #24]	@ (8000290 <DCMotor_Stop+0x5c>)
 8000278:	f001 ff16 	bl	80020a8 <HAL_TIM_PWM_Stop>
    		    break;
 800027c:	e001      	b.n	8000282 <DCMotor_Stop+0x4e>
    		/*case Timer_4:
    			HAL_TIM_PWM_Stop(&htim4, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 800027e:	2301      	movs	r3, #1
 8000280:	73fb      	strb	r3, [r7, #15]
    	}

    }
    return Ret_ErrorStatus;
 8000282:	7bfb      	ldrb	r3, [r7, #15]
}
 8000284:	4618      	mov	r0, r3
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	08005fac 	.word	0x08005fac
 8000290:	200000dc 	.word	0x200000dc

08000294 <DCMotor_StartReverse>:
	    }
	    return Ret_ErrorStatus;
}

DCMotorErrorStatus_t DCMotor_StartReverse(uint32_t Copy_u32DCMotor)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 800029c:	2300      	movs	r3, #0
 800029e:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d902      	bls.n	80002ac <DCMotor_StartReverse+0x18>
    {
        Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 80002a6:	2301      	movs	r3, #1
 80002a8:	73fb      	strb	r3, [r7, #15]
 80002aa:	e087      	b.n	80003bc <DCMotor_StartReverse+0x128>
    }
    else
    {
    	HAL_GPIO_WritePin((GPIO_TypeDef *)DCMotors[Copy_u32DCMotor].Input_1.Port, DCMotors[Copy_u32DCMotor].Input_1.Pin, GPIO_PIN_RESET);
 80002ac:	4946      	ldr	r1, [pc, #280]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	4613      	mov	r3, r2
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	4413      	add	r3, r2
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	440b      	add	r3, r1
 80002ba:	3304      	adds	r3, #4
 80002bc:	6818      	ldr	r0, [r3, #0]
 80002be:	4942      	ldr	r1, [pc, #264]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	4613      	mov	r3, r2
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	4413      	add	r3, r2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	440b      	add	r3, r1
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	b29b      	uxth	r3, r3
 80002d0:	2200      	movs	r2, #0
 80002d2:	4619      	mov	r1, r3
 80002d4:	f001 f8f4 	bl	80014c0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin((GPIO_TypeDef *)DCMotors[Copy_u32DCMotor].Input_2.Port, DCMotors[Copy_u32DCMotor].Input_2.Pin, GPIO_PIN_SET);
 80002d8:	493b      	ldr	r1, [pc, #236]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	4613      	mov	r3, r2
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	4413      	add	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	440b      	add	r3, r1
 80002e6:	330c      	adds	r3, #12
 80002e8:	6818      	ldr	r0, [r3, #0]
 80002ea:	4937      	ldr	r1, [pc, #220]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	4613      	mov	r3, r2
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	4413      	add	r3, r2
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	440b      	add	r3, r1
 80002f8:	3308      	adds	r3, #8
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	2201      	movs	r2, #1
 8000300:	4619      	mov	r1, r3
 8000302:	f001 f8dd 	bl	80014c0 <HAL_GPIO_WritePin>


    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 8000306:	4930      	ldr	r1, [pc, #192]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	4613      	mov	r3, r2
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	4413      	add	r3, r2
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	440b      	add	r3, r1
 8000314:	3310      	adds	r3, #16
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b02      	cmp	r3, #2
 800031a:	d14d      	bne.n	80003b8 <DCMotor_StartReverse+0x124>
    		case Timer_2:
    		    __HAL_TIM_SET_COMPARE(&htim2,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    			HAL_TIM_PWM_Start(&htim2, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		case Timer_3:
    		    __HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 800031c:	492a      	ldr	r1, [pc, #168]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	4613      	mov	r3, r2
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	4413      	add	r3, r2
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	440b      	add	r3, r1
 800032a:	3311      	adds	r3, #17
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d107      	bne.n	8000342 <DCMotor_StartReverse+0xae>
 8000332:	4b26      	ldr	r3, [pc, #152]	@ (80003cc <DCMotor_StartReverse+0x138>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4926      	ldr	r1, [pc, #152]	@ (80003d0 <DCMotor_StartReverse+0x13c>)
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800033e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000340:	e02c      	b.n	800039c <DCMotor_StartReverse+0x108>
 8000342:	4921      	ldr	r1, [pc, #132]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	4613      	mov	r3, r2
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	4413      	add	r3, r2
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	440b      	add	r3, r1
 8000350:	3311      	adds	r3, #17
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b04      	cmp	r3, #4
 8000356:	d107      	bne.n	8000368 <DCMotor_StartReverse+0xd4>
 8000358:	4b1c      	ldr	r3, [pc, #112]	@ (80003cc <DCMotor_StartReverse+0x138>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	491c      	ldr	r1, [pc, #112]	@ (80003d0 <DCMotor_StartReverse+0x13c>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000364:	6393      	str	r3, [r2, #56]	@ 0x38
 8000366:	e019      	b.n	800039c <DCMotor_StartReverse+0x108>
 8000368:	4917      	ldr	r1, [pc, #92]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	4613      	mov	r3, r2
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	4413      	add	r3, r2
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	440b      	add	r3, r1
 8000376:	3311      	adds	r3, #17
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b08      	cmp	r3, #8
 800037c:	d107      	bne.n	800038e <DCMotor_StartReverse+0xfa>
 800037e:	4b13      	ldr	r3, [pc, #76]	@ (80003cc <DCMotor_StartReverse+0x138>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	4913      	ldr	r1, [pc, #76]	@ (80003d0 <DCMotor_StartReverse+0x13c>)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800038a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800038c:	e006      	b.n	800039c <DCMotor_StartReverse+0x108>
 800038e:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <DCMotor_StartReverse+0x138>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	490f      	ldr	r1, [pc, #60]	@ (80003d0 <DCMotor_StartReverse+0x13c>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800039a:	6413      	str	r3, [r2, #64]	@ 0x40
    		    HAL_TIM_PWM_Start(&htim3, DCMotors[Copy_u32DCMotor].Enable_Channel);
 800039c:	490a      	ldr	r1, [pc, #40]	@ (80003c8 <DCMotor_StartReverse+0x134>)
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	4613      	mov	r3, r2
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	4413      	add	r3, r2
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	440b      	add	r3, r1
 80003aa:	3311      	adds	r3, #17
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	4619      	mov	r1, r3
 80003b0:	4806      	ldr	r0, [pc, #24]	@ (80003cc <DCMotor_StartReverse+0x138>)
 80003b2:	f001 fdd7 	bl	8001f64 <HAL_TIM_PWM_Start>
    		    break;
 80003b6:	e001      	b.n	80003bc <DCMotor_StartReverse+0x128>
    		/*case Timer_4:
    		    __HAL_TIM_SET_COMPARE(&htim4,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    HAL_TIM_PWM_Start(&htim4, DCMotors[Copy_u32DCMotor].Enable_Channel);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 80003b8:	2301      	movs	r3, #1
 80003ba:	73fb      	strb	r3, [r7, #15]
    	}

    }
    return Ret_ErrorStatus;
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3710      	adds	r7, #16
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	08005fac 	.word	0x08005fac
 80003cc:	200000dc 	.word	0x200000dc
 80003d0:	20000000 	.word	0x20000000

080003d4 <DCMotor_SetSpeed>:


DCMotorErrorStatus_t DCMotor_SetSpeed(uint32_t Copy_u32DCMotor, uint32_t Copy_u32SpeedPercentage)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
    DCMotorErrorStatus_t Ret_ErrorStatus = DCM_ErrorStatus_OK;
 80003de:	2300      	movs	r3, #0
 80003e0:	73fb      	strb	r3, [r7, #15]
    if(IS_VALID_MOTOR(Copy_u32DCMotor) == 0)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d902      	bls.n	80003ee <DCMotor_SetSpeed+0x1a>
    {
        Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 80003e8:	2301      	movs	r3, #1
 80003ea:	73fb      	strb	r3, [r7, #15]
 80003ec:	e05a      	b.n	80004a4 <DCMotor_SetSpeed+0xd0>
    }
    else
    {
    	switch (DCMotors[Copy_u32DCMotor].Enable_Timer)
 80003ee:	4930      	ldr	r1, [pc, #192]	@ (80004b0 <DCMotor_SetSpeed+0xdc>)
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	4613      	mov	r3, r2
 80003f4:	009b      	lsls	r3, r3, #2
 80003f6:	4413      	add	r3, r2
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	440b      	add	r3, r1
 80003fc:	3310      	adds	r3, #16
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b02      	cmp	r3, #2
 8000402:	d14d      	bne.n	80004a0 <DCMotor_SetSpeed+0xcc>
    		case Timer_2:
    			Motor_Speed[Copy_u32DCMotor] = (MAX_SPEED*Copy_u32SpeedPercentage)/100;
    			__HAL_TIM_SET_COMPARE(&htim2,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    break;*/
    		case Timer_3:
    			Motor_Speed[Copy_u32DCMotor] = (MAX_SPEED*Copy_u32SpeedPercentage)/100;
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	f242 7210 	movw	r2, #10000	@ 0x2710
 800040a:	fb02 f303 	mul.w	r3, r2, r3
 800040e:	4a29      	ldr	r2, [pc, #164]	@ (80004b4 <DCMotor_SetSpeed+0xe0>)
 8000410:	fba2 2303 	umull	r2, r3, r2, r3
 8000414:	095a      	lsrs	r2, r3, #5
 8000416:	4928      	ldr	r1, [pc, #160]	@ (80004b8 <DCMotor_SetSpeed+0xe4>)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 800041e:	4924      	ldr	r1, [pc, #144]	@ (80004b0 <DCMotor_SetSpeed+0xdc>)
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	4613      	mov	r3, r2
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	440b      	add	r3, r1
 800042c:	3311      	adds	r3, #17
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d107      	bne.n	8000444 <DCMotor_SetSpeed+0x70>
 8000434:	4b21      	ldr	r3, [pc, #132]	@ (80004bc <DCMotor_SetSpeed+0xe8>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	491f      	ldr	r1, [pc, #124]	@ (80004b8 <DCMotor_SetSpeed+0xe4>)
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000440:	635a      	str	r2, [r3, #52]	@ 0x34
    		    break;
 8000442:	e02f      	b.n	80004a4 <DCMotor_SetSpeed+0xd0>
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 8000444:	491a      	ldr	r1, [pc, #104]	@ (80004b0 <DCMotor_SetSpeed+0xdc>)
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	4613      	mov	r3, r2
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	4413      	add	r3, r2
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	440b      	add	r3, r1
 8000452:	3311      	adds	r3, #17
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b04      	cmp	r3, #4
 8000458:	d107      	bne.n	800046a <DCMotor_SetSpeed+0x96>
 800045a:	4b18      	ldr	r3, [pc, #96]	@ (80004bc <DCMotor_SetSpeed+0xe8>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	4916      	ldr	r1, [pc, #88]	@ (80004b8 <DCMotor_SetSpeed+0xe4>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000466:	6393      	str	r3, [r2, #56]	@ 0x38
    		    break;
 8000468:	e01c      	b.n	80004a4 <DCMotor_SetSpeed+0xd0>
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 800046a:	4911      	ldr	r1, [pc, #68]	@ (80004b0 <DCMotor_SetSpeed+0xdc>)
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	4613      	mov	r3, r2
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	4413      	add	r3, r2
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	440b      	add	r3, r1
 8000478:	3311      	adds	r3, #17
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b08      	cmp	r3, #8
 800047e:	d107      	bne.n	8000490 <DCMotor_SetSpeed+0xbc>
 8000480:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <DCMotor_SetSpeed+0xe8>)
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	490c      	ldr	r1, [pc, #48]	@ (80004b8 <DCMotor_SetSpeed+0xe4>)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800048c:	63d3      	str	r3, [r2, #60]	@ 0x3c
    		    break;
 800048e:	e009      	b.n	80004a4 <DCMotor_SetSpeed+0xd0>
    			__HAL_TIM_SET_COMPARE(&htim3,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
 8000490:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <DCMotor_SetSpeed+0xe8>)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	4908      	ldr	r1, [pc, #32]	@ (80004b8 <DCMotor_SetSpeed+0xe4>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800049c:	6413      	str	r3, [r2, #64]	@ 0x40
    		    break;
 800049e:	e001      	b.n	80004a4 <DCMotor_SetSpeed+0xd0>
    		/*case Timer_4:
    			Motor_Speed[Copy_u32DCMotor] = (MAX_SPEED*Copy_u32SpeedPercentage)/100;
    			__HAL_TIM_SET_COMPARE(&htim4,DCMotors[Copy_u32DCMotor].Enable_Channel, Motor_Speed[Copy_u32DCMotor]);
    		    break;*/
    		default:
    			Ret_ErrorStatus = DCM_ErrorStatus_NotOK;
 80004a0:	2301      	movs	r3, #1
 80004a2:	73fb      	strb	r3, [r7, #15]
    	}

    }
    return Ret_ErrorStatus;
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	08005fac 	.word	0x08005fac
 80004b4:	51eb851f 	.word	0x51eb851f
 80004b8:	20000000 	.word	0x20000000
 80004bc:	200000dc 	.word	0x200000dc

080004c0 <BL_ReadByteSync>:
#include "HAL/bluetooth.h"

volatile uint8_t Data[1] = {0};

uint8_t BL_ReadByteSync()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, Data, 1, 2);
 80004ca:	2302      	movs	r3, #2
 80004cc:	2201      	movs	r2, #1
 80004ce:	4914      	ldr	r1, [pc, #80]	@ (8000520 <BL_ReadByteSync+0x60>)
 80004d0:	4814      	ldr	r0, [pc, #80]	@ (8000524 <BL_ReadByteSync+0x64>)
 80004d2:	f002 fe61 	bl	8003198 <HAL_UART_Receive>
 80004d6:	4603      	mov	r3, r0
 80004d8:	71bb      	strb	r3, [r7, #6]
	    if (status == HAL_OK) {
 80004da:	79bb      	ldrb	r3, [r7, #6]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d102      	bne.n	80004e6 <BL_ReadByteSync+0x26>
	        temp = Data[0];
 80004e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <BL_ReadByteSync+0x60>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	71fb      	strb	r3, [r7, #7]
	    }

	if(temp == 'F')
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	2b46      	cmp	r3, #70	@ 0x46
 80004ea:	d105      	bne.n	80004f8 <BL_ReadByteSync+0x38>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004f2:	480d      	ldr	r0, [pc, #52]	@ (8000528 <BL_ReadByteSync+0x68>)
 80004f4:	f000 ffe4 	bl	80014c0 <HAL_GPIO_WritePin>
	}

	if(Data[0] == 'B')
 80004f8:	4b09      	ldr	r3, [pc, #36]	@ (8000520 <BL_ReadByteSync+0x60>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	2b42      	cmp	r3, #66	@ 0x42
 8000500:	d105      	bne.n	800050e <BL_ReadByteSync+0x4e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000508:	4807      	ldr	r0, [pc, #28]	@ (8000528 <BL_ReadByteSync+0x68>)
 800050a:	f000 ffd9 	bl	80014c0 <HAL_GPIO_WritePin>
	}

	Data[0] = 0;
 800050e:	4b04      	ldr	r3, [pc, #16]	@ (8000520 <BL_ReadByteSync+0x60>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
	return temp;
 8000514:	79fb      	ldrb	r3, [r7, #7]
}
 8000516:	4618      	mov	r0, r3
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000044 	.word	0x20000044
 8000524:	20000124 	.word	0x20000124
 8000528:	40011000 	.word	0x40011000

0800052c <get_data_task>:


struct CarState CarInfo = {0, forward, 0, idle};

void get_data_task(void * pvParameters)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	//uint8_t Data = 0;
	while(1)
	{
		CarInfo.DriverInput = BL_ReadByteSync();
 8000534:	f7ff ffc4 	bl	80004c0 <BL_ReadByteSync>
 8000538:	4603      	mov	r3, r0
 800053a:	461a      	mov	r2, r3
 800053c:	4b03      	ldr	r3, [pc, #12]	@ (800054c <get_data_task+0x20>)
 800053e:	701a      	strb	r2, [r3, #0]
		//HAL_USART_Receive(&husart1, &Data, 1, 1);
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		vTaskDelay(pdMS_TO_TICKS(10));
 8000540:	200a      	movs	r0, #10
 8000542:	f004 f869 	bl	8004618 <vTaskDelay>
		CarInfo.DriverInput = BL_ReadByteSync();
 8000546:	bf00      	nop
 8000548:	e7f4      	b.n	8000534 <get_data_task+0x8>
 800054a:	bf00      	nop
 800054c:	20000008 	.word	0x20000008

08000550 <drive_task>:
	}
}

void drive_task(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
	int steer_counter = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]

	//DCMotorInit();
	//DCMotor_Start(DRIVING_MOTOR);
	DCMotor_SetSpeed(STEERING_MOTOR, 50);
 800055a:	2132      	movs	r1, #50	@ 0x32
 800055c:	2001      	movs	r0, #1
 800055e:	f7ff ff39 	bl	80003d4 <DCMotor_SetSpeed>

	while(1)
	{
		switch(CarInfo.DriverInput)
 8000562:	4b6f      	ldr	r3, [pc, #444]	@ (8000720 <drive_task+0x1d0>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2bff      	cmp	r3, #255	@ 0xff
 8000568:	d075      	beq.n	8000656 <drive_task+0x106>
 800056a:	2bff      	cmp	r3, #255	@ 0xff
 800056c:	f300 80d0 	bgt.w	8000710 <drive_task+0x1c0>
 8000570:	2b39      	cmp	r3, #57	@ 0x39
 8000572:	dc6b      	bgt.n	800064c <drive_task+0xfc>
 8000574:	2b30      	cmp	r3, #48	@ 0x30
 8000576:	f280 80b2 	bge.w	80006de <drive_task+0x18e>
			DCMotor_Stop(DRIVING_MOTOR);
			DCMotor_Stop(STEERING_MOTOR);
			CarInfo.DriverInput=idle;
			break;

		default: break;
 800057a:	e0c9      	b.n	8000710 <drive_task+0x1c0>
		switch(CarInfo.DriverInput)
 800057c:	3b42      	subs	r3, #66	@ 0x42
 800057e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000580:	f200 80c6 	bhi.w	8000710 <drive_task+0x1c0>
 8000584:	a201      	add	r2, pc, #4	@ (adr r2, 800058c <drive_task+0x3c>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	0800068d 	.word	0x0800068d
 8000590:	08000711 	.word	0x08000711
 8000594:	08000711 	.word	0x08000711
 8000598:	08000711 	.word	0x08000711
 800059c:	08000669 	.word	0x08000669
 80005a0:	08000711 	.word	0x08000711
 80005a4:	08000711 	.word	0x08000711
 80005a8:	08000711 	.word	0x08000711
 80005ac:	08000711 	.word	0x08000711
 80005b0:	08000711 	.word	0x08000711
 80005b4:	080006c5 	.word	0x080006c5
 80005b8:	08000711 	.word	0x08000711
 80005bc:	08000711 	.word	0x08000711
 80005c0:	08000711 	.word	0x08000711
 80005c4:	08000711 	.word	0x08000711
 80005c8:	08000711 	.word	0x08000711
 80005cc:	080006b1 	.word	0x080006b1
 80005d0:	080006fd 	.word	0x080006fd
 80005d4:	08000711 	.word	0x08000711
 80005d8:	08000711 	.word	0x08000711
 80005dc:	08000711 	.word	0x08000711
 80005e0:	08000711 	.word	0x08000711
 80005e4:	08000711 	.word	0x08000711
 80005e8:	08000711 	.word	0x08000711
 80005ec:	08000711 	.word	0x08000711
 80005f0:	08000711 	.word	0x08000711
 80005f4:	08000711 	.word	0x08000711
 80005f8:	08000711 	.word	0x08000711
 80005fc:	08000711 	.word	0x08000711
 8000600:	08000711 	.word	0x08000711
 8000604:	08000711 	.word	0x08000711
 8000608:	08000711 	.word	0x08000711
 800060c:	08000711 	.word	0x08000711
 8000610:	08000711 	.word	0x08000711
 8000614:	08000711 	.word	0x08000711
 8000618:	08000711 	.word	0x08000711
 800061c:	08000711 	.word	0x08000711
 8000620:	08000711 	.word	0x08000711
 8000624:	08000711 	.word	0x08000711
 8000628:	08000711 	.word	0x08000711
 800062c:	08000711 	.word	0x08000711
 8000630:	08000711 	.word	0x08000711
 8000634:	08000711 	.word	0x08000711
 8000638:	08000711 	.word	0x08000711
 800063c:	08000711 	.word	0x08000711
 8000640:	08000711 	.word	0x08000711
 8000644:	08000711 	.word	0x08000711
 8000648:	080006d9 	.word	0x080006d9
 800064c:	2b71      	cmp	r3, #113	@ 0x71
 800064e:	dc5f      	bgt.n	8000710 <drive_task+0x1c0>
 8000650:	2b42      	cmp	r3, #66	@ 0x42
 8000652:	da93      	bge.n	800057c <drive_task+0x2c>
		default: break;
 8000654:	e05c      	b.n	8000710 <drive_task+0x1c0>
			if(steer_counter > 0)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	dd5b      	ble.n	8000714 <drive_task+0x1c4>
				steer_counter = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
				DCMotor_Stop(STEERING_MOTOR);
 8000660:	2001      	movs	r0, #1
 8000662:	f7ff fde7 	bl	8000234 <DCMotor_Stop>
			break;
 8000666:	e055      	b.n	8000714 <drive_task+0x1c4>
			if((CarInfo.last_state == steer_right) || (CarInfo.last_state == steer_left))
 8000668:	4b2d      	ldr	r3, [pc, #180]	@ (8000720 <drive_task+0x1d0>)
 800066a:	7b1b      	ldrb	r3, [r3, #12]
 800066c:	2b52      	cmp	r3, #82	@ 0x52
 800066e:	d003      	beq.n	8000678 <drive_task+0x128>
 8000670:	4b2b      	ldr	r3, [pc, #172]	@ (8000720 <drive_task+0x1d0>)
 8000672:	7b1b      	ldrb	r3, [r3, #12]
 8000674:	2b4c      	cmp	r3, #76	@ 0x4c
 8000676:	d102      	bne.n	800067e <drive_task+0x12e>
				DCMotor_Stop(STEERING_MOTOR);
 8000678:	2001      	movs	r0, #1
 800067a:	f7ff fddb 	bl	8000234 <DCMotor_Stop>
			DCMotor_Start(DRIVING_MOTOR);
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff fd66 	bl	8000150 <DCMotor_Start>
			CarInfo.DriverInput = idle;
 8000684:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <drive_task+0x1d0>)
 8000686:	22ff      	movs	r2, #255	@ 0xff
 8000688:	701a      	strb	r2, [r3, #0]
			break;
 800068a:	e044      	b.n	8000716 <drive_task+0x1c6>
			if((CarInfo.last_state == steer_right) || (CarInfo.last_state == steer_left))
 800068c:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <drive_task+0x1d0>)
 800068e:	7b1b      	ldrb	r3, [r3, #12]
 8000690:	2b52      	cmp	r3, #82	@ 0x52
 8000692:	d003      	beq.n	800069c <drive_task+0x14c>
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <drive_task+0x1d0>)
 8000696:	7b1b      	ldrb	r3, [r3, #12]
 8000698:	2b4c      	cmp	r3, #76	@ 0x4c
 800069a:	d102      	bne.n	80006a2 <drive_task+0x152>
				DCMotor_Stop(STEERING_MOTOR);
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff fdc9 	bl	8000234 <DCMotor_Stop>
			DCMotor_StartReverse(DRIVING_MOTOR);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff fdf6 	bl	8000294 <DCMotor_StartReverse>
			CarInfo.DriverInput = idle;
 80006a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <drive_task+0x1d0>)
 80006aa:	22ff      	movs	r2, #255	@ 0xff
 80006ac:	701a      	strb	r2, [r3, #0]
			break;
 80006ae:	e032      	b.n	8000716 <drive_task+0x1c6>
			DCMotor_StartReverse(STEERING_MOTOR);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f7ff fdef 	bl	8000294 <DCMotor_StartReverse>
			steer_counter++;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3301      	adds	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
			CarInfo.DriverInput=idle;
 80006bc:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <drive_task+0x1d0>)
 80006be:	22ff      	movs	r2, #255	@ 0xff
 80006c0:	701a      	strb	r2, [r3, #0]
			break;
 80006c2:	e028      	b.n	8000716 <drive_task+0x1c6>
			DCMotor_Start(STEERING_MOTOR);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff fd43 	bl	8000150 <DCMotor_Start>
			steer_counter++;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3301      	adds	r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
			CarInfo.DriverInput=idle;
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <drive_task+0x1d0>)
 80006d2:	22ff      	movs	r2, #255	@ 0xff
 80006d4:	701a      	strb	r2, [r3, #0]
			break;
 80006d6:	e01e      	b.n	8000716 <drive_task+0x1c6>
		case speed_100: CarInfo.DriverInput = 100;
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <drive_task+0x1d0>)
 80006da:	2264      	movs	r2, #100	@ 0x64
 80006dc:	701a      	strb	r2, [r3, #0]
			DCMotor_SetSpeed(DRIVING_MOTOR, CarInfo.DriverInput);
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <drive_task+0x1d0>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	4619      	mov	r1, r3
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff fe75 	bl	80003d4 <DCMotor_SetSpeed>
			CarInfo.speed = CarInfo.DriverInput;
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <drive_task+0x1d0>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <drive_task+0x1d0>)
 80006f2:	609a      	str	r2, [r3, #8]
			CarInfo.DriverInput=idle;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <drive_task+0x1d0>)
 80006f6:	22ff      	movs	r2, #255	@ 0xff
 80006f8:	701a      	strb	r2, [r3, #0]
			break;
 80006fa:	e00c      	b.n	8000716 <drive_task+0x1c6>
			DCMotor_Stop(DRIVING_MOTOR);
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff fd99 	bl	8000234 <DCMotor_Stop>
			DCMotor_Stop(STEERING_MOTOR);
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff fd96 	bl	8000234 <DCMotor_Stop>
			CarInfo.DriverInput=idle;
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <drive_task+0x1d0>)
 800070a:	22ff      	movs	r2, #255	@ 0xff
 800070c:	701a      	strb	r2, [r3, #0]
			break;
 800070e:	e002      	b.n	8000716 <drive_task+0x1c6>
		default: break;
 8000710:	bf00      	nop
 8000712:	e000      	b.n	8000716 <drive_task+0x1c6>
			break;
 8000714:	bf00      	nop
		}

		vTaskDelay(pdMS_TO_TICKS(2));
 8000716:	2002      	movs	r0, #2
 8000718:	f003 ff7e 	bl	8004618 <vTaskDelay>
		switch(CarInfo.DriverInput)
 800071c:	e721      	b.n	8000562 <drive_task+0x12>
 800071e:	bf00      	nop
 8000720:	20000008 	.word	0x20000008

08000724 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000728:	4a04      	ldr	r2, [pc, #16]	@ (800073c <MX_FREERTOS_Init+0x18>)
 800072a:	2100      	movs	r1, #0
 800072c:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_FREERTOS_Init+0x1c>)
 800072e:	f002 ff27 	bl	8003580 <osThreadNew>
 8000732:	4603      	mov	r3, r0
 8000734:	4a03      	ldr	r2, [pc, #12]	@ (8000744 <MX_FREERTOS_Init+0x20>)
 8000736:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	08005fd4 	.word	0x08005fd4
 8000740:	08000749 	.word	0x08000749
 8000744:	20000048 	.word	0x20000048

08000748 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f002 ffbf 	bl	80036d4 <osDelay>
 8000756:	e7fb      	b.n	8000750 <StartDefaultTask+0x8>

08000758 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076c:	4b32      	ldr	r3, [pc, #200]	@ (8000838 <MX_GPIO_Init+0xe0>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a31      	ldr	r2, [pc, #196]	@ (8000838 <MX_GPIO_Init+0xe0>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b2f      	ldr	r3, [pc, #188]	@ (8000838 <MX_GPIO_Init+0xe0>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0310 	and.w	r3, r3, #16
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000784:	4b2c      	ldr	r3, [pc, #176]	@ (8000838 <MX_GPIO_Init+0xe0>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a2b      	ldr	r2, [pc, #172]	@ (8000838 <MX_GPIO_Init+0xe0>)
 800078a:	f043 0304 	orr.w	r3, r3, #4
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <MX_GPIO_Init+0xe0>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079c:	4b26      	ldr	r3, [pc, #152]	@ (8000838 <MX_GPIO_Init+0xe0>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a25      	ldr	r2, [pc, #148]	@ (8000838 <MX_GPIO_Init+0xe0>)
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b23      	ldr	r3, [pc, #140]	@ (8000838 <MX_GPIO_Init+0xe0>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0308 	and.w	r3, r3, #8
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ba:	4820      	ldr	r0, [pc, #128]	@ (800083c <MX_GPIO_Init+0xe4>)
 80007bc:	f000 fe80 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	211e      	movs	r1, #30
 80007c4:	481e      	ldr	r0, [pc, #120]	@ (8000840 <MX_GPIO_Init+0xe8>)
 80007c6:	f000 fe7b 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Trigger1_Pin|Trigger2_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80007d0:	481c      	ldr	r0, [pc, #112]	@ (8000844 <MX_GPIO_Init+0xec>)
 80007d2:	f000 fe75 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	4813      	ldr	r0, [pc, #76]	@ (800083c <MX_GPIO_Init+0xe4>)
 80007f0:	f000 fce2 	bl	80011b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80007f4:	231e      	movs	r3, #30
 80007f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2302      	movs	r3, #2
 8000802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	4619      	mov	r1, r3
 800080a:	480d      	ldr	r0, [pc, #52]	@ (8000840 <MX_GPIO_Init+0xe8>)
 800080c:	f000 fcd4 	bl	80011b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Trigger1_Pin|Trigger2_Pin;
 8000810:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2302      	movs	r3, #2
 8000820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	4619      	mov	r1, r3
 8000828:	4806      	ldr	r0, [pc, #24]	@ (8000844 <MX_GPIO_Init+0xec>)
 800082a:	f000 fcc5 	bl	80011b8 <HAL_GPIO_Init>

}
 800082e:	bf00      	nop
 8000830:	3720      	adds	r7, #32
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000
 800083c:	40011000 	.word	0x40011000
 8000840:	40010800 	.word	0x40010800
 8000844:	40010c00 	.word	0x40010c00

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084e:	f000 fba1 	bl	8000f94 <HAL_Init>

  /* USER CODE BEGIN Init */
  xTaskCreate(drive_task, "Driving Task", 100, ( void * ) 1, 3, NULL);
 8000852:	2300      	movs	r3, #0
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	2303      	movs	r3, #3
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	2264      	movs	r2, #100	@ 0x64
 800085e:	491f      	ldr	r1, [pc, #124]	@ (80008dc <main+0x94>)
 8000860:	481f      	ldr	r0, [pc, #124]	@ (80008e0 <main+0x98>)
 8000862:	f003 fd9c 	bl	800439e <xTaskCreate>
  xTaskCreate(get_data_task, "Bluetooth Task", 100, ( void * ) 1, 2, NULL);
 8000866:	2300      	movs	r3, #0
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	2302      	movs	r3, #2
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2301      	movs	r3, #1
 8000870:	2264      	movs	r2, #100	@ 0x64
 8000872:	491c      	ldr	r1, [pc, #112]	@ (80008e4 <main+0x9c>)
 8000874:	481c      	ldr	r0, [pc, #112]	@ (80008e8 <main+0xa0>)
 8000876:	f003 fd92 	bl	800439e <xTaskCreate>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087a:	f000 f837 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087e:	f7ff ff6b 	bl	8000758 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000882:	f000 faeb 	bl	8000e5c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000886:	f000 f9b7 	bl	8000bf8 <MX_TIM3_Init>
  MX_TIM2_Init();
 800088a:	f000 f957 	bl	8000b3c <MX_TIM2_Init>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800088e:	f002 fe11 	bl	80034b4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000892:	f7ff ff47 	bl	8000724 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000896:	f002 fe3f 	bl	8003518 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TIM2->CCR2 = 5000;
 800089a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800089e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80008a2:	639a      	str	r2, [r3, #56]	@ 0x38
	  for(int i=0; i<30000; i++);
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	e002      	b.n	80008b0 <main+0x68>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3301      	adds	r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80008b6:	4293      	cmp	r3, r2
 80008b8:	ddf7      	ble.n	80008aa <main+0x62>
	  TIM2->CCR2 = 10000;
 80008ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80008c2:	639a      	str	r2, [r3, #56]	@ 0x38
	  for(int i=0; i<30000; i++);
 80008c4:	2300      	movs	r3, #0
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	e002      	b.n	80008d0 <main+0x88>
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80008d6:	4293      	cmp	r3, r2
 80008d8:	ddf7      	ble.n	80008ca <main+0x82>
	  TIM2->CCR2 = 5000;
 80008da:	e7de      	b.n	800089a <main+0x52>
 80008dc:	08005f74 	.word	0x08005f74
 80008e0:	08000551 	.word	0x08000551
 80008e4:	08005f84 	.word	0x08005f84
 80008e8:	0800052d 	.word	0x0800052d

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b090      	sub	sp, #64	@ 0x40
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0318 	add.w	r3, r7, #24
 80008f6:	2228      	movs	r2, #40	@ 0x28
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f005 faee 	bl	8005edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090e:	2302      	movs	r3, #2
 8000910:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000912:	2301      	movs	r3, #1
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000916:	2310      	movs	r3, #16
 8000918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800091a:	2300      	movs	r3, #0
 800091c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091e:	f107 0318 	add.w	r3, r7, #24
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fde4 	bl	80014f0 <HAL_RCC_OscConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800092e:	f000 f82b 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	230f      	movs	r3, #15
 8000934:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f001 f852 	bl	80019f4 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000956:	f000 f817 	bl	8000988 <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3740      	adds	r7, #64	@ 0x40
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a04      	ldr	r2, [pc, #16]	@ (8000984 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d101      	bne.n	800097a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000976:	f000 fb23 	bl	8000fc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40012c00 	.word	0x40012c00

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <Error_Handler+0x8>

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800099a:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <HAL_MspInit+0x68>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a17      	ldr	r2, [pc, #92]	@ (80009fc <HAL_MspInit+0x68>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <HAL_MspInit+0x68>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <HAL_MspInit+0x68>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a11      	ldr	r2, [pc, #68]	@ (80009fc <HAL_MspInit+0x68>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <HAL_MspInit+0x68>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	210f      	movs	r1, #15
 80009ce:	f06f 0001 	mvn.w	r0, #1
 80009d2:	f000 fbc6 	bl	8001162 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <HAL_MspInit+0x6c>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <HAL_MspInit+0x6c>)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40010000 	.word	0x40010000

08000a04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	@ 0x30
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a14:	2300      	movs	r3, #0
 8000a16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad4 <HAL_InitTick+0xd0>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ad4 <HAL_InitTick+0xd0>)
 8000a20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a24:	6193      	str	r3, [r2, #24]
 8000a26:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad4 <HAL_InitTick+0xd0>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a32:	f107 020c 	add.w	r2, r7, #12
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 f949 	bl	8001cd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a42:	f001 f933 	bl	8001cac <HAL_RCC_GetPCLK2Freq>
 8000a46:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a4a:	4a23      	ldr	r2, [pc, #140]	@ (8000ad8 <HAL_InitTick+0xd4>)
 8000a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a50:	0c9b      	lsrs	r3, r3, #18
 8000a52:	3b01      	subs	r3, #1
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a56:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a58:	4a21      	ldr	r2, [pc, #132]	@ (8000ae0 <HAL_InitTick+0xdc>)
 8000a5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a62:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a64:	4a1d      	ldr	r2, [pc, #116]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a68:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a7c:	4817      	ldr	r0, [pc, #92]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a7e:	f001 f977 	bl	8001d70 <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d11b      	bne.n	8000ac8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a90:	4812      	ldr	r0, [pc, #72]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a92:	f001 f9bd 	bl	8001e10 <HAL_TIM_Base_Start_IT>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d111      	bne.n	8000ac8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000aa4:	2019      	movs	r0, #25
 8000aa6:	f000 fb78 	bl	800119a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d808      	bhi.n	8000ac2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2019      	movs	r0, #25
 8000ab6:	f000 fb54 	bl	8001162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_InitTick+0xe0>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	e002      	b.n	8000ac8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ac8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3730      	adds	r7, #48	@ 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	2000004c 	.word	0x2000004c
 8000ae0:	40012c00 	.word	0x40012c00
 8000ae4:	2000001c 	.word	0x2000001c

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b20:	4802      	ldr	r0, [pc, #8]	@ (8000b2c <TIM1_UP_IRQHandler+0x10>)
 8000b22:	f001 fb74 	bl	800220e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000004c 	.word	0x2000004c

08000b30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b58:	4b26      	ldr	r3, [pc, #152]	@ (8000bf4 <MX_TIM2_Init+0xb8>)
 8000b5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000b60:	4b24      	ldr	r3, [pc, #144]	@ (8000bf4 <MX_TIM2_Init+0xb8>)
 8000b62:	2207      	movs	r2, #7
 8000b64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b23      	ldr	r3, [pc, #140]	@ (8000bf4 <MX_TIM2_Init+0xb8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000b6c:	4b21      	ldr	r3, [pc, #132]	@ (8000bf4 <MX_TIM2_Init+0xb8>)
 8000b6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b74:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf4 <MX_TIM2_Init+0xb8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <MX_TIM2_Init+0xb8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000b80:	481c      	ldr	r0, [pc, #112]	@ (8000bf4 <MX_TIM2_Init+0xb8>)
 8000b82:	f001 faf5 	bl	8002170 <HAL_TIM_IC_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b8c:	f7ff fefc 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4815      	ldr	r0, [pc, #84]	@ (8000bf4 <MX_TIM2_Init+0xb8>)
 8000ba0:	f002 fa3a 	bl	8003018 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000baa:	f7ff feed 	bl	8000988 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480b      	ldr	r0, [pc, #44]	@ (8000bf4 <MX_TIM2_Init+0xb8>)
 8000bc6:	f001 fc2a 	bl	800241e <HAL_TIM_IC_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000bd0:	f7ff feda 	bl	8000988 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	@ (8000bf4 <MX_TIM2_Init+0xb8>)
 8000bdc:	f001 fc1f 	bl	800241e <HAL_TIM_IC_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000be6:	f7ff fecf 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000094 	.word	0x20000094

08000bf8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	@ 0x38
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0c:	f107 0320 	add.w	r3, r7, #32
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
 8000c24:	615a      	str	r2, [r3, #20]
 8000c26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c28:	4b2c      	ldr	r3, [pc, #176]	@ (8000cdc <MX_TIM3_Init+0xe4>)
 8000c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ce0 <MX_TIM3_Init+0xe8>)
 8000c2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cdc <MX_TIM3_Init+0xe4>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <MX_TIM3_Init+0xe4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000c3a:	4b28      	ldr	r3, [pc, #160]	@ (8000cdc <MX_TIM3_Init+0xe4>)
 8000c3c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000c40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c42:	4b26      	ldr	r3, [pc, #152]	@ (8000cdc <MX_TIM3_Init+0xe4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b24      	ldr	r3, [pc, #144]	@ (8000cdc <MX_TIM3_Init+0xe4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c4e:	4823      	ldr	r0, [pc, #140]	@ (8000cdc <MX_TIM3_Init+0xe4>)
 8000c50:	f001 f88e 	bl	8001d70 <HAL_TIM_Base_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c5a:	f7ff fe95 	bl	8000988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	481c      	ldr	r0, [pc, #112]	@ (8000cdc <MX_TIM3_Init+0xe4>)
 8000c6c:	f001 fd36 	bl	80026dc <HAL_TIM_ConfigClockSource>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c76:	f7ff fe87 	bl	8000988 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c7a:	4818      	ldr	r0, [pc, #96]	@ (8000cdc <MX_TIM3_Init+0xe4>)
 8000c7c:	f001 f91a 	bl	8001eb4 <HAL_TIM_PWM_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c86:	f7ff fe7f 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c92:	f107 0320 	add.w	r3, r7, #32
 8000c96:	4619      	mov	r1, r3
 8000c98:	4810      	ldr	r0, [pc, #64]	@ (8000cdc <MX_TIM3_Init+0xe4>)
 8000c9a:	f002 f9bd 	bl	8003018 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ca4:	f7ff fe70 	bl	8000988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca8:	2360      	movs	r3, #96	@ 0x60
 8000caa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4807      	ldr	r0, [pc, #28]	@ (8000cdc <MX_TIM3_Init+0xe4>)
 8000cc0:	f001 fc4a 	bl	8002558 <HAL_TIM_PWM_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000cca:	f7ff fe5d 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cce:	4803      	ldr	r0, [pc, #12]	@ (8000cdc <MX_TIM3_Init+0xe4>)
 8000cd0:	f000 f892 	bl	8000df8 <HAL_TIM_MspPostInit>

}
 8000cd4:	bf00      	nop
 8000cd6:	3738      	adds	r7, #56	@ 0x38
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200000dc 	.word	0x200000dc
 8000ce0:	40000400 	.word	0x40000400

08000ce4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	@ 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM2)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d02:	d14e      	bne.n	8000da2 <HAL_TIM_IC_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d04:	4b29      	ldr	r3, [pc, #164]	@ (8000dac <HAL_TIM_IC_MspInit+0xc8>)
 8000d06:	69db      	ldr	r3, [r3, #28]
 8000d08:	4a28      	ldr	r2, [pc, #160]	@ (8000dac <HAL_TIM_IC_MspInit+0xc8>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	61d3      	str	r3, [r2, #28]
 8000d10:	4b26      	ldr	r3, [pc, #152]	@ (8000dac <HAL_TIM_IC_MspInit+0xc8>)
 8000d12:	69db      	ldr	r3, [r3, #28]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b23      	ldr	r3, [pc, #140]	@ (8000dac <HAL_TIM_IC_MspInit+0xc8>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a22      	ldr	r2, [pc, #136]	@ (8000dac <HAL_TIM_IC_MspInit+0xc8>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b20      	ldr	r3, [pc, #128]	@ (8000dac <HAL_TIM_IC_MspInit+0xc8>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <HAL_TIM_IC_MspInit+0xc8>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a1c      	ldr	r2, [pc, #112]	@ (8000dac <HAL_TIM_IC_MspInit+0xc8>)
 8000d3a:	f043 0308 	orr.w	r3, r3, #8
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b1a      	ldr	r3, [pc, #104]	@ (8000dac <HAL_TIM_IC_MspInit+0xc8>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0308 	and.w	r3, r3, #8
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Echo1_Pin;
 8000d4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Echo1_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4813      	ldr	r0, [pc, #76]	@ (8000db0 <HAL_TIM_IC_MspInit+0xcc>)
 8000d62:	f000 fa29 	bl	80011b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Echo2_Pin;
 8000d66:	2308      	movs	r3, #8
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Echo2_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	480e      	ldr	r0, [pc, #56]	@ (8000db4 <HAL_TIM_IC_MspInit+0xd0>)
 8000d7a:	f000 fa1d 	bl	80011b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <HAL_TIM_IC_MspInit+0xd4>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d9c:	4a06      	ldr	r2, [pc, #24]	@ (8000db8 <HAL_TIM_IC_MspInit+0xd4>)
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	@ 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010800 	.word	0x40010800
 8000db4:	40010c00 	.word	0x40010c00
 8000db8:	40010000 	.word	0x40010000

08000dbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a09      	ldr	r2, [pc, #36]	@ (8000df0 <HAL_TIM_Base_MspInit+0x34>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d10b      	bne.n	8000de6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dce:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <HAL_TIM_Base_MspInit+0x38>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a08      	ldr	r2, [pc, #32]	@ (8000df4 <HAL_TIM_Base_MspInit+0x38>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_TIM_Base_MspInit+0x38>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	40000400 	.word	0x40000400
 8000df4:	40021000 	.word	0x40021000

08000df8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a0f      	ldr	r2, [pc, #60]	@ (8000e50 <HAL_TIM_MspPostInit+0x58>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d117      	bne.n	8000e48 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <HAL_TIM_MspPostInit+0x5c>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e54 <HAL_TIM_MspPostInit+0x5c>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <HAL_TIM_MspPostInit+0x5c>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e30:	2340      	movs	r3, #64	@ 0x40
 8000e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <HAL_TIM_MspPostInit+0x60>)
 8000e44:	f000 f9b8 	bl	80011b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40000400 	.word	0x40000400
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010800 	.word	0x40010800

08000e5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	@ (8000eac <MX_USART1_UART_Init+0x50>)
 8000e64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e66:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e68:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000e6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e80:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e82:	220c      	movs	r2, #12
 8000e84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e92:	4805      	ldr	r0, [pc, #20]	@ (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e94:	f002 f930 	bl	80030f8 <HAL_UART_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e9e:	f7ff fd73 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000124 	.word	0x20000124
 8000eac:	40013800 	.word	0x40013800

08000eb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a1c      	ldr	r2, [pc, #112]	@ (8000f3c <HAL_UART_MspInit+0x8c>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d131      	bne.n	8000f34 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <HAL_UART_MspInit+0x90>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f40 <HAL_UART_MspInit+0x90>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <HAL_UART_MspInit+0x90>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <HAL_UART_MspInit+0x90>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a14      	ldr	r2, [pc, #80]	@ (8000f40 <HAL_UART_MspInit+0x90>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_UART_MspInit+0x90>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	4619      	mov	r1, r3
 8000f14:	480b      	ldr	r0, [pc, #44]	@ (8000f44 <HAL_UART_MspInit+0x94>)
 8000f16:	f000 f94f 	bl	80011b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <HAL_UART_MspInit+0x94>)
 8000f30:	f000 f942 	bl	80011b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f34:	bf00      	nop
 8000f36:	3720      	adds	r7, #32
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40013800 	.word	0x40013800
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010800 	.word	0x40010800

08000f48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f48:	f7ff fdf2 	bl	8000b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f4c:	480b      	ldr	r0, [pc, #44]	@ (8000f7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f4e:	490c      	ldr	r1, [pc, #48]	@ (8000f80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f50:	4a0c      	ldr	r2, [pc, #48]	@ (8000f84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a09      	ldr	r2, [pc, #36]	@ (8000f88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f64:	4c09      	ldr	r4, [pc, #36]	@ (8000f8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f72:	f004 ffbb 	bl	8005eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f76:	f7ff fc67 	bl	8000848 <main>
  bx lr
 8000f7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000f84:	0800602c 	.word	0x0800602c
  ldr r2, =_sbss
 8000f88:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000f8c:	20001ab8 	.word	0x20001ab8

08000f90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC1_2_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <HAL_Init+0x28>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	@ (8000fbc <HAL_Init+0x28>)
 8000f9e:	f043 0310 	orr.w	r3, r3, #16
 8000fa2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f8d1 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	200f      	movs	r0, #15
 8000fac:	f7ff fd2a 	bl	8000a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fcf0 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40022000 	.word	0x40022000

08000fc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <HAL_IncTick+0x1c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a03      	ldr	r2, [pc, #12]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	20000020 	.word	0x20000020
 8000fe0:	2000016c 	.word	0x2000016c

08000fe4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b02      	ldr	r3, [pc, #8]	@ (8000ff4 <HAL_GetTick+0x10>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	2000016c 	.word	0x2000016c

08000ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001008:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001014:	4013      	ands	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001020:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102a:	4a04      	ldr	r2, [pc, #16]	@ (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	60d3      	str	r3, [r2, #12]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001044:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <__NVIC_GetPriorityGrouping+0x18>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	f003 0307 	and.w	r3, r3, #7
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	db0b      	blt.n	8001086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f003 021f 	and.w	r2, r3, #31
 8001074:	4906      	ldr	r1, [pc, #24]	@ (8001090 <__NVIC_EnableIRQ+0x34>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	095b      	lsrs	r3, r3, #5
 800107c:	2001      	movs	r0, #1
 800107e:	fa00 f202 	lsl.w	r2, r0, r2
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	@ (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	@ (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	@ 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	@ 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff4f 	bl	8000ff8 <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff64 	bl	8001040 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ffb2 	bl	80010e8 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff81 	bl	8001094 <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff57 	bl	800105c <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b08b      	sub	sp, #44	@ 0x2c
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ca:	e169      	b.n	80014a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011cc:	2201      	movs	r2, #1
 80011ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	69fa      	ldr	r2, [r7, #28]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	f040 8158 	bne.w	800149a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	4a9a      	ldr	r2, [pc, #616]	@ (8001458 <HAL_GPIO_Init+0x2a0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d05e      	beq.n	80012b2 <HAL_GPIO_Init+0xfa>
 80011f4:	4a98      	ldr	r2, [pc, #608]	@ (8001458 <HAL_GPIO_Init+0x2a0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d875      	bhi.n	80012e6 <HAL_GPIO_Init+0x12e>
 80011fa:	4a98      	ldr	r2, [pc, #608]	@ (800145c <HAL_GPIO_Init+0x2a4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d058      	beq.n	80012b2 <HAL_GPIO_Init+0xfa>
 8001200:	4a96      	ldr	r2, [pc, #600]	@ (800145c <HAL_GPIO_Init+0x2a4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d86f      	bhi.n	80012e6 <HAL_GPIO_Init+0x12e>
 8001206:	4a96      	ldr	r2, [pc, #600]	@ (8001460 <HAL_GPIO_Init+0x2a8>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d052      	beq.n	80012b2 <HAL_GPIO_Init+0xfa>
 800120c:	4a94      	ldr	r2, [pc, #592]	@ (8001460 <HAL_GPIO_Init+0x2a8>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d869      	bhi.n	80012e6 <HAL_GPIO_Init+0x12e>
 8001212:	4a94      	ldr	r2, [pc, #592]	@ (8001464 <HAL_GPIO_Init+0x2ac>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d04c      	beq.n	80012b2 <HAL_GPIO_Init+0xfa>
 8001218:	4a92      	ldr	r2, [pc, #584]	@ (8001464 <HAL_GPIO_Init+0x2ac>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d863      	bhi.n	80012e6 <HAL_GPIO_Init+0x12e>
 800121e:	4a92      	ldr	r2, [pc, #584]	@ (8001468 <HAL_GPIO_Init+0x2b0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d046      	beq.n	80012b2 <HAL_GPIO_Init+0xfa>
 8001224:	4a90      	ldr	r2, [pc, #576]	@ (8001468 <HAL_GPIO_Init+0x2b0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d85d      	bhi.n	80012e6 <HAL_GPIO_Init+0x12e>
 800122a:	2b12      	cmp	r3, #18
 800122c:	d82a      	bhi.n	8001284 <HAL_GPIO_Init+0xcc>
 800122e:	2b12      	cmp	r3, #18
 8001230:	d859      	bhi.n	80012e6 <HAL_GPIO_Init+0x12e>
 8001232:	a201      	add	r2, pc, #4	@ (adr r2, 8001238 <HAL_GPIO_Init+0x80>)
 8001234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001238:	080012b3 	.word	0x080012b3
 800123c:	0800128d 	.word	0x0800128d
 8001240:	0800129f 	.word	0x0800129f
 8001244:	080012e1 	.word	0x080012e1
 8001248:	080012e7 	.word	0x080012e7
 800124c:	080012e7 	.word	0x080012e7
 8001250:	080012e7 	.word	0x080012e7
 8001254:	080012e7 	.word	0x080012e7
 8001258:	080012e7 	.word	0x080012e7
 800125c:	080012e7 	.word	0x080012e7
 8001260:	080012e7 	.word	0x080012e7
 8001264:	080012e7 	.word	0x080012e7
 8001268:	080012e7 	.word	0x080012e7
 800126c:	080012e7 	.word	0x080012e7
 8001270:	080012e7 	.word	0x080012e7
 8001274:	080012e7 	.word	0x080012e7
 8001278:	080012e7 	.word	0x080012e7
 800127c:	08001295 	.word	0x08001295
 8001280:	080012a9 	.word	0x080012a9
 8001284:	4a79      	ldr	r2, [pc, #484]	@ (800146c <HAL_GPIO_Init+0x2b4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d013      	beq.n	80012b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800128a:	e02c      	b.n	80012e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	623b      	str	r3, [r7, #32]
          break;
 8001292:	e029      	b.n	80012e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	3304      	adds	r3, #4
 800129a:	623b      	str	r3, [r7, #32]
          break;
 800129c:	e024      	b.n	80012e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	3308      	adds	r3, #8
 80012a4:	623b      	str	r3, [r7, #32]
          break;
 80012a6:	e01f      	b.n	80012e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	330c      	adds	r3, #12
 80012ae:	623b      	str	r3, [r7, #32]
          break;
 80012b0:	e01a      	b.n	80012e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d102      	bne.n	80012c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ba:	2304      	movs	r3, #4
 80012bc:	623b      	str	r3, [r7, #32]
          break;
 80012be:	e013      	b.n	80012e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d105      	bne.n	80012d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c8:	2308      	movs	r3, #8
 80012ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	611a      	str	r2, [r3, #16]
          break;
 80012d2:	e009      	b.n	80012e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d4:	2308      	movs	r3, #8
 80012d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69fa      	ldr	r2, [r7, #28]
 80012dc:	615a      	str	r2, [r3, #20]
          break;
 80012de:	e003      	b.n	80012e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
          break;
 80012e4:	e000      	b.n	80012e8 <HAL_GPIO_Init+0x130>
          break;
 80012e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2bff      	cmp	r3, #255	@ 0xff
 80012ec:	d801      	bhi.n	80012f2 <HAL_GPIO_Init+0x13a>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	e001      	b.n	80012f6 <HAL_GPIO_Init+0x13e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3304      	adds	r3, #4
 80012f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	2bff      	cmp	r3, #255	@ 0xff
 80012fc:	d802      	bhi.n	8001304 <HAL_GPIO_Init+0x14c>
 80012fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	e002      	b.n	800130a <HAL_GPIO_Init+0x152>
 8001304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001306:	3b08      	subs	r3, #8
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	210f      	movs	r1, #15
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	401a      	ands	r2, r3
 800131c:	6a39      	ldr	r1, [r7, #32]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	fa01 f303 	lsl.w	r3, r1, r3
 8001324:	431a      	orrs	r2, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 80b1 	beq.w	800149a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001338:	4b4d      	ldr	r3, [pc, #308]	@ (8001470 <HAL_GPIO_Init+0x2b8>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a4c      	ldr	r2, [pc, #304]	@ (8001470 <HAL_GPIO_Init+0x2b8>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b4a      	ldr	r3, [pc, #296]	@ (8001470 <HAL_GPIO_Init+0x2b8>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001350:	4a48      	ldr	r2, [pc, #288]	@ (8001474 <HAL_GPIO_Init+0x2bc>)
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	4013      	ands	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a40      	ldr	r2, [pc, #256]	@ (8001478 <HAL_GPIO_Init+0x2c0>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d013      	beq.n	80013a4 <HAL_GPIO_Init+0x1ec>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a3f      	ldr	r2, [pc, #252]	@ (800147c <HAL_GPIO_Init+0x2c4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d00d      	beq.n	80013a0 <HAL_GPIO_Init+0x1e8>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a3e      	ldr	r2, [pc, #248]	@ (8001480 <HAL_GPIO_Init+0x2c8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d007      	beq.n	800139c <HAL_GPIO_Init+0x1e4>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a3d      	ldr	r2, [pc, #244]	@ (8001484 <HAL_GPIO_Init+0x2cc>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d101      	bne.n	8001398 <HAL_GPIO_Init+0x1e0>
 8001394:	2303      	movs	r3, #3
 8001396:	e006      	b.n	80013a6 <HAL_GPIO_Init+0x1ee>
 8001398:	2304      	movs	r3, #4
 800139a:	e004      	b.n	80013a6 <HAL_GPIO_Init+0x1ee>
 800139c:	2302      	movs	r3, #2
 800139e:	e002      	b.n	80013a6 <HAL_GPIO_Init+0x1ee>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <HAL_GPIO_Init+0x1ee>
 80013a4:	2300      	movs	r3, #0
 80013a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013a8:	f002 0203 	and.w	r2, r2, #3
 80013ac:	0092      	lsls	r2, r2, #2
 80013ae:	4093      	lsls	r3, r2
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013b6:	492f      	ldr	r1, [pc, #188]	@ (8001474 <HAL_GPIO_Init+0x2bc>)
 80013b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3302      	adds	r3, #2
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	492c      	ldr	r1, [pc, #176]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	608b      	str	r3, [r1, #8]
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013de:	4b2a      	ldr	r3, [pc, #168]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	4928      	ldr	r1, [pc, #160]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013f8:	4b23      	ldr	r3, [pc, #140]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	4922      	ldr	r1, [pc, #136]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	60cb      	str	r3, [r1, #12]
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	43db      	mvns	r3, r3
 800140e:	491e      	ldr	r1, [pc, #120]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 8001410:	4013      	ands	r3, r2
 8001412:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d006      	beq.n	800142e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001420:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	4918      	ldr	r1, [pc, #96]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	604b      	str	r3, [r1, #4]
 800142c:	e006      	b.n	800143c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800142e:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	43db      	mvns	r3, r3
 8001436:	4914      	ldr	r1, [pc, #80]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 8001438:	4013      	ands	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d021      	beq.n	800148c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001448:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	490e      	ldr	r1, [pc, #56]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e021      	b.n	800149a <HAL_GPIO_Init+0x2e2>
 8001456:	bf00      	nop
 8001458:	10320000 	.word	0x10320000
 800145c:	10310000 	.word	0x10310000
 8001460:	10220000 	.word	0x10220000
 8001464:	10210000 	.word	0x10210000
 8001468:	10120000 	.word	0x10120000
 800146c:	10110000 	.word	0x10110000
 8001470:	40021000 	.word	0x40021000
 8001474:	40010000 	.word	0x40010000
 8001478:	40010800 	.word	0x40010800
 800147c:	40010c00 	.word	0x40010c00
 8001480:	40011000 	.word	0x40011000
 8001484:	40011400 	.word	0x40011400
 8001488:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800148c:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <HAL_GPIO_Init+0x304>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	43db      	mvns	r3, r3
 8001494:	4909      	ldr	r1, [pc, #36]	@ (80014bc <HAL_GPIO_Init+0x304>)
 8001496:	4013      	ands	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	3301      	adds	r3, #1
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a6:	fa22 f303 	lsr.w	r3, r2, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f47f ae8e 	bne.w	80011cc <HAL_GPIO_Init+0x14>
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	372c      	adds	r7, #44	@ 0x2c
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	40010400 	.word	0x40010400

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d0:	787b      	ldrb	r3, [r7, #1]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014dc:	e003      	b.n	80014e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	041a      	lsls	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	611a      	str	r2, [r3, #16]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e272      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8087 	beq.w	800161e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001510:	4b92      	ldr	r3, [pc, #584]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b04      	cmp	r3, #4
 800151a:	d00c      	beq.n	8001536 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800151c:	4b8f      	ldr	r3, [pc, #572]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b08      	cmp	r3, #8
 8001526:	d112      	bne.n	800154e <HAL_RCC_OscConfig+0x5e>
 8001528:	4b8c      	ldr	r3, [pc, #560]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001534:	d10b      	bne.n	800154e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001536:	4b89      	ldr	r3, [pc, #548]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d06c      	beq.n	800161c <HAL_RCC_OscConfig+0x12c>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d168      	bne.n	800161c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e24c      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001556:	d106      	bne.n	8001566 <HAL_RCC_OscConfig+0x76>
 8001558:	4b80      	ldr	r3, [pc, #512]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a7f      	ldr	r2, [pc, #508]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 800155e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	e02e      	b.n	80015c4 <HAL_RCC_OscConfig+0xd4>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0x98>
 800156e:	4b7b      	ldr	r3, [pc, #492]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7a      	ldr	r2, [pc, #488]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 8001574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b78      	ldr	r3, [pc, #480]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a77      	ldr	r2, [pc, #476]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 8001580:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	e01d      	b.n	80015c4 <HAL_RCC_OscConfig+0xd4>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0xbc>
 8001592:	4b72      	ldr	r3, [pc, #456]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a71      	ldr	r2, [pc, #452]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b6f      	ldr	r3, [pc, #444]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a6e      	ldr	r2, [pc, #440]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e00b      	b.n	80015c4 <HAL_RCC_OscConfig+0xd4>
 80015ac:	4b6b      	ldr	r3, [pc, #428]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a6a      	ldr	r2, [pc, #424]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 80015b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b68      	ldr	r3, [pc, #416]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a67      	ldr	r2, [pc, #412]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 80015be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d013      	beq.n	80015f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fd0a 	bl	8000fe4 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fd06 	bl	8000fe4 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	@ 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e200      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	4b5d      	ldr	r3, [pc, #372]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0xe4>
 80015f2:	e014      	b.n	800161e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fcf6 	bl	8000fe4 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fcf2 	bl	8000fe4 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	@ 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e1ec      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	4b53      	ldr	r3, [pc, #332]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x10c>
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d063      	beq.n	80016f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800162a:	4b4c      	ldr	r3, [pc, #304]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00b      	beq.n	800164e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001636:	4b49      	ldr	r3, [pc, #292]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b08      	cmp	r3, #8
 8001640:	d11c      	bne.n	800167c <HAL_RCC_OscConfig+0x18c>
 8001642:	4b46      	ldr	r3, [pc, #280]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d116      	bne.n	800167c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164e:	4b43      	ldr	r3, [pc, #268]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <HAL_RCC_OscConfig+0x176>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e1c0      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001666:	4b3d      	ldr	r3, [pc, #244]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4939      	ldr	r1, [pc, #228]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167a:	e03a      	b.n	80016f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d020      	beq.n	80016c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001684:	4b36      	ldr	r3, [pc, #216]	@ (8001760 <HAL_RCC_OscConfig+0x270>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fcab 	bl	8000fe4 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff fca7 	bl	8000fe4 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e1a1      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a4:	4b2d      	ldr	r3, [pc, #180]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b0:	4b2a      	ldr	r3, [pc, #168]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4927      	ldr	r1, [pc, #156]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	600b      	str	r3, [r1, #0]
 80016c4:	e015      	b.n	80016f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c6:	4b26      	ldr	r3, [pc, #152]	@ (8001760 <HAL_RCC_OscConfig+0x270>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fc8a 	bl	8000fe4 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d4:	f7ff fc86 	bl	8000fe4 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e180      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	4b1d      	ldr	r3, [pc, #116]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d03a      	beq.n	8001774 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d019      	beq.n	800173a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <HAL_RCC_OscConfig+0x274>)
 8001708:	2201      	movs	r2, #1
 800170a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170c:	f7ff fc6a 	bl	8000fe4 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001714:	f7ff fc66 	bl	8000fe4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e160      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001726:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <HAL_RCC_OscConfig+0x26c>)
 8001728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001732:	2001      	movs	r0, #1
 8001734:	f000 fafe 	bl	8001d34 <RCC_Delay>
 8001738:	e01c      	b.n	8001774 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173a:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <HAL_RCC_OscConfig+0x274>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001740:	f7ff fc50 	bl	8000fe4 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001746:	e00f      	b.n	8001768 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001748:	f7ff fc4c 	bl	8000fe4 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d908      	bls.n	8001768 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e146      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	42420000 	.word	0x42420000
 8001764:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001768:	4b92      	ldr	r3, [pc, #584]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1e9      	bne.n	8001748 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80a6 	beq.w	80018ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001786:	4b8b      	ldr	r3, [pc, #556]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10d      	bne.n	80017ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b88      	ldr	r3, [pc, #544]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a87      	ldr	r2, [pc, #540]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800179c:	61d3      	str	r3, [r2, #28]
 800179e:	4b85      	ldr	r3, [pc, #532]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ae:	4b82      	ldr	r3, [pc, #520]	@ (80019b8 <HAL_RCC_OscConfig+0x4c8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d118      	bne.n	80017ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ba:	4b7f      	ldr	r3, [pc, #508]	@ (80019b8 <HAL_RCC_OscConfig+0x4c8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a7e      	ldr	r2, [pc, #504]	@ (80019b8 <HAL_RCC_OscConfig+0x4c8>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fc0d 	bl	8000fe4 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ce:	f7ff fc09 	bl	8000fe4 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b64      	cmp	r3, #100	@ 0x64
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e103      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	4b75      	ldr	r3, [pc, #468]	@ (80019b8 <HAL_RCC_OscConfig+0x4c8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x312>
 80017f4:	4b6f      	ldr	r3, [pc, #444]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	4a6e      	ldr	r2, [pc, #440]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6213      	str	r3, [r2, #32]
 8001800:	e02d      	b.n	800185e <HAL_RCC_OscConfig+0x36e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x334>
 800180a:	4b6a      	ldr	r3, [pc, #424]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4a69      	ldr	r2, [pc, #420]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6213      	str	r3, [r2, #32]
 8001816:	4b67      	ldr	r3, [pc, #412]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4a66      	ldr	r2, [pc, #408]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	6213      	str	r3, [r2, #32]
 8001822:	e01c      	b.n	800185e <HAL_RCC_OscConfig+0x36e>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b05      	cmp	r3, #5
 800182a:	d10c      	bne.n	8001846 <HAL_RCC_OscConfig+0x356>
 800182c:	4b61      	ldr	r3, [pc, #388]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4a60      	ldr	r2, [pc, #384]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6213      	str	r3, [r2, #32]
 8001838:	4b5e      	ldr	r3, [pc, #376]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4a5d      	ldr	r2, [pc, #372]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6213      	str	r3, [r2, #32]
 8001844:	e00b      	b.n	800185e <HAL_RCC_OscConfig+0x36e>
 8001846:	4b5b      	ldr	r3, [pc, #364]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	4a5a      	ldr	r2, [pc, #360]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	6213      	str	r3, [r2, #32]
 8001852:	4b58      	ldr	r3, [pc, #352]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	4a57      	ldr	r2, [pc, #348]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	f023 0304 	bic.w	r3, r3, #4
 800185c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d015      	beq.n	8001892 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7ff fbbd 	bl	8000fe4 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186c:	e00a      	b.n	8001884 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7ff fbb9 	bl	8000fe4 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e0b1      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001884:	4b4b      	ldr	r3, [pc, #300]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ee      	beq.n	800186e <HAL_RCC_OscConfig+0x37e>
 8001890:	e014      	b.n	80018bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001892:	f7ff fba7 	bl	8000fe4 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff fba3 	bl	8000fe4 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e09b      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b0:	4b40      	ldr	r3, [pc, #256]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1ee      	bne.n	800189a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d105      	bne.n	80018ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c2:	4b3c      	ldr	r3, [pc, #240]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a3b      	ldr	r2, [pc, #236]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8087 	beq.w	80019e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d8:	4b36      	ldr	r3, [pc, #216]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d061      	beq.n	80019a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d146      	bne.n	800197a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ec:	4b33      	ldr	r3, [pc, #204]	@ (80019bc <HAL_RCC_OscConfig+0x4cc>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff fb77 	bl	8000fe4 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff fb73 	bl	8000fe4 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e06d      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190c:	4b29      	ldr	r3, [pc, #164]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001920:	d108      	bne.n	8001934 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001922:	4b24      	ldr	r3, [pc, #144]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	4921      	ldr	r1, [pc, #132]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001934:	4b1f      	ldr	r3, [pc, #124]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a19      	ldr	r1, [r3, #32]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001944:	430b      	orrs	r3, r1
 8001946:	491b      	ldr	r1, [pc, #108]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800194c:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <HAL_RCC_OscConfig+0x4cc>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001952:	f7ff fb47 	bl	8000fe4 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195a:	f7ff fb43 	bl	8000fe4 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e03d      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x46a>
 8001978:	e035      	b.n	80019e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <HAL_RCC_OscConfig+0x4cc>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff fb30 	bl	8000fe4 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff fb2c 	bl	8000fe4 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e026      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x498>
 80019a6:	e01e      	b.n	80019e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d107      	bne.n	80019c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e019      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40007000 	.word	0x40007000
 80019bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019c0:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <HAL_RCC_OscConfig+0x500>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000

080019f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0d0      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a08:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d910      	bls.n	8001a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b67      	ldr	r3, [pc, #412]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 0207 	bic.w	r2, r3, #7
 8001a1e:	4965      	ldr	r1, [pc, #404]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b63      	ldr	r3, [pc, #396]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0b8      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d020      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a50:	4b59      	ldr	r3, [pc, #356]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a58      	ldr	r2, [pc, #352]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a68:	4b53      	ldr	r3, [pc, #332]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a52      	ldr	r2, [pc, #328]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a74:	4b50      	ldr	r3, [pc, #320]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	494d      	ldr	r1, [pc, #308]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d040      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b47      	ldr	r3, [pc, #284]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d115      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e07f      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab2:	4b41      	ldr	r3, [pc, #260]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e073      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e06b      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad2:	4b39      	ldr	r3, [pc, #228]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f023 0203 	bic.w	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	4936      	ldr	r1, [pc, #216]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae4:	f7ff fa7e 	bl	8000fe4 <HAL_GetTick>
 8001ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aec:	f7ff fa7a 	bl	8000fe4 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e053      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 020c 	and.w	r2, r3, #12
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d1eb      	bne.n	8001aec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b14:	4b27      	ldr	r3, [pc, #156]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d210      	bcs.n	8001b44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b22:	4b24      	ldr	r3, [pc, #144]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 0207 	bic.w	r2, r3, #7
 8001b2a:	4922      	ldr	r1, [pc, #136]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e032      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b50:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4916      	ldr	r1, [pc, #88]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d009      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b6e:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	490e      	ldr	r1, [pc, #56]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b82:	f000 f821 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8001b86:	4602      	mov	r2, r0
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	490a      	ldr	r1, [pc, #40]	@ (8001bbc <HAL_RCC_ClockConfig+0x1c8>)
 8001b94:	5ccb      	ldrb	r3, [r1, r3]
 8001b96:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9a:	4a09      	ldr	r2, [pc, #36]	@ (8001bc0 <HAL_RCC_ClockConfig+0x1cc>)
 8001b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe ff2e 	bl	8000a04 <HAL_InitTick>

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40022000 	.word	0x40022000
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	08005ff8 	.word	0x08005ff8
 8001bc0:	20000018 	.word	0x20000018
 8001bc4:	2000001c 	.word	0x2000001c

08001bc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001be2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d002      	beq.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x30>
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d003      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0x36>
 8001bf6:	e027      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bf8:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bfa:	613b      	str	r3, [r7, #16]
      break;
 8001bfc:	e027      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	0c9b      	lsrs	r3, r3, #18
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	4a17      	ldr	r2, [pc, #92]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c08:	5cd3      	ldrb	r3, [r2, r3]
 8001c0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d010      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c16:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	0c5b      	lsrs	r3, r3, #17
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	4a11      	ldr	r2, [pc, #68]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c22:	5cd3      	ldrb	r3, [r2, r3]
 8001c24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a0d      	ldr	r2, [pc, #52]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c2a:	fb03 f202 	mul.w	r2, r3, r2
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e004      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c3c:	fb02 f303 	mul.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	613b      	str	r3, [r7, #16]
      break;
 8001c46:	e002      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c4a:	613b      	str	r3, [r7, #16]
      break;
 8001c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c4e:	693b      	ldr	r3, [r7, #16]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	371c      	adds	r7, #28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	007a1200 	.word	0x007a1200
 8001c64:	08006010 	.word	0x08006010
 8001c68:	08006020 	.word	0x08006020
 8001c6c:	003d0900 	.word	0x003d0900

08001c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c74:	4b02      	ldr	r3, [pc, #8]	@ (8001c80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	20000018 	.word	0x20000018

08001c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c88:	f7ff fff2 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	4903      	ldr	r1, [pc, #12]	@ (8001ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	08006008 	.word	0x08006008

08001cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cb0:	f7ff ffde 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	0adb      	lsrs	r3, r3, #11
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4903      	ldr	r1, [pc, #12]	@ (8001cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	08006008 	.word	0x08006008

08001cd4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <HAL_RCC_GetClockConfig+0x58>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <HAL_RCC_GetClockConfig+0x58>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <HAL_RCC_GetClockConfig+0x58>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d08:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <HAL_RCC_GetClockConfig+0x58>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0207 	and.w	r2, r3, #7
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40022000 	.word	0x40022000

08001d34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <RCC_Delay+0x34>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a0a      	ldr	r2, [pc, #40]	@ (8001d6c <RCC_Delay+0x38>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	0a5b      	lsrs	r3, r3, #9
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	fb02 f303 	mul.w	r3, r2, r3
 8001d4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d50:	bf00      	nop
  }
  while (Delay --);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1e5a      	subs	r2, r3, #1
 8001d56:	60fa      	str	r2, [r7, #12]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f9      	bne.n	8001d50 <RCC_Delay+0x1c>
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	20000018 	.word	0x20000018
 8001d6c:	10624dd3 	.word	0x10624dd3

08001d70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e041      	b.n	8001e06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d106      	bne.n	8001d9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff f810 	bl	8000dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3304      	adds	r3, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 fd80 	bl	80028b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d001      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e03a      	b.n	8001e9e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a18      	ldr	r2, [pc, #96]	@ (8001ea8 <HAL_TIM_Base_Start_IT+0x98>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00e      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x58>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e52:	d009      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x58>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a14      	ldr	r2, [pc, #80]	@ (8001eac <HAL_TIM_Base_Start_IT+0x9c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d004      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x58>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a13      	ldr	r2, [pc, #76]	@ (8001eb0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d111      	bne.n	8001e8c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d010      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0201 	orr.w	r2, r2, #1
 8001e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8a:	e007      	b.n	8001e9c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	40012c00 	.word	0x40012c00
 8001eac:	40000400 	.word	0x40000400
 8001eb0:	40000800 	.word	0x40000800

08001eb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e041      	b.n	8001f4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f839 	bl	8001f52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	f000 fcde 	bl	80028b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_TIM_PWM_Start+0x24>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	bf14      	ite	ne
 8001f80:	2301      	movne	r3, #1
 8001f82:	2300      	moveq	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	e022      	b.n	8001fce <HAL_TIM_PWM_Start+0x6a>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d109      	bne.n	8001fa2 <HAL_TIM_PWM_Start+0x3e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	bf14      	ite	ne
 8001f9a:	2301      	movne	r3, #1
 8001f9c:	2300      	moveq	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	e015      	b.n	8001fce <HAL_TIM_PWM_Start+0x6a>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d109      	bne.n	8001fbc <HAL_TIM_PWM_Start+0x58>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	bf14      	ite	ne
 8001fb4:	2301      	movne	r3, #1
 8001fb6:	2300      	moveq	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	e008      	b.n	8001fce <HAL_TIM_PWM_Start+0x6a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	bf14      	ite	ne
 8001fc8:	2301      	movne	r3, #1
 8001fca:	2300      	moveq	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e05e      	b.n	8002094 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d104      	bne.n	8001fe6 <HAL_TIM_PWM_Start+0x82>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fe4:	e013      	b.n	800200e <HAL_TIM_PWM_Start+0xaa>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d104      	bne.n	8001ff6 <HAL_TIM_PWM_Start+0x92>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ff4:	e00b      	b.n	800200e <HAL_TIM_PWM_Start+0xaa>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d104      	bne.n	8002006 <HAL_TIM_PWM_Start+0xa2>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002004:	e003      	b.n	800200e <HAL_TIM_PWM_Start+0xaa>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2202      	movs	r2, #2
 800200a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2201      	movs	r2, #1
 8002014:	6839      	ldr	r1, [r7, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f000 ffd9 	bl	8002fce <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1e      	ldr	r2, [pc, #120]	@ (800209c <HAL_TIM_PWM_Start+0x138>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d107      	bne.n	8002036 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002034:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a18      	ldr	r2, [pc, #96]	@ (800209c <HAL_TIM_PWM_Start+0x138>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00e      	beq.n	800205e <HAL_TIM_PWM_Start+0xfa>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002048:	d009      	beq.n	800205e <HAL_TIM_PWM_Start+0xfa>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a14      	ldr	r2, [pc, #80]	@ (80020a0 <HAL_TIM_PWM_Start+0x13c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d004      	beq.n	800205e <HAL_TIM_PWM_Start+0xfa>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a12      	ldr	r2, [pc, #72]	@ (80020a4 <HAL_TIM_PWM_Start+0x140>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d111      	bne.n	8002082 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2b06      	cmp	r3, #6
 800206e:	d010      	beq.n	8002092 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002080:	e007      	b.n	8002092 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0201 	orr.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40012c00 	.word	0x40012c00
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40000800 	.word	0x40000800

080020a8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	6839      	ldr	r1, [r7, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 ff87 	bl	8002fce <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a29      	ldr	r2, [pc, #164]	@ (800216c <HAL_TIM_PWM_Stop+0xc4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d117      	bne.n	80020fa <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10f      	bne.n	80020fa <HAL_TIM_PWM_Stop+0x52>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6a1a      	ldr	r2, [r3, #32]
 80020e0:	f240 4344 	movw	r3, #1092	@ 0x444
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d107      	bne.n	80020fa <HAL_TIM_PWM_Stop+0x52>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6a1a      	ldr	r2, [r3, #32]
 8002100:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10f      	bne.n	800212a <HAL_TIM_PWM_Stop+0x82>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6a1a      	ldr	r2, [r3, #32]
 8002110:	f240 4344 	movw	r3, #1092	@ 0x444
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d107      	bne.n	800212a <HAL_TIM_PWM_Stop+0x82>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0201 	bic.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d104      	bne.n	800213a <HAL_TIM_PWM_Stop+0x92>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002138:	e013      	b.n	8002162 <HAL_TIM_PWM_Stop+0xba>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b04      	cmp	r3, #4
 800213e:	d104      	bne.n	800214a <HAL_TIM_PWM_Stop+0xa2>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002148:	e00b      	b.n	8002162 <HAL_TIM_PWM_Stop+0xba>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d104      	bne.n	800215a <HAL_TIM_PWM_Stop+0xb2>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002158:	e003      	b.n	8002162 <HAL_TIM_PWM_Stop+0xba>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40012c00 	.word	0x40012c00

08002170 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e041      	b.n	8002206 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d106      	bne.n	800219c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7fe fda4 	bl	8000ce4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3304      	adds	r3, #4
 80021ac:	4619      	mov	r1, r3
 80021ae:	4610      	mov	r0, r2
 80021b0:	f000 fb80 	bl	80028b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b02      	cmp	r3, #2
 8002222:	d122      	bne.n	800226a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b02      	cmp	r3, #2
 8002230:	d11b      	bne.n	800226a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f06f 0202 	mvn.w	r2, #2
 800223a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fb13 	bl	800287c <HAL_TIM_IC_CaptureCallback>
 8002256:	e005      	b.n	8002264 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 fb06 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 fb15 	bl	800288e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b04      	cmp	r3, #4
 8002276:	d122      	bne.n	80022be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b04      	cmp	r3, #4
 8002284:	d11b      	bne.n	80022be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f06f 0204 	mvn.w	r2, #4
 800228e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 fae9 	bl	800287c <HAL_TIM_IC_CaptureCallback>
 80022aa:	e005      	b.n	80022b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fadc 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 faeb 	bl	800288e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d122      	bne.n	8002312 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d11b      	bne.n	8002312 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f06f 0208 	mvn.w	r2, #8
 80022e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2204      	movs	r2, #4
 80022e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fabf 	bl	800287c <HAL_TIM_IC_CaptureCallback>
 80022fe:	e005      	b.n	800230c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fab2 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fac1 	bl	800288e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b10      	cmp	r3, #16
 800231e:	d122      	bne.n	8002366 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b10      	cmp	r3, #16
 800232c:	d11b      	bne.n	8002366 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f06f 0210 	mvn.w	r2, #16
 8002336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2208      	movs	r2, #8
 800233c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 fa95 	bl	800287c <HAL_TIM_IC_CaptureCallback>
 8002352:	e005      	b.n	8002360 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 fa88 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fa97 	bl	800288e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b01      	cmp	r3, #1
 8002372:	d10e      	bne.n	8002392 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b01      	cmp	r3, #1
 8002380:	d107      	bne.n	8002392 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f06f 0201 	mvn.w	r2, #1
 800238a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7fe fae9 	bl	8000964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800239c:	2b80      	cmp	r3, #128	@ 0x80
 800239e:	d10e      	bne.n	80023be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023aa:	2b80      	cmp	r3, #128	@ 0x80
 80023ac:	d107      	bne.n	80023be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 fe94 	bl	80030e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c8:	2b40      	cmp	r3, #64	@ 0x40
 80023ca:	d10e      	bne.n	80023ea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d6:	2b40      	cmp	r3, #64	@ 0x40
 80023d8:	d107      	bne.n	80023ea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fa5b 	bl	80028a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	f003 0320 	and.w	r3, r3, #32
 80023f4:	2b20      	cmp	r3, #32
 80023f6:	d10e      	bne.n	8002416 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	2b20      	cmp	r3, #32
 8002404:	d107      	bne.n	8002416 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f06f 0220 	mvn.w	r2, #32
 800240e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 fe5f 	bl	80030d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_TIM_IC_ConfigChannel+0x1e>
 8002438:	2302      	movs	r3, #2
 800243a:	e088      	b.n	800254e <HAL_TIM_IC_ConfigChannel+0x130>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d11b      	bne.n	8002482 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800245a:	f000 fc15 	bl	8002c88 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699a      	ldr	r2, [r3, #24]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 020c 	bic.w	r2, r2, #12
 800246c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6999      	ldr	r1, [r3, #24]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	619a      	str	r2, [r3, #24]
 8002480:	e060      	b.n	8002544 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b04      	cmp	r3, #4
 8002486:	d11c      	bne.n	80024c2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002498:	f000 fc7e 	bl	8002d98 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80024aa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6999      	ldr	r1, [r3, #24]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	021a      	lsls	r2, r3, #8
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	619a      	str	r2, [r3, #24]
 80024c0:	e040      	b.n	8002544 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d11b      	bne.n	8002500 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80024d8:	f000 fcc9 	bl	8002e6e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	69da      	ldr	r2, [r3, #28]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 020c 	bic.w	r2, r2, #12
 80024ea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	69d9      	ldr	r1, [r3, #28]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	61da      	str	r2, [r3, #28]
 80024fe:	e021      	b.n	8002544 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b0c      	cmp	r3, #12
 8002504:	d11c      	bne.n	8002540 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002516:	f000 fce5 	bl	8002ee4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69da      	ldr	r2, [r3, #28]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002528:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	69d9      	ldr	r1, [r3, #28]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	021a      	lsls	r2, r3, #8
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	61da      	str	r2, [r3, #28]
 800253e:	e001      	b.n	8002544 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800254c:	7dfb      	ldrb	r3, [r7, #23]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002572:	2302      	movs	r3, #2
 8002574:	e0ae      	b.n	80026d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b0c      	cmp	r3, #12
 8002582:	f200 809f 	bhi.w	80026c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002586:	a201      	add	r2, pc, #4	@ (adr r2, 800258c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	080025c1 	.word	0x080025c1
 8002590:	080026c5 	.word	0x080026c5
 8002594:	080026c5 	.word	0x080026c5
 8002598:	080026c5 	.word	0x080026c5
 800259c:	08002601 	.word	0x08002601
 80025a0:	080026c5 	.word	0x080026c5
 80025a4:	080026c5 	.word	0x080026c5
 80025a8:	080026c5 	.word	0x080026c5
 80025ac:	08002643 	.word	0x08002643
 80025b0:	080026c5 	.word	0x080026c5
 80025b4:	080026c5 	.word	0x080026c5
 80025b8:	080026c5 	.word	0x080026c5
 80025bc:	08002683 	.word	0x08002683
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f9d6 	bl	8002978 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0208 	orr.w	r2, r2, #8
 80025da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0204 	bic.w	r2, r2, #4
 80025ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6999      	ldr	r1, [r3, #24]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	619a      	str	r2, [r3, #24]
      break;
 80025fe:	e064      	b.n	80026ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 fa1c 	bl	8002a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800261a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800262a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6999      	ldr	r1, [r3, #24]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	021a      	lsls	r2, r3, #8
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	619a      	str	r2, [r3, #24]
      break;
 8002640:	e043      	b.n	80026ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	4618      	mov	r0, r3
 800264a:	f000 fa65 	bl	8002b18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0208 	orr.w	r2, r2, #8
 800265c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0204 	bic.w	r2, r2, #4
 800266c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69d9      	ldr	r1, [r3, #28]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	61da      	str	r2, [r3, #28]
      break;
 8002680:	e023      	b.n	80026ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	4618      	mov	r0, r3
 800268a:	f000 faaf 	bl	8002bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69da      	ldr	r2, [r3, #28]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800269c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69d9      	ldr	r1, [r3, #28]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	021a      	lsls	r2, r3, #8
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	61da      	str	r2, [r3, #28]
      break;
 80026c2:	e002      	b.n	80026ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	75fb      	strb	r3, [r7, #23]
      break;
 80026c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_TIM_ConfigClockSource+0x1c>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e0b4      	b.n	8002862 <HAL_TIM_ConfigClockSource+0x186>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800271e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002730:	d03e      	beq.n	80027b0 <HAL_TIM_ConfigClockSource+0xd4>
 8002732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002736:	f200 8087 	bhi.w	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 800273a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800273e:	f000 8086 	beq.w	800284e <HAL_TIM_ConfigClockSource+0x172>
 8002742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002746:	d87f      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b70      	cmp	r3, #112	@ 0x70
 800274a:	d01a      	beq.n	8002782 <HAL_TIM_ConfigClockSource+0xa6>
 800274c:	2b70      	cmp	r3, #112	@ 0x70
 800274e:	d87b      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002750:	2b60      	cmp	r3, #96	@ 0x60
 8002752:	d050      	beq.n	80027f6 <HAL_TIM_ConfigClockSource+0x11a>
 8002754:	2b60      	cmp	r3, #96	@ 0x60
 8002756:	d877      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002758:	2b50      	cmp	r3, #80	@ 0x50
 800275a:	d03c      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0xfa>
 800275c:	2b50      	cmp	r3, #80	@ 0x50
 800275e:	d873      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002760:	2b40      	cmp	r3, #64	@ 0x40
 8002762:	d058      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0x13a>
 8002764:	2b40      	cmp	r3, #64	@ 0x40
 8002766:	d86f      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002768:	2b30      	cmp	r3, #48	@ 0x30
 800276a:	d064      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x15a>
 800276c:	2b30      	cmp	r3, #48	@ 0x30
 800276e:	d86b      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002770:	2b20      	cmp	r3, #32
 8002772:	d060      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x15a>
 8002774:	2b20      	cmp	r3, #32
 8002776:	d867      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d05c      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x15a>
 800277c:	2b10      	cmp	r3, #16
 800277e:	d05a      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x15a>
 8002780:	e062      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002792:	f000 fbfd 	bl	8002f90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	609a      	str	r2, [r3, #8]
      break;
 80027ae:	e04f      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027c0:	f000 fbe6 	bl	8002f90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027d2:	609a      	str	r2, [r3, #8]
      break;
 80027d4:	e03c      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e2:	461a      	mov	r2, r3
 80027e4:	f000 faaa 	bl	8002d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2150      	movs	r1, #80	@ 0x50
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fbb4 	bl	8002f5c <TIM_ITRx_SetConfig>
      break;
 80027f4:	e02c      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002802:	461a      	mov	r2, r3
 8002804:	f000 fb04 	bl	8002e10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2160      	movs	r1, #96	@ 0x60
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fba4 	bl	8002f5c <TIM_ITRx_SetConfig>
      break;
 8002814:	e01c      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002822:	461a      	mov	r2, r3
 8002824:	f000 fa8a 	bl	8002d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2140      	movs	r1, #64	@ 0x40
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fb94 	bl	8002f5c <TIM_ITRx_SetConfig>
      break;
 8002834:	e00c      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	f000 fb8b 	bl	8002f5c <TIM_ITRx_SetConfig>
      break;
 8002846:	e003      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      break;
 800284c:	e000      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800284e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
	...

080028b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a29      	ldr	r2, [pc, #164]	@ (800296c <TIM_Base_SetConfig+0xb8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d00b      	beq.n	80028e4 <TIM_Base_SetConfig+0x30>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d2:	d007      	beq.n	80028e4 <TIM_Base_SetConfig+0x30>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a26      	ldr	r2, [pc, #152]	@ (8002970 <TIM_Base_SetConfig+0xbc>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d003      	beq.n	80028e4 <TIM_Base_SetConfig+0x30>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a25      	ldr	r2, [pc, #148]	@ (8002974 <TIM_Base_SetConfig+0xc0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d108      	bne.n	80028f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a1c      	ldr	r2, [pc, #112]	@ (800296c <TIM_Base_SetConfig+0xb8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00b      	beq.n	8002916 <TIM_Base_SetConfig+0x62>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002904:	d007      	beq.n	8002916 <TIM_Base_SetConfig+0x62>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a19      	ldr	r2, [pc, #100]	@ (8002970 <TIM_Base_SetConfig+0xbc>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d003      	beq.n	8002916 <TIM_Base_SetConfig+0x62>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a18      	ldr	r2, [pc, #96]	@ (8002974 <TIM_Base_SetConfig+0xc0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d108      	bne.n	8002928 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800291c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a07      	ldr	r2, [pc, #28]	@ (800296c <TIM_Base_SetConfig+0xb8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d103      	bne.n	800295c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	615a      	str	r2, [r3, #20]
}
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	40012c00 	.word	0x40012c00
 8002970:	40000400 	.word	0x40000400
 8002974:	40000800 	.word	0x40000800

08002978 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f023 0201 	bic.w	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f023 0303 	bic.w	r3, r3, #3
 80029ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f023 0302 	bic.w	r3, r3, #2
 80029c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002a40 <TIM_OC1_SetConfig+0xc8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d10c      	bne.n	80029ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f023 0308 	bic.w	r3, r3, #8
 80029da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f023 0304 	bic.w	r3, r3, #4
 80029ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a13      	ldr	r2, [pc, #76]	@ (8002a40 <TIM_OC1_SetConfig+0xc8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d111      	bne.n	8002a1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	621a      	str	r2, [r3, #32]
}
 8002a34:	bf00      	nop
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40012c00 	.word	0x40012c00

08002a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	f023 0210 	bic.w	r2, r3, #16
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f023 0320 	bic.w	r3, r3, #32
 8002a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002b14 <TIM_OC2_SetConfig+0xd0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d10d      	bne.n	8002ac0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002abe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a14      	ldr	r2, [pc, #80]	@ (8002b14 <TIM_OC2_SetConfig+0xd0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d113      	bne.n	8002af0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ace:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	621a      	str	r2, [r3, #32]
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	40012c00 	.word	0x40012c00

08002b18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0303 	bic.w	r3, r3, #3
 8002b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a1d      	ldr	r2, [pc, #116]	@ (8002be8 <TIM_OC3_SetConfig+0xd0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10d      	bne.n	8002b92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	021b      	lsls	r3, r3, #8
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a14      	ldr	r2, [pc, #80]	@ (8002be8 <TIM_OC3_SetConfig+0xd0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d113      	bne.n	8002bc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	621a      	str	r2, [r3, #32]
}
 8002bdc:	bf00      	nop
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40012c00 	.word	0x40012c00

08002bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	031b      	lsls	r3, r3, #12
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a0f      	ldr	r2, [pc, #60]	@ (8002c84 <TIM_OC4_SetConfig+0x98>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d109      	bne.n	8002c60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	019b      	lsls	r3, r3, #6
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	621a      	str	r2, [r3, #32]
}
 8002c7a:	bf00      	nop
 8002c7c:	371c      	adds	r7, #28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	40012c00 	.word	0x40012c00

08002c88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f023 0201 	bic.w	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8002d30 <TIM_TI1_SetConfig+0xa8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00b      	beq.n	8002cce <TIM_TI1_SetConfig+0x46>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cbc:	d007      	beq.n	8002cce <TIM_TI1_SetConfig+0x46>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8002d34 <TIM_TI1_SetConfig+0xac>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d003      	beq.n	8002cce <TIM_TI1_SetConfig+0x46>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8002d38 <TIM_TI1_SetConfig+0xb0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d101      	bne.n	8002cd2 <TIM_TI1_SetConfig+0x4a>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <TIM_TI1_SetConfig+0x4c>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f023 0303 	bic.w	r3, r3, #3
 8002cde:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	e003      	b.n	8002cf2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f023 030a 	bic.w	r3, r3, #10
 8002d0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f003 030a 	and.w	r3, r3, #10
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	621a      	str	r2, [r3, #32]
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	40012c00 	.word	0x40012c00
 8002d34:	40000400 	.word	0x40000400
 8002d38:	40000800 	.word	0x40000800

08002d3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f023 0201 	bic.w	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f023 030a 	bic.w	r3, r3, #10
 8002d78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	621a      	str	r2, [r3, #32]
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f023 0210 	bic.w	r2, r3, #16
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	021b      	lsls	r3, r3, #8
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	031b      	lsls	r3, r3, #12
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002dea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	621a      	str	r2, [r3, #32]
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b087      	sub	sp, #28
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	f023 0210 	bic.w	r2, r3, #16
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	031b      	lsls	r3, r3, #12
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	621a      	str	r2, [r3, #32]
}
 8002e64:	bf00      	nop
 8002e66:	371c      	adds	r7, #28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b087      	sub	sp, #28
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f023 0303 	bic.w	r3, r3, #3
 8002e9a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002eaa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ebe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	621a      	str	r2, [r3, #32]
}
 8002eda:	bf00      	nop
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f10:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f22:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	031b      	lsls	r3, r3, #12
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f36:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	031b      	lsls	r3, r3, #12
 8002f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	621a      	str	r2, [r3, #32]
}
 8002f52:	bf00      	nop
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f043 0307 	orr.w	r3, r3, #7
 8002f7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	609a      	str	r2, [r3, #8]
}
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002faa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	021a      	lsls	r2, r3, #8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	609a      	str	r2, [r3, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b087      	sub	sp, #28
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f003 031f 	and.w	r3, r3, #31
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a1a      	ldr	r2, [r3, #32]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	401a      	ands	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a1a      	ldr	r2, [r3, #32]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	431a      	orrs	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	621a      	str	r2, [r3, #32]
}
 800300c:	bf00      	nop
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr
	...

08003018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800302c:	2302      	movs	r3, #2
 800302e:	e046      	b.n	80030be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003056:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a16      	ldr	r2, [pc, #88]	@ (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00e      	beq.n	8003092 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800307c:	d009      	beq.n	8003092 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a12      	ldr	r2, [pc, #72]	@ (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a10      	ldr	r2, [pc, #64]	@ (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d10c      	bne.n	80030ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40000400 	.word	0x40000400
 80030d0:	40000800 	.word	0x40000800

080030d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e042      	b.n	8003190 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d106      	bne.n	8003124 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fd fec6 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2224      	movs	r2, #36	@ 0x24
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800313a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f92b 	bl	8003398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003150:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003160:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003170:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08a      	sub	sp, #40	@ 0x28
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d17c      	bne.n	80032b2 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_UART_Receive+0x2c>
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e075      	b.n	80032b4 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2222      	movs	r2, #34	@ 0x22
 80031d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031dc:	f7fd ff02 	bl	8000fe4 <HAL_GetTick>
 80031e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	88fa      	ldrh	r2, [r7, #6]
 80031e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	88fa      	ldrh	r2, [r7, #6]
 80031ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031f6:	d108      	bne.n	800320a <HAL_UART_Receive+0x72>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d104      	bne.n	800320a <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003200:	2300      	movs	r3, #0
 8003202:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	61bb      	str	r3, [r7, #24]
 8003208:	e003      	b.n	8003212 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800320e:	2300      	movs	r3, #0
 8003210:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003212:	e043      	b.n	800329c <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2200      	movs	r2, #0
 800321c:	2120      	movs	r1, #32
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f84c 	bl	80032bc <UART_WaitOnFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e042      	b.n	80032b4 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10c      	bne.n	800324e <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	b29b      	uxth	r3, r3
 800323c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003240:	b29a      	uxth	r2, r3
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	3302      	adds	r3, #2
 800324a:	61bb      	str	r3, [r7, #24]
 800324c:	e01f      	b.n	800328e <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003256:	d007      	beq.n	8003268 <HAL_UART_Receive+0xd0>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <HAL_UART_Receive+0xde>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	e008      	b.n	8003288 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003282:	b2da      	uxtb	r2, r3
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	3301      	adds	r3, #1
 800328c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1b6      	bne.n	8003214 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	e000      	b.n	80032b4 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032b2:	2302      	movs	r3, #2
  }
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3720      	adds	r7, #32
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b090      	sub	sp, #64	@ 0x40
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	4613      	mov	r3, r2
 80032ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032cc:	e050      	b.n	8003370 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d04c      	beq.n	8003370 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <UART_WaitOnFlagUntilTimeout+0x30>
 80032dc:	f7fd fe82 	bl	8000fe4 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d241      	bcs.n	8003370 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f6:	e853 3f00 	ldrex	r3, [r3]
 80032fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80032fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fe:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003302:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	330c      	adds	r3, #12
 800330a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800330c:	637a      	str	r2, [r7, #52]	@ 0x34
 800330e:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003310:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003314:	e841 2300 	strex	r3, r2, [r1]
 8003318:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800331a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1e5      	bne.n	80032ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3314      	adds	r3, #20
 8003326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	e853 3f00 	ldrex	r3, [r3]
 800332e:	613b      	str	r3, [r7, #16]
   return(result);
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f023 0301 	bic.w	r3, r3, #1
 8003336:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3314      	adds	r3, #20
 800333e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003340:	623a      	str	r2, [r7, #32]
 8003342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003344:	69f9      	ldr	r1, [r7, #28]
 8003346:	6a3a      	ldr	r2, [r7, #32]
 8003348:	e841 2300 	strex	r3, r2, [r1]
 800334c:	61bb      	str	r3, [r7, #24]
   return(result);
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e5      	bne.n	8003320 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e00f      	b.n	8003390 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	4013      	ands	r3, r2
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	429a      	cmp	r2, r3
 800337e:	bf0c      	ite	eq
 8003380:	2301      	moveq	r3, #1
 8003382:	2300      	movne	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	429a      	cmp	r2, r3
 800338c:	d09f      	beq.n	80032ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3740      	adds	r7, #64	@ 0x40
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80033d2:	f023 030c 	bic.w	r3, r3, #12
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	430b      	orrs	r3, r1
 80033de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a2c      	ldr	r2, [pc, #176]	@ (80034ac <UART_SetConfig+0x114>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d103      	bne.n	8003408 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003400:	f7fe fc54 	bl	8001cac <HAL_RCC_GetPCLK2Freq>
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	e002      	b.n	800340e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003408:	f7fe fc3c 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 800340c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	009a      	lsls	r2, r3, #2
 8003418:	441a      	add	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	4a22      	ldr	r2, [pc, #136]	@ (80034b0 <UART_SetConfig+0x118>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	0119      	lsls	r1, r3, #4
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	009a      	lsls	r2, r3, #2
 8003438:	441a      	add	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	fbb2 f2f3 	udiv	r2, r2, r3
 8003444:	4b1a      	ldr	r3, [pc, #104]	@ (80034b0 <UART_SetConfig+0x118>)
 8003446:	fba3 0302 	umull	r0, r3, r3, r2
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	2064      	movs	r0, #100	@ 0x64
 800344e:	fb00 f303 	mul.w	r3, r0, r3
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	3332      	adds	r3, #50	@ 0x32
 8003458:	4a15      	ldr	r2, [pc, #84]	@ (80034b0 <UART_SetConfig+0x118>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003464:	4419      	add	r1, r3
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	009a      	lsls	r2, r3, #2
 8003470:	441a      	add	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	fbb2 f2f3 	udiv	r2, r2, r3
 800347c:	4b0c      	ldr	r3, [pc, #48]	@ (80034b0 <UART_SetConfig+0x118>)
 800347e:	fba3 0302 	umull	r0, r3, r3, r2
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	2064      	movs	r0, #100	@ 0x64
 8003486:	fb00 f303 	mul.w	r3, r0, r3
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	3332      	adds	r3, #50	@ 0x32
 8003490:	4a07      	ldr	r2, [pc, #28]	@ (80034b0 <UART_SetConfig+0x118>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	f003 020f 	and.w	r2, r3, #15
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	440a      	add	r2, r1
 80034a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40013800 	.word	0x40013800
 80034b0:	51eb851f 	.word	0x51eb851f

080034b4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034ba:	f3ef 8305 	mrs	r3, IPSR
 80034be:	60bb      	str	r3, [r7, #8]
  return(result);
 80034c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10f      	bne.n	80034e6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034c6:	f3ef 8310 	mrs	r3, PRIMASK
 80034ca:	607b      	str	r3, [r7, #4]
  return(result);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <osKernelInitialize+0x32>
 80034d2:	4b10      	ldr	r3, [pc, #64]	@ (8003514 <osKernelInitialize+0x60>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d109      	bne.n	80034ee <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034da:	f3ef 8311 	mrs	r3, BASEPRI
 80034de:	603b      	str	r3, [r7, #0]
  return(result);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80034e6:	f06f 0305 	mvn.w	r3, #5
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	e00c      	b.n	8003508 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80034ee:	4b09      	ldr	r3, [pc, #36]	@ (8003514 <osKernelInitialize+0x60>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d105      	bne.n	8003502 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80034f6:	4b07      	ldr	r3, [pc, #28]	@ (8003514 <osKernelInitialize+0x60>)
 80034f8:	2201      	movs	r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	e002      	b.n	8003508 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003502:	f04f 33ff 	mov.w	r3, #4294967295
 8003506:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003508:	68fb      	ldr	r3, [r7, #12]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr
 8003514:	20000170 	.word	0x20000170

08003518 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800351e:	f3ef 8305 	mrs	r3, IPSR
 8003522:	60bb      	str	r3, [r7, #8]
  return(result);
 8003524:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10f      	bne.n	800354a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800352a:	f3ef 8310 	mrs	r3, PRIMASK
 800352e:	607b      	str	r3, [r7, #4]
  return(result);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <osKernelStart+0x32>
 8003536:	4b11      	ldr	r3, [pc, #68]	@ (800357c <osKernelStart+0x64>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d109      	bne.n	8003552 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800353e:	f3ef 8311 	mrs	r3, BASEPRI
 8003542:	603b      	str	r3, [r7, #0]
  return(result);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <osKernelStart+0x3a>
    stat = osErrorISR;
 800354a:	f06f 0305 	mvn.w	r3, #5
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	e00e      	b.n	8003570 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003552:	4b0a      	ldr	r3, [pc, #40]	@ (800357c <osKernelStart+0x64>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d107      	bne.n	800356a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800355a:	4b08      	ldr	r3, [pc, #32]	@ (800357c <osKernelStart+0x64>)
 800355c:	2202      	movs	r2, #2
 800355e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003560:	f001 f890 	bl	8004684 <vTaskStartScheduler>
      stat = osOK;
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	e002      	b.n	8003570 <osKernelStart+0x58>
    } else {
      stat = osError;
 800356a:	f04f 33ff 	mov.w	r3, #4294967295
 800356e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003570:	68fb      	ldr	r3, [r7, #12]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000170 	.word	0x20000170

08003580 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b092      	sub	sp, #72	@ 0x48
 8003584:	af04      	add	r7, sp, #16
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003590:	f3ef 8305 	mrs	r3, IPSR
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003598:	2b00      	cmp	r3, #0
 800359a:	f040 8094 	bne.w	80036c6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800359e:	f3ef 8310 	mrs	r3, PRIMASK
 80035a2:	623b      	str	r3, [r7, #32]
  return(result);
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f040 808d 	bne.w	80036c6 <osThreadNew+0x146>
 80035ac:	4b48      	ldr	r3, [pc, #288]	@ (80036d0 <osThreadNew+0x150>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d106      	bne.n	80035c2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035b4:	f3ef 8311 	mrs	r3, BASEPRI
 80035b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f040 8082 	bne.w	80036c6 <osThreadNew+0x146>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d07e      	beq.n	80036c6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80035c8:	2380      	movs	r3, #128	@ 0x80
 80035ca:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80035cc:	2318      	movs	r3, #24
 80035ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80035d0:	2300      	movs	r3, #0
 80035d2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80035d4:	f107 031b 	add.w	r3, r7, #27
 80035d8:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
 80035de:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d045      	beq.n	8003672 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <osThreadNew+0x74>
        name = attr->name;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <osThreadNew+0x9a>
 8003608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800360a:	2b38      	cmp	r3, #56	@ 0x38
 800360c:	d805      	bhi.n	800361a <osThreadNew+0x9a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <osThreadNew+0x9e>
        return (NULL);
 800361a:	2300      	movs	r3, #0
 800361c:	e054      	b.n	80036c8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	089b      	lsrs	r3, r3, #2
 800362c:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00e      	beq.n	8003654 <osThreadNew+0xd4>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b5b      	cmp	r3, #91	@ 0x5b
 800363c:	d90a      	bls.n	8003654 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003642:	2b00      	cmp	r3, #0
 8003644:	d006      	beq.n	8003654 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <osThreadNew+0xd4>
        mem = 1;
 800364e:	2301      	movs	r3, #1
 8003650:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003652:	e010      	b.n	8003676 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10c      	bne.n	8003676 <osThreadNew+0xf6>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d108      	bne.n	8003676 <osThreadNew+0xf6>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d104      	bne.n	8003676 <osThreadNew+0xf6>
          mem = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003670:	e001      	b.n	8003676 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8003676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003678:	2b01      	cmp	r3, #1
 800367a:	d110      	bne.n	800369e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003684:	9202      	str	r2, [sp, #8]
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003690:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 fe24 	bl	80042e0 <xTaskCreateStatic>
 8003698:	4603      	mov	r3, r0
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	e013      	b.n	80036c6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800369e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d110      	bne.n	80036c6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80036a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	f107 0314 	add.w	r3, r7, #20
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fe71 	bl	800439e <xTaskCreate>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d001      	beq.n	80036c6 <osThreadNew+0x146>
          hTask = NULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80036c6:	697b      	ldr	r3, [r7, #20]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3738      	adds	r7, #56	@ 0x38
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20000170 	.word	0x20000170

080036d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036dc:	f3ef 8305 	mrs	r3, IPSR
 80036e0:	613b      	str	r3, [r7, #16]
  return(result);
 80036e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10f      	bne.n	8003708 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e8:	f3ef 8310 	mrs	r3, PRIMASK
 80036ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d109      	bne.n	8003708 <osDelay+0x34>
 80036f4:	4b0d      	ldr	r3, [pc, #52]	@ (800372c <osDelay+0x58>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d109      	bne.n	8003710 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036fc:	f3ef 8311 	mrs	r3, BASEPRI
 8003700:	60bb      	str	r3, [r7, #8]
  return(result);
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <osDelay+0x3c>
    stat = osErrorISR;
 8003708:	f06f 0305 	mvn.w	r3, #5
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	e007      	b.n	8003720 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <osDelay+0x4c>
      vTaskDelay(ticks);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 ff7c 	bl	8004618 <vTaskDelay>
    }
  }

  return (stat);
 8003720:	697b      	ldr	r3, [r7, #20]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000170 	.word	0x20000170

08003730 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a06      	ldr	r2, [pc, #24]	@ (8003758 <vApplicationGetIdleTaskMemory+0x28>)
 8003740:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4a05      	ldr	r2, [pc, #20]	@ (800375c <vApplicationGetIdleTaskMemory+0x2c>)
 8003746:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2280      	movs	r2, #128	@ 0x80
 800374c:	601a      	str	r2, [r3, #0]
}
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	20000174 	.word	0x20000174
 800375c:	200001d0 	.word	0x200001d0

08003760 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a07      	ldr	r2, [pc, #28]	@ (800378c <vApplicationGetTimerTaskMemory+0x2c>)
 8003770:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4a06      	ldr	r2, [pc, #24]	@ (8003790 <vApplicationGetTimerTaskMemory+0x30>)
 8003776:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800377e:	601a      	str	r2, [r3, #0]
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	200003d0 	.word	0x200003d0
 8003790:	2000042c 	.word	0x2000042c

08003794 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f103 0208 	add.w	r2, r3, #8
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f103 0208 	add.w	r2, r3, #8
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f103 0208 	add.w	r2, r3, #8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr

080037d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	601a      	str	r2, [r3, #0]
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr

08003830 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d103      	bne.n	8003850 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	e00c      	b.n	800386a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3308      	adds	r3, #8
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e002      	b.n	800385e <vListInsert+0x2e>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	429a      	cmp	r2, r3
 8003868:	d2f6      	bcs.n	8003858 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	601a      	str	r2, [r3, #0]
}
 8003896:	bf00      	nop
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6892      	ldr	r2, [r2, #8]
 80038b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6852      	ldr	r2, [r2, #4]
 80038c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d103      	bne.n	80038d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	1e5a      	subs	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr
	...

080038f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10b      	bne.n	8003920 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800391a:	bf00      	nop
 800391c:	bf00      	nop
 800391e:	e7fd      	b.n	800391c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003920:	f001 fffc 	bl	800591c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800392c:	68f9      	ldr	r1, [r7, #12]
 800392e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003930:	fb01 f303 	mul.w	r3, r1, r3
 8003934:	441a      	add	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003950:	3b01      	subs	r3, #1
 8003952:	68f9      	ldr	r1, [r7, #12]
 8003954:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003956:	fb01 f303 	mul.w	r3, r1, r3
 800395a:	441a      	add	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	22ff      	movs	r2, #255	@ 0xff
 8003964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	22ff      	movs	r2, #255	@ 0xff
 800396c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d114      	bne.n	80039a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01a      	beq.n	80039b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3310      	adds	r3, #16
 8003982:	4618      	mov	r0, r3
 8003984:	f001 f910 	bl	8004ba8 <xTaskRemoveFromEventList>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d012      	beq.n	80039b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800398e:	4b0d      	ldr	r3, [pc, #52]	@ (80039c4 <xQueueGenericReset+0xd0>)
 8003990:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	e009      	b.n	80039b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3310      	adds	r3, #16
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fef5 	bl	8003794 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3324      	adds	r3, #36	@ 0x24
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fef0 	bl	8003794 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039b4:	f001 ffe2 	bl	800597c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039b8:	2301      	movs	r3, #1
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	e000ed04 	.word	0xe000ed04

080039c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08e      	sub	sp, #56	@ 0x38
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10b      	bne.n	80039f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80039dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e0:	f383 8811 	msr	BASEPRI, r3
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80039ee:	bf00      	nop
 80039f0:	bf00      	nop
 80039f2:	e7fd      	b.n	80039f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10b      	bne.n	8003a12 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80039fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	e7fd      	b.n	8003a0e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <xQueueGenericCreateStatic+0x56>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <xQueueGenericCreateStatic+0x5a>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <xQueueGenericCreateStatic+0x5c>
 8003a22:	2300      	movs	r3, #0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10b      	bne.n	8003a40 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	623b      	str	r3, [r7, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	bf00      	nop
 8003a3e:	e7fd      	b.n	8003a3c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d102      	bne.n	8003a4c <xQueueGenericCreateStatic+0x84>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <xQueueGenericCreateStatic+0x88>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <xQueueGenericCreateStatic+0x8a>
 8003a50:	2300      	movs	r3, #0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10b      	bne.n	8003a6e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	61fb      	str	r3, [r7, #28]
}
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
 8003a6c:	e7fd      	b.n	8003a6a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a6e:	2350      	movs	r3, #80	@ 0x50
 8003a70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b50      	cmp	r3, #80	@ 0x50
 8003a76:	d00b      	beq.n	8003a90 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	61bb      	str	r3, [r7, #24]
}
 8003a8a:	bf00      	nop
 8003a8c:	bf00      	nop
 8003a8e:	e7fd      	b.n	8003a8c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00d      	beq.n	8003ab6 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003aa2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f805 	bl	8003ac0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3730      	adds	r7, #48	@ 0x30
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d103      	bne.n	8003adc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e002      	b.n	8003ae2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003aee:	2101      	movs	r1, #1
 8003af0:	69b8      	ldr	r0, [r7, #24]
 8003af2:	f7ff feff 	bl	80038f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003afe:	bf00      	nop
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08e      	sub	sp, #56	@ 0x38
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b16:	2300      	movs	r3, #0
 8003b18:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <xQueueGenericSend+0x34>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b36:	bf00      	nop
 8003b38:	bf00      	nop
 8003b3a:	e7fd      	b.n	8003b38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d103      	bne.n	8003b4a <xQueueGenericSend+0x42>
 8003b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <xQueueGenericSend+0x46>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <xQueueGenericSend+0x48>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10b      	bne.n	8003b6c <xQueueGenericSend+0x64>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b66:	bf00      	nop
 8003b68:	bf00      	nop
 8003b6a:	e7fd      	b.n	8003b68 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d103      	bne.n	8003b7a <xQueueGenericSend+0x72>
 8003b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <xQueueGenericSend+0x76>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <xQueueGenericSend+0x78>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <xQueueGenericSend+0x94>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	623b      	str	r3, [r7, #32]
}
 8003b96:	bf00      	nop
 8003b98:	bf00      	nop
 8003b9a:	e7fd      	b.n	8003b98 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b9c:	f001 f9c8 	bl	8004f30 <xTaskGetSchedulerState>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <xQueueGenericSend+0xa4>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <xQueueGenericSend+0xa8>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <xQueueGenericSend+0xaa>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10b      	bne.n	8003bce <xQueueGenericSend+0xc6>
	__asm volatile
 8003bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	61fb      	str	r3, [r7, #28]
}
 8003bc8:	bf00      	nop
 8003bca:	bf00      	nop
 8003bcc:	e7fd      	b.n	8003bca <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bce:	f001 fea5 	bl	800591c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d302      	bcc.n	8003be4 <xQueueGenericSend+0xdc>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d129      	bne.n	8003c38 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bea:	f000 fa0d 	bl	8004008 <prvCopyDataToQueue>
 8003bee:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d010      	beq.n	8003c1a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfa:	3324      	adds	r3, #36	@ 0x24
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 ffd3 	bl	8004ba8 <xTaskRemoveFromEventList>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d013      	beq.n	8003c30 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c08:	4b3f      	ldr	r3, [pc, #252]	@ (8003d08 <xQueueGenericSend+0x200>)
 8003c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	e00a      	b.n	8003c30 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d007      	beq.n	8003c30 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c20:	4b39      	ldr	r3, [pc, #228]	@ (8003d08 <xQueueGenericSend+0x200>)
 8003c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c30:	f001 fea4 	bl	800597c <vPortExitCritical>
				return pdPASS;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e063      	b.n	8003d00 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d103      	bne.n	8003c46 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c3e:	f001 fe9d 	bl	800597c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	e05c      	b.n	8003d00 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d106      	bne.n	8003c5a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c4c:	f107 0314 	add.w	r3, r7, #20
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 f80d 	bl	8004c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c56:	2301      	movs	r3, #1
 8003c58:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c5a:	f001 fe8f 	bl	800597c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c5e:	f000 fd79 	bl	8004754 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c62:	f001 fe5b 	bl	800591c <vPortEnterCritical>
 8003c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c6c:	b25b      	sxtb	r3, r3
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c72:	d103      	bne.n	8003c7c <xQueueGenericSend+0x174>
 8003c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c82:	b25b      	sxtb	r3, r3
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d103      	bne.n	8003c92 <xQueueGenericSend+0x18a>
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c92:	f001 fe73 	bl	800597c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c96:	1d3a      	adds	r2, r7, #4
 8003c98:	f107 0314 	add.w	r3, r7, #20
 8003c9c:	4611      	mov	r1, r2
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fffc 	bl	8004c9c <xTaskCheckForTimeOut>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d124      	bne.n	8003cf4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003caa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cac:	f000 faa4 	bl	80041f8 <prvIsQueueFull>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d018      	beq.n	8003ce8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb8:	3310      	adds	r3, #16
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 ff20 	bl	8004b04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003cc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cc6:	f000 fa2f 	bl	8004128 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003cca:	f000 fd51 	bl	8004770 <xTaskResumeAll>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f47f af7c 	bne.w	8003bce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003d08 <xQueueGenericSend+0x200>)
 8003cd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	e772      	b.n	8003bce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ce8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cea:	f000 fa1d 	bl	8004128 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cee:	f000 fd3f 	bl	8004770 <xTaskResumeAll>
 8003cf2:	e76c      	b.n	8003bce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003cf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cf6:	f000 fa17 	bl	8004128 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cfa:	f000 fd39 	bl	8004770 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cfe:	2300      	movs	r3, #0
		}
	}
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3738      	adds	r7, #56	@ 0x38
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	e000ed04 	.word	0xe000ed04

08003d0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08e      	sub	sp, #56	@ 0x38
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10b      	bne.n	8003d3c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d36:	bf00      	nop
 8003d38:	bf00      	nop
 8003d3a:	e7fd      	b.n	8003d38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d103      	bne.n	8003d4a <xQueueGenericSendFromISR+0x3e>
 8003d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <xQueueGenericSendFromISR+0x42>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <xQueueGenericSendFromISR+0x44>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10b      	bne.n	8003d6c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	623b      	str	r3, [r7, #32]
}
 8003d66:	bf00      	nop
 8003d68:	bf00      	nop
 8003d6a:	e7fd      	b.n	8003d68 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d103      	bne.n	8003d7a <xQueueGenericSendFromISR+0x6e>
 8003d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <xQueueGenericSendFromISR+0x72>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <xQueueGenericSendFromISR+0x74>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10b      	bne.n	8003d9c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	61fb      	str	r3, [r7, #28]
}
 8003d96:	bf00      	nop
 8003d98:	bf00      	nop
 8003d9a:	e7fd      	b.n	8003d98 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d9c:	f001 fe80 	bl	8005aa0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003da0:	f3ef 8211 	mrs	r2, BASEPRI
 8003da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	61ba      	str	r2, [r7, #24]
 8003db6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003db8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d302      	bcc.n	8003dce <xQueueGenericSendFromISR+0xc2>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d12c      	bne.n	8003e28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	68b9      	ldr	r1, [r7, #8]
 8003ddc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003dde:	f000 f913 	bl	8004008 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003de2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dea:	d112      	bne.n	8003e12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d016      	beq.n	8003e22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df6:	3324      	adds	r3, #36	@ 0x24
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fed5 	bl	8004ba8 <xTaskRemoveFromEventList>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00e      	beq.n	8003e22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e007      	b.n	8003e22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e16:	3301      	adds	r3, #1
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	b25a      	sxtb	r2, r3
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003e22:	2301      	movs	r3, #1
 8003e24:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003e26:	e001      	b.n	8003e2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3738      	adds	r7, #56	@ 0x38
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08c      	sub	sp, #48	@ 0x30
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e50:	2300      	movs	r3, #0
 8003e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <xQueueReceive+0x32>
	__asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	623b      	str	r3, [r7, #32]
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	e7fd      	b.n	8003e72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d103      	bne.n	8003e84 <xQueueReceive+0x40>
 8003e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <xQueueReceive+0x44>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <xQueueReceive+0x46>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10b      	bne.n	8003ea6 <xQueueReceive+0x62>
	__asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	61fb      	str	r3, [r7, #28]
}
 8003ea0:	bf00      	nop
 8003ea2:	bf00      	nop
 8003ea4:	e7fd      	b.n	8003ea2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ea6:	f001 f843 	bl	8004f30 <xTaskGetSchedulerState>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d102      	bne.n	8003eb6 <xQueueReceive+0x72>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <xQueueReceive+0x76>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <xQueueReceive+0x78>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10b      	bne.n	8003ed8 <xQueueReceive+0x94>
	__asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	61bb      	str	r3, [r7, #24]
}
 8003ed2:	bf00      	nop
 8003ed4:	bf00      	nop
 8003ed6:	e7fd      	b.n	8003ed4 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ed8:	f001 fd20 	bl	800591c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01f      	beq.n	8003f28 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eec:	f000 f8f6 	bl	80040dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	1e5a      	subs	r2, r3, #1
 8003ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00f      	beq.n	8003f20 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f02:	3310      	adds	r3, #16
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fe4f 	bl	8004ba8 <xTaskRemoveFromEventList>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f10:	4b3c      	ldr	r3, [pc, #240]	@ (8004004 <xQueueReceive+0x1c0>)
 8003f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f20:	f001 fd2c 	bl	800597c <vPortExitCritical>
				return pdPASS;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e069      	b.n	8003ffc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f2e:	f001 fd25 	bl	800597c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e062      	b.n	8003ffc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d106      	bne.n	8003f4a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f3c:	f107 0310 	add.w	r3, r7, #16
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fe95 	bl	8004c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f46:	2301      	movs	r3, #1
 8003f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f4a:	f001 fd17 	bl	800597c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f4e:	f000 fc01 	bl	8004754 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f52:	f001 fce3 	bl	800591c <vPortEnterCritical>
 8003f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f5c:	b25b      	sxtb	r3, r3
 8003f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f62:	d103      	bne.n	8003f6c <xQueueReceive+0x128>
 8003f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f72:	b25b      	sxtb	r3, r3
 8003f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f78:	d103      	bne.n	8003f82 <xQueueReceive+0x13e>
 8003f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f82:	f001 fcfb 	bl	800597c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f86:	1d3a      	adds	r2, r7, #4
 8003f88:	f107 0310 	add.w	r3, r7, #16
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fe84 	bl	8004c9c <xTaskCheckForTimeOut>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d123      	bne.n	8003fe2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f9c:	f000 f916 	bl	80041cc <prvIsQueueEmpty>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d017      	beq.n	8003fd6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa8:	3324      	adds	r3, #36	@ 0x24
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	4611      	mov	r1, r2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fda8 	bl	8004b04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fb6:	f000 f8b7 	bl	8004128 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fba:	f000 fbd9 	bl	8004770 <xTaskResumeAll>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d189      	bne.n	8003ed8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004004 <xQueueReceive+0x1c0>)
 8003fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	e780      	b.n	8003ed8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003fd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fd8:	f000 f8a6 	bl	8004128 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fdc:	f000 fbc8 	bl	8004770 <xTaskResumeAll>
 8003fe0:	e77a      	b.n	8003ed8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003fe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fe4:	f000 f8a0 	bl	8004128 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fe8:	f000 fbc2 	bl	8004770 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fee:	f000 f8ed 	bl	80041cc <prvIsQueueEmpty>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f43f af6f 	beq.w	8003ed8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ffa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3730      	adds	r7, #48	@ 0x30
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	e000ed04 	.word	0xe000ed04

08004008 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10d      	bne.n	8004042 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d14d      	bne.n	80040ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4618      	mov	r0, r3
 8004034:	f000 ff9a 	bl	8004f6c <xTaskPriorityDisinherit>
 8004038:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	e043      	b.n	80040ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d119      	bne.n	800407c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6898      	ldr	r0, [r3, #8]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	461a      	mov	r2, r3
 8004052:	68b9      	ldr	r1, [r7, #8]
 8004054:	f001 ff6e 	bl	8005f34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004060:	441a      	add	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	429a      	cmp	r2, r3
 8004070:	d32b      	bcc.n	80040ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	609a      	str	r2, [r3, #8]
 800407a:	e026      	b.n	80040ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	68d8      	ldr	r0, [r3, #12]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	461a      	mov	r2, r3
 8004086:	68b9      	ldr	r1, [r7, #8]
 8004088:	f001 ff54 	bl	8005f34 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004094:	425b      	negs	r3, r3
 8004096:	441a      	add	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d207      	bcs.n	80040b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b0:	425b      	negs	r3, r3
 80040b2:	441a      	add	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d105      	bne.n	80040ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80040d2:	697b      	ldr	r3, [r7, #20]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d018      	beq.n	8004120 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	441a      	add	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	429a      	cmp	r2, r3
 8004106:	d303      	bcc.n	8004110 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68d9      	ldr	r1, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004118:	461a      	mov	r2, r3
 800411a:	6838      	ldr	r0, [r7, #0]
 800411c:	f001 ff0a 	bl	8005f34 <memcpy>
	}
}
 8004120:	bf00      	nop
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004130:	f001 fbf4 	bl	800591c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800413a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800413c:	e011      	b.n	8004162 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004142:	2b00      	cmp	r3, #0
 8004144:	d012      	beq.n	800416c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3324      	adds	r3, #36	@ 0x24
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fd2c 	bl	8004ba8 <xTaskRemoveFromEventList>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004156:	f000 fe05 	bl	8004d64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	3b01      	subs	r3, #1
 800415e:	b2db      	uxtb	r3, r3
 8004160:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004166:	2b00      	cmp	r3, #0
 8004168:	dce9      	bgt.n	800413e <prvUnlockQueue+0x16>
 800416a:	e000      	b.n	800416e <prvUnlockQueue+0x46>
					break;
 800416c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	22ff      	movs	r2, #255	@ 0xff
 8004172:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004176:	f001 fc01 	bl	800597c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800417a:	f001 fbcf 	bl	800591c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004184:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004186:	e011      	b.n	80041ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d012      	beq.n	80041b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3310      	adds	r3, #16
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fd07 	bl	8004ba8 <xTaskRemoveFromEventList>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041a0:	f000 fde0 	bl	8004d64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041a4:	7bbb      	ldrb	r3, [r7, #14]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	dce9      	bgt.n	8004188 <prvUnlockQueue+0x60>
 80041b4:	e000      	b.n	80041b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	22ff      	movs	r2, #255	@ 0xff
 80041bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80041c0:	f001 fbdc 	bl	800597c <vPortExitCritical>
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041d4:	f001 fba2 	bl	800591c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041e0:	2301      	movs	r3, #1
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e001      	b.n	80041ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041ea:	f001 fbc7 	bl	800597c <vPortExitCritical>

	return xReturn;
 80041ee:	68fb      	ldr	r3, [r7, #12]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004200:	f001 fb8c 	bl	800591c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420c:	429a      	cmp	r2, r3
 800420e:	d102      	bne.n	8004216 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004210:	2301      	movs	r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	e001      	b.n	800421a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800421a:	f001 fbaf 	bl	800597c <vPortExitCritical>

	return xReturn;
 800421e:	68fb      	ldr	r3, [r7, #12]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	e014      	b.n	8004262 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004238:	4a0e      	ldr	r2, [pc, #56]	@ (8004274 <vQueueAddToRegistry+0x4c>)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004244:	490b      	ldr	r1, [pc, #44]	@ (8004274 <vQueueAddToRegistry+0x4c>)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800424e:	4a09      	ldr	r2, [pc, #36]	@ (8004274 <vQueueAddToRegistry+0x4c>)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4413      	add	r3, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800425a:	e006      	b.n	800426a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3301      	adds	r3, #1
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b07      	cmp	r3, #7
 8004266:	d9e7      	bls.n	8004238 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr
 8004274:	2000082c 	.word	0x2000082c

08004278 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004288:	f001 fb48 	bl	800591c <vPortEnterCritical>
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004292:	b25b      	sxtb	r3, r3
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d103      	bne.n	80042a2 <vQueueWaitForMessageRestricted+0x2a>
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042a8:	b25b      	sxtb	r3, r3
 80042aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ae:	d103      	bne.n	80042b8 <vQueueWaitForMessageRestricted+0x40>
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042b8:	f001 fb60 	bl	800597c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d106      	bne.n	80042d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	3324      	adds	r3, #36	@ 0x24
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fc3f 	bl	8004b50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042d2:	6978      	ldr	r0, [r7, #20]
 80042d4:	f7ff ff28 	bl	8004128 <prvUnlockQueue>
	}
 80042d8:	bf00      	nop
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08e      	sub	sp, #56	@ 0x38
 80042e4:	af04      	add	r7, sp, #16
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10b      	bne.n	800430c <xTaskCreateStatic+0x2c>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	623b      	str	r3, [r7, #32]
}
 8004306:	bf00      	nop
 8004308:	bf00      	nop
 800430a:	e7fd      	b.n	8004308 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800430c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10b      	bne.n	800432a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	61fb      	str	r3, [r7, #28]
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	e7fd      	b.n	8004326 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800432a:	235c      	movs	r3, #92	@ 0x5c
 800432c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	2b5c      	cmp	r3, #92	@ 0x5c
 8004332:	d00b      	beq.n	800434c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	61bb      	str	r3, [r7, #24]
}
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	e7fd      	b.n	8004348 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800434c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800434e:	2b00      	cmp	r3, #0
 8004350:	d01e      	beq.n	8004390 <xTaskCreateStatic+0xb0>
 8004352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01b      	beq.n	8004390 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004360:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	2202      	movs	r2, #2
 8004366:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800436a:	2300      	movs	r3, #0
 800436c:	9303      	str	r3, [sp, #12]
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	9302      	str	r3, [sp, #8]
 8004372:	f107 0314 	add.w	r3, r7, #20
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f850 	bl	8004428 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004388:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800438a:	f000 f8d5 	bl	8004538 <prvAddNewTaskToReadyList>
 800438e:	e001      	b.n	8004394 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004394:	697b      	ldr	r3, [r7, #20]
	}
 8004396:	4618      	mov	r0, r3
 8004398:	3728      	adds	r7, #40	@ 0x28
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b08c      	sub	sp, #48	@ 0x30
 80043a2:	af04      	add	r7, sp, #16
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	603b      	str	r3, [r7, #0]
 80043aa:	4613      	mov	r3, r2
 80043ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ae:	88fb      	ldrh	r3, [r7, #6]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f001 fbb4 	bl	8005b20 <pvPortMalloc>
 80043b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00e      	beq.n	80043de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80043c0:	205c      	movs	r0, #92	@ 0x5c
 80043c2:	f001 fbad 	bl	8005b20 <pvPortMalloc>
 80043c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80043d4:	e005      	b.n	80043e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043d6:	6978      	ldr	r0, [r7, #20]
 80043d8:	f001 fc6a 	bl	8005cb0 <vPortFree>
 80043dc:	e001      	b.n	80043e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d017      	beq.n	8004418 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043f0:	88fa      	ldrh	r2, [r7, #6]
 80043f2:	2300      	movs	r3, #0
 80043f4:	9303      	str	r3, [sp, #12]
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	9302      	str	r3, [sp, #8]
 80043fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f80e 	bl	8004428 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800440c:	69f8      	ldr	r0, [r7, #28]
 800440e:	f000 f893 	bl	8004538 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004412:	2301      	movs	r3, #1
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	e002      	b.n	800441e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004418:	f04f 33ff 	mov.w	r3, #4294967295
 800441c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800441e:	69bb      	ldr	r3, [r7, #24]
	}
 8004420:	4618      	mov	r0, r3
 8004422:	3720      	adds	r7, #32
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004438:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	461a      	mov	r2, r3
 8004440:	21a5      	movs	r1, #165	@ 0xa5
 8004442:	f001 fd4b 	bl	8005edc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004448:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004450:	3b01      	subs	r3, #1
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	f023 0307 	bic.w	r3, r3, #7
 800445e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00b      	beq.n	8004482 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	617b      	str	r3, [r7, #20]
}
 800447c:	bf00      	nop
 800447e:	bf00      	nop
 8004480:	e7fd      	b.n	800447e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	e012      	b.n	80044ae <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	4413      	add	r3, r2
 800448e:	7819      	ldrb	r1, [r3, #0]
 8004490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	4413      	add	r3, r2
 8004496:	3334      	adds	r3, #52	@ 0x34
 8004498:	460a      	mov	r2, r1
 800449a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4413      	add	r3, r2
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d006      	beq.n	80044b6 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	3301      	adds	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	2b0f      	cmp	r3, #15
 80044b2:	d9e9      	bls.n	8004488 <prvInitialiseNewTask+0x60>
 80044b4:	e000      	b.n	80044b8 <prvInitialiseNewTask+0x90>
		{
			break;
 80044b6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c2:	2b37      	cmp	r3, #55	@ 0x37
 80044c4:	d901      	bls.n	80044ca <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044c6:	2337      	movs	r3, #55	@ 0x37
 80044c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044d4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80044d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d8:	2200      	movs	r2, #0
 80044da:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044de:	3304      	adds	r3, #4
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff f976 	bl	80037d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e8:	3318      	adds	r3, #24
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff f971 	bl	80037d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80044fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004504:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004508:	2200      	movs	r2, #0
 800450a:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800450c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	68f9      	ldr	r1, [r7, #12]
 8004518:	69b8      	ldr	r0, [r7, #24]
 800451a:	f001 f90b 	bl	8005734 <pxPortInitialiseStack>
 800451e:	4602      	mov	r2, r0
 8004520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004522:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800452a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800452e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004530:	bf00      	nop
 8004532:	3720      	adds	r7, #32
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004540:	f001 f9ec 	bl	800591c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004544:	4b2d      	ldr	r3, [pc, #180]	@ (80045fc <prvAddNewTaskToReadyList+0xc4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3301      	adds	r3, #1
 800454a:	4a2c      	ldr	r2, [pc, #176]	@ (80045fc <prvAddNewTaskToReadyList+0xc4>)
 800454c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800454e:	4b2c      	ldr	r3, [pc, #176]	@ (8004600 <prvAddNewTaskToReadyList+0xc8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d109      	bne.n	800456a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004556:	4a2a      	ldr	r2, [pc, #168]	@ (8004600 <prvAddNewTaskToReadyList+0xc8>)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800455c:	4b27      	ldr	r3, [pc, #156]	@ (80045fc <prvAddNewTaskToReadyList+0xc4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d110      	bne.n	8004586 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004564:	f000 fc22 	bl	8004dac <prvInitialiseTaskLists>
 8004568:	e00d      	b.n	8004586 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800456a:	4b26      	ldr	r3, [pc, #152]	@ (8004604 <prvAddNewTaskToReadyList+0xcc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004572:	4b23      	ldr	r3, [pc, #140]	@ (8004600 <prvAddNewTaskToReadyList+0xc8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457c:	429a      	cmp	r2, r3
 800457e:	d802      	bhi.n	8004586 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004580:	4a1f      	ldr	r2, [pc, #124]	@ (8004600 <prvAddNewTaskToReadyList+0xc8>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004586:	4b20      	ldr	r3, [pc, #128]	@ (8004608 <prvAddNewTaskToReadyList+0xd0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3301      	adds	r3, #1
 800458c:	4a1e      	ldr	r2, [pc, #120]	@ (8004608 <prvAddNewTaskToReadyList+0xd0>)
 800458e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004590:	4b1d      	ldr	r3, [pc, #116]	@ (8004608 <prvAddNewTaskToReadyList+0xd0>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800459c:	4b1b      	ldr	r3, [pc, #108]	@ (800460c <prvAddNewTaskToReadyList+0xd4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d903      	bls.n	80045ac <prvAddNewTaskToReadyList+0x74>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a8:	4a18      	ldr	r2, [pc, #96]	@ (800460c <prvAddNewTaskToReadyList+0xd4>)
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b0:	4613      	mov	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4a15      	ldr	r2, [pc, #84]	@ (8004610 <prvAddNewTaskToReadyList+0xd8>)
 80045ba:	441a      	add	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3304      	adds	r3, #4
 80045c0:	4619      	mov	r1, r3
 80045c2:	4610      	mov	r0, r2
 80045c4:	f7ff f911 	bl	80037ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045c8:	f001 f9d8 	bl	800597c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004604 <prvAddNewTaskToReadyList+0xcc>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00e      	beq.n	80045f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <prvAddNewTaskToReadyList+0xc8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	429a      	cmp	r2, r3
 80045e0:	d207      	bcs.n	80045f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004614 <prvAddNewTaskToReadyList+0xdc>)
 80045e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000d40 	.word	0x20000d40
 8004600:	2000086c 	.word	0x2000086c
 8004604:	20000d4c 	.word	0x20000d4c
 8004608:	20000d5c 	.word	0x20000d5c
 800460c:	20000d48 	.word	0x20000d48
 8004610:	20000870 	.word	0x20000870
 8004614:	e000ed04 	.word	0xe000ed04

08004618 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d018      	beq.n	800465c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800462a:	4b14      	ldr	r3, [pc, #80]	@ (800467c <vTaskDelay+0x64>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00b      	beq.n	800464a <vTaskDelay+0x32>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	60bb      	str	r3, [r7, #8]
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop
 8004648:	e7fd      	b.n	8004646 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800464a:	f000 f883 	bl	8004754 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800464e:	2100      	movs	r1, #0
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fcfb 	bl	800504c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004656:	f000 f88b 	bl	8004770 <xTaskResumeAll>
 800465a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d107      	bne.n	8004672 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004662:	4b07      	ldr	r3, [pc, #28]	@ (8004680 <vTaskDelay+0x68>)
 8004664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004672:	bf00      	nop
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20000d68 	.word	0x20000d68
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	@ 0x28
 8004688:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800468e:	2300      	movs	r3, #0
 8004690:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004692:	463a      	mov	r2, r7
 8004694:	1d39      	adds	r1, r7, #4
 8004696:	f107 0308 	add.w	r3, r7, #8
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff f848 	bl	8003730 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	9202      	str	r2, [sp, #8]
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	2300      	movs	r3, #0
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	2300      	movs	r3, #0
 80046b0:	460a      	mov	r2, r1
 80046b2:	4922      	ldr	r1, [pc, #136]	@ (800473c <vTaskStartScheduler+0xb8>)
 80046b4:	4822      	ldr	r0, [pc, #136]	@ (8004740 <vTaskStartScheduler+0xbc>)
 80046b6:	f7ff fe13 	bl	80042e0 <xTaskCreateStatic>
 80046ba:	4603      	mov	r3, r0
 80046bc:	4a21      	ldr	r2, [pc, #132]	@ (8004744 <vTaskStartScheduler+0xc0>)
 80046be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046c0:	4b20      	ldr	r3, [pc, #128]	@ (8004744 <vTaskStartScheduler+0xc0>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046c8:	2301      	movs	r3, #1
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	e001      	b.n	80046d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d102      	bne.n	80046de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046d8:	f000 fd0c 	bl	80050f4 <xTimerCreateTimerTask>
 80046dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d116      	bne.n	8004712 <vTaskStartScheduler+0x8e>
	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	613b      	str	r3, [r7, #16]
}
 80046f6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046f8:	4b13      	ldr	r3, [pc, #76]	@ (8004748 <vTaskStartScheduler+0xc4>)
 80046fa:	f04f 32ff 	mov.w	r2, #4294967295
 80046fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004700:	4b12      	ldr	r3, [pc, #72]	@ (800474c <vTaskStartScheduler+0xc8>)
 8004702:	2201      	movs	r2, #1
 8004704:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004706:	4b12      	ldr	r3, [pc, #72]	@ (8004750 <vTaskStartScheduler+0xcc>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800470c:	f001 f894 	bl	8005838 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004710:	e00f      	b.n	8004732 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004718:	d10b      	bne.n	8004732 <vTaskStartScheduler+0xae>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	60fb      	str	r3, [r7, #12]
}
 800472c:	bf00      	nop
 800472e:	bf00      	nop
 8004730:	e7fd      	b.n	800472e <vTaskStartScheduler+0xaa>
}
 8004732:	bf00      	nop
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	08005f94 	.word	0x08005f94
 8004740:	08004d7d 	.word	0x08004d7d
 8004744:	20000d64 	.word	0x20000d64
 8004748:	20000d60 	.word	0x20000d60
 800474c:	20000d4c 	.word	0x20000d4c
 8004750:	20000d44 	.word	0x20000d44

08004754 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004758:	4b04      	ldr	r3, [pc, #16]	@ (800476c <vTaskSuspendAll+0x18>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3301      	adds	r3, #1
 800475e:	4a03      	ldr	r2, [pc, #12]	@ (800476c <vTaskSuspendAll+0x18>)
 8004760:	6013      	str	r3, [r2, #0]
}
 8004762:	bf00      	nop
 8004764:	46bd      	mov	sp, r7
 8004766:	bc80      	pop	{r7}
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	20000d68 	.word	0x20000d68

08004770 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800477a:	2300      	movs	r3, #0
 800477c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800477e:	4b42      	ldr	r3, [pc, #264]	@ (8004888 <xTaskResumeAll+0x118>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10b      	bne.n	800479e <xTaskResumeAll+0x2e>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	603b      	str	r3, [r7, #0]
}
 8004798:	bf00      	nop
 800479a:	bf00      	nop
 800479c:	e7fd      	b.n	800479a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800479e:	f001 f8bd 	bl	800591c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047a2:	4b39      	ldr	r3, [pc, #228]	@ (8004888 <xTaskResumeAll+0x118>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	4a37      	ldr	r2, [pc, #220]	@ (8004888 <xTaskResumeAll+0x118>)
 80047aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ac:	4b36      	ldr	r3, [pc, #216]	@ (8004888 <xTaskResumeAll+0x118>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d162      	bne.n	800487a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047b4:	4b35      	ldr	r3, [pc, #212]	@ (800488c <xTaskResumeAll+0x11c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d05e      	beq.n	800487a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047bc:	e02f      	b.n	800481e <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80047be:	4b34      	ldr	r3, [pc, #208]	@ (8004890 <xTaskResumeAll+0x120>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3318      	adds	r3, #24
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff f868 	bl	80038a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3304      	adds	r3, #4
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff f863 	bl	80038a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047de:	4b2d      	ldr	r3, [pc, #180]	@ (8004894 <xTaskResumeAll+0x124>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d903      	bls.n	80047ee <xTaskResumeAll+0x7e>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004894 <xTaskResumeAll+0x124>)
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4a27      	ldr	r2, [pc, #156]	@ (8004898 <xTaskResumeAll+0x128>)
 80047fc:	441a      	add	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3304      	adds	r3, #4
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f7fe fff0 	bl	80037ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800480e:	4b23      	ldr	r3, [pc, #140]	@ (800489c <xTaskResumeAll+0x12c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004814:	429a      	cmp	r2, r3
 8004816:	d302      	bcc.n	800481e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004818:	4b21      	ldr	r3, [pc, #132]	@ (80048a0 <xTaskResumeAll+0x130>)
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800481e:	4b1c      	ldr	r3, [pc, #112]	@ (8004890 <xTaskResumeAll+0x120>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1cb      	bne.n	80047be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800482c:	f000 fb5c 	bl	8004ee8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004830:	4b1c      	ldr	r3, [pc, #112]	@ (80048a4 <xTaskResumeAll+0x134>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d010      	beq.n	800485e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800483c:	f000 f844 	bl	80048c8 <xTaskIncrementTick>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004846:	4b16      	ldr	r3, [pc, #88]	@ (80048a0 <xTaskResumeAll+0x130>)
 8004848:	2201      	movs	r2, #1
 800484a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3b01      	subs	r3, #1
 8004850:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f1      	bne.n	800483c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004858:	4b12      	ldr	r3, [pc, #72]	@ (80048a4 <xTaskResumeAll+0x134>)
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800485e:	4b10      	ldr	r3, [pc, #64]	@ (80048a0 <xTaskResumeAll+0x130>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004866:	2301      	movs	r3, #1
 8004868:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800486a:	4b0f      	ldr	r3, [pc, #60]	@ (80048a8 <xTaskResumeAll+0x138>)
 800486c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800487a:	f001 f87f 	bl	800597c <vPortExitCritical>

	return xAlreadyYielded;
 800487e:	68bb      	ldr	r3, [r7, #8]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	20000d68 	.word	0x20000d68
 800488c:	20000d40 	.word	0x20000d40
 8004890:	20000d00 	.word	0x20000d00
 8004894:	20000d48 	.word	0x20000d48
 8004898:	20000870 	.word	0x20000870
 800489c:	2000086c 	.word	0x2000086c
 80048a0:	20000d54 	.word	0x20000d54
 80048a4:	20000d50 	.word	0x20000d50
 80048a8:	e000ed04 	.word	0xe000ed04

080048ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048b2:	4b04      	ldr	r3, [pc, #16]	@ (80048c4 <xTaskGetTickCount+0x18>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048b8:	687b      	ldr	r3, [r7, #4]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr
 80048c4:	20000d44 	.word	0x20000d44

080048c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048d2:	4b52      	ldr	r3, [pc, #328]	@ (8004a1c <xTaskIncrementTick+0x154>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f040 808f 	bne.w	80049fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048dc:	4b50      	ldr	r3, [pc, #320]	@ (8004a20 <xTaskIncrementTick+0x158>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3301      	adds	r3, #1
 80048e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048e4:	4a4e      	ldr	r2, [pc, #312]	@ (8004a20 <xTaskIncrementTick+0x158>)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d121      	bne.n	8004934 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80048f0:	4b4c      	ldr	r3, [pc, #304]	@ (8004a24 <xTaskIncrementTick+0x15c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00b      	beq.n	8004912 <xTaskIncrementTick+0x4a>
	__asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	603b      	str	r3, [r7, #0]
}
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	e7fd      	b.n	800490e <xTaskIncrementTick+0x46>
 8004912:	4b44      	ldr	r3, [pc, #272]	@ (8004a24 <xTaskIncrementTick+0x15c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	4b43      	ldr	r3, [pc, #268]	@ (8004a28 <xTaskIncrementTick+0x160>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a41      	ldr	r2, [pc, #260]	@ (8004a24 <xTaskIncrementTick+0x15c>)
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	4a41      	ldr	r2, [pc, #260]	@ (8004a28 <xTaskIncrementTick+0x160>)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	4b41      	ldr	r3, [pc, #260]	@ (8004a2c <xTaskIncrementTick+0x164>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3301      	adds	r3, #1
 800492c:	4a3f      	ldr	r2, [pc, #252]	@ (8004a2c <xTaskIncrementTick+0x164>)
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	f000 fada 	bl	8004ee8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004934:	4b3e      	ldr	r3, [pc, #248]	@ (8004a30 <xTaskIncrementTick+0x168>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	429a      	cmp	r2, r3
 800493c:	d34e      	bcc.n	80049dc <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800493e:	4b39      	ldr	r3, [pc, #228]	@ (8004a24 <xTaskIncrementTick+0x15c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <xTaskIncrementTick+0x84>
 8004948:	2301      	movs	r3, #1
 800494a:	e000      	b.n	800494e <xTaskIncrementTick+0x86>
 800494c:	2300      	movs	r3, #0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d004      	beq.n	800495c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004952:	4b37      	ldr	r3, [pc, #220]	@ (8004a30 <xTaskIncrementTick+0x168>)
 8004954:	f04f 32ff 	mov.w	r2, #4294967295
 8004958:	601a      	str	r2, [r3, #0]
					break;
 800495a:	e03f      	b.n	80049dc <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800495c:	4b31      	ldr	r3, [pc, #196]	@ (8004a24 <xTaskIncrementTick+0x15c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	429a      	cmp	r2, r3
 8004972:	d203      	bcs.n	800497c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004974:	4a2e      	ldr	r2, [pc, #184]	@ (8004a30 <xTaskIncrementTick+0x168>)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6013      	str	r3, [r2, #0]
						break;
 800497a:	e02f      	b.n	80049dc <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	3304      	adds	r3, #4
 8004980:	4618      	mov	r0, r3
 8004982:	f7fe ff8d 	bl	80038a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498a:	2b00      	cmp	r3, #0
 800498c:	d004      	beq.n	8004998 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	3318      	adds	r3, #24
 8004992:	4618      	mov	r0, r3
 8004994:	f7fe ff84 	bl	80038a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800499c:	4b25      	ldr	r3, [pc, #148]	@ (8004a34 <xTaskIncrementTick+0x16c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d903      	bls.n	80049ac <xTaskIncrementTick+0xe4>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a8:	4a22      	ldr	r2, [pc, #136]	@ (8004a34 <xTaskIncrementTick+0x16c>)
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a38 <xTaskIncrementTick+0x170>)
 80049ba:	441a      	add	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	3304      	adds	r3, #4
 80049c0:	4619      	mov	r1, r3
 80049c2:	4610      	mov	r0, r2
 80049c4:	f7fe ff11 	bl	80037ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049cc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a3c <xTaskIncrementTick+0x174>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d3b3      	bcc.n	800493e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80049d6:	2301      	movs	r3, #1
 80049d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049da:	e7b0      	b.n	800493e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049dc:	4b17      	ldr	r3, [pc, #92]	@ (8004a3c <xTaskIncrementTick+0x174>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e2:	4915      	ldr	r1, [pc, #84]	@ (8004a38 <xTaskIncrementTick+0x170>)
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d907      	bls.n	8004a04 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80049f4:	2301      	movs	r3, #1
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	e004      	b.n	8004a04 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80049fa:	4b11      	ldr	r3, [pc, #68]	@ (8004a40 <xTaskIncrementTick+0x178>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3301      	adds	r3, #1
 8004a00:	4a0f      	ldr	r2, [pc, #60]	@ (8004a40 <xTaskIncrementTick+0x178>)
 8004a02:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a04:	4b0f      	ldr	r3, [pc, #60]	@ (8004a44 <xTaskIncrementTick+0x17c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a10:	697b      	ldr	r3, [r7, #20]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000d68 	.word	0x20000d68
 8004a20:	20000d44 	.word	0x20000d44
 8004a24:	20000cf8 	.word	0x20000cf8
 8004a28:	20000cfc 	.word	0x20000cfc
 8004a2c:	20000d58 	.word	0x20000d58
 8004a30:	20000d60 	.word	0x20000d60
 8004a34:	20000d48 	.word	0x20000d48
 8004a38:	20000870 	.word	0x20000870
 8004a3c:	2000086c 	.word	0x2000086c
 8004a40:	20000d50 	.word	0x20000d50
 8004a44:	20000d54 	.word	0x20000d54

08004a48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a4e:	4b28      	ldr	r3, [pc, #160]	@ (8004af0 <vTaskSwitchContext+0xa8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a56:	4b27      	ldr	r3, [pc, #156]	@ (8004af4 <vTaskSwitchContext+0xac>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a5c:	e042      	b.n	8004ae4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004a5e:	4b25      	ldr	r3, [pc, #148]	@ (8004af4 <vTaskSwitchContext+0xac>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004a64:	4b24      	ldr	r3, [pc, #144]	@ (8004af8 <vTaskSwitchContext+0xb0>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	e011      	b.n	8004a90 <vTaskSwitchContext+0x48>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <vTaskSwitchContext+0x42>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	607b      	str	r3, [r7, #4]
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop
 8004a88:	e7fd      	b.n	8004a86 <vTaskSwitchContext+0x3e>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	491a      	ldr	r1, [pc, #104]	@ (8004afc <vTaskSwitchContext+0xb4>)
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0e3      	beq.n	8004a6c <vTaskSwitchContext+0x24>
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4a13      	ldr	r2, [pc, #76]	@ (8004afc <vTaskSwitchContext+0xb4>)
 8004ab0:	4413      	add	r3, r2
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	605a      	str	r2, [r3, #4]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d104      	bne.n	8004ad4 <vTaskSwitchContext+0x8c>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	605a      	str	r2, [r3, #4]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	4a09      	ldr	r2, [pc, #36]	@ (8004b00 <vTaskSwitchContext+0xb8>)
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	4a06      	ldr	r2, [pc, #24]	@ (8004af8 <vTaskSwitchContext+0xb0>)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6013      	str	r3, [r2, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20000d68 	.word	0x20000d68
 8004af4:	20000d54 	.word	0x20000d54
 8004af8:	20000d48 	.word	0x20000d48
 8004afc:	20000870 	.word	0x20000870
 8004b00:	2000086c 	.word	0x2000086c

08004b04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10b      	bne.n	8004b2c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	60fb      	str	r3, [r7, #12]
}
 8004b26:	bf00      	nop
 8004b28:	bf00      	nop
 8004b2a:	e7fd      	b.n	8004b28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b2c:	4b07      	ldr	r3, [pc, #28]	@ (8004b4c <vTaskPlaceOnEventList+0x48>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3318      	adds	r3, #24
 8004b32:	4619      	mov	r1, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7fe fe7b 	bl	8003830 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	6838      	ldr	r0, [r7, #0]
 8004b3e:	f000 fa85 	bl	800504c <prvAddCurrentTaskToDelayedList>
}
 8004b42:	bf00      	nop
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	2000086c 	.word	0x2000086c

08004b50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10b      	bne.n	8004b7a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	617b      	str	r3, [r7, #20]
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
 8004b78:	e7fd      	b.n	8004b76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3318      	adds	r3, #24
 8004b80:	4619      	mov	r1, r3
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f7fe fe31 	bl	80037ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	68b8      	ldr	r0, [r7, #8]
 8004b98:	f000 fa58 	bl	800504c <prvAddCurrentTaskToDelayedList>
	}
 8004b9c:	bf00      	nop
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	2000086c 	.word	0x2000086c

08004ba8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10b      	bne.n	8004bd6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	60fb      	str	r3, [r7, #12]
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	e7fd      	b.n	8004bd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	3318      	adds	r3, #24
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe fe60 	bl	80038a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004be0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c58 <xTaskRemoveFromEventList+0xb0>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d11d      	bne.n	8004c24 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	3304      	adds	r3, #4
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fe fe57 	bl	80038a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf6:	4b19      	ldr	r3, [pc, #100]	@ (8004c5c <xTaskRemoveFromEventList+0xb4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d903      	bls.n	8004c06 <xTaskRemoveFromEventList+0x5e>
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	4a16      	ldr	r2, [pc, #88]	@ (8004c5c <xTaskRemoveFromEventList+0xb4>)
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4a13      	ldr	r2, [pc, #76]	@ (8004c60 <xTaskRemoveFromEventList+0xb8>)
 8004c14:	441a      	add	r2, r3
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	f7fe fde4 	bl	80037ea <vListInsertEnd>
 8004c22:	e005      	b.n	8004c30 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	3318      	adds	r3, #24
 8004c28:	4619      	mov	r1, r3
 8004c2a:	480e      	ldr	r0, [pc, #56]	@ (8004c64 <xTaskRemoveFromEventList+0xbc>)
 8004c2c:	f7fe fddd 	bl	80037ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c34:	4b0c      	ldr	r3, [pc, #48]	@ (8004c68 <xTaskRemoveFromEventList+0xc0>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d905      	bls.n	8004c4a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c42:	4b0a      	ldr	r3, [pc, #40]	@ (8004c6c <xTaskRemoveFromEventList+0xc4>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	e001      	b.n	8004c4e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004c4e:	697b      	ldr	r3, [r7, #20]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20000d68 	.word	0x20000d68
 8004c5c:	20000d48 	.word	0x20000d48
 8004c60:	20000870 	.word	0x20000870
 8004c64:	20000d00 	.word	0x20000d00
 8004c68:	2000086c 	.word	0x2000086c
 8004c6c:	20000d54 	.word	0x20000d54

08004c70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c78:	4b06      	ldr	r3, [pc, #24]	@ (8004c94 <vTaskInternalSetTimeOutState+0x24>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c80:	4b05      	ldr	r3, [pc, #20]	@ (8004c98 <vTaskInternalSetTimeOutState+0x28>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	605a      	str	r2, [r3, #4]
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	20000d58 	.word	0x20000d58
 8004c98:	20000d44 	.word	0x20000d44

08004c9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10b      	bne.n	8004cc4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	613b      	str	r3, [r7, #16]
}
 8004cbe:	bf00      	nop
 8004cc0:	bf00      	nop
 8004cc2:	e7fd      	b.n	8004cc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10b      	bne.n	8004ce2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	60fb      	str	r3, [r7, #12]
}
 8004cdc:	bf00      	nop
 8004cde:	bf00      	nop
 8004ce0:	e7fd      	b.n	8004cde <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004ce2:	f000 fe1b 	bl	800591c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8004d5c <xTaskCheckForTimeOut+0xc0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d102      	bne.n	8004d06 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	e023      	b.n	8004d4e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	4b15      	ldr	r3, [pc, #84]	@ (8004d60 <xTaskCheckForTimeOut+0xc4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d007      	beq.n	8004d22 <xTaskCheckForTimeOut+0x86>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d302      	bcc.n	8004d22 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	e015      	b.n	8004d4e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d20b      	bcs.n	8004d44 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	1ad2      	subs	r2, r2, r3
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff ff99 	bl	8004c70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61fb      	str	r3, [r7, #28]
 8004d42:	e004      	b.n	8004d4e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d4e:	f000 fe15 	bl	800597c <vPortExitCritical>

	return xReturn;
 8004d52:	69fb      	ldr	r3, [r7, #28]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3720      	adds	r7, #32
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20000d44 	.word	0x20000d44
 8004d60:	20000d58 	.word	0x20000d58

08004d64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d68:	4b03      	ldr	r3, [pc, #12]	@ (8004d78 <vTaskMissedYield+0x14>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
}
 8004d6e:	bf00      	nop
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20000d54 	.word	0x20000d54

08004d7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d84:	f000 f852 	bl	8004e2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d88:	4b06      	ldr	r3, [pc, #24]	@ (8004da4 <prvIdleTask+0x28>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d9f9      	bls.n	8004d84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d90:	4b05      	ldr	r3, [pc, #20]	@ (8004da8 <prvIdleTask+0x2c>)
 8004d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004da0:	e7f0      	b.n	8004d84 <prvIdleTask+0x8>
 8004da2:	bf00      	nop
 8004da4:	20000870 	.word	0x20000870
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004db2:	2300      	movs	r3, #0
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	e00c      	b.n	8004dd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4a12      	ldr	r2, [pc, #72]	@ (8004e0c <prvInitialiseTaskLists+0x60>)
 8004dc4:	4413      	add	r3, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fe fce4 	bl	8003794 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b37      	cmp	r3, #55	@ 0x37
 8004dd6:	d9ef      	bls.n	8004db8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004dd8:	480d      	ldr	r0, [pc, #52]	@ (8004e10 <prvInitialiseTaskLists+0x64>)
 8004dda:	f7fe fcdb 	bl	8003794 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dde:	480d      	ldr	r0, [pc, #52]	@ (8004e14 <prvInitialiseTaskLists+0x68>)
 8004de0:	f7fe fcd8 	bl	8003794 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004de4:	480c      	ldr	r0, [pc, #48]	@ (8004e18 <prvInitialiseTaskLists+0x6c>)
 8004de6:	f7fe fcd5 	bl	8003794 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004dea:	480c      	ldr	r0, [pc, #48]	@ (8004e1c <prvInitialiseTaskLists+0x70>)
 8004dec:	f7fe fcd2 	bl	8003794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004df0:	480b      	ldr	r0, [pc, #44]	@ (8004e20 <prvInitialiseTaskLists+0x74>)
 8004df2:	f7fe fccf 	bl	8003794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004df6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e24 <prvInitialiseTaskLists+0x78>)
 8004df8:	4a05      	ldr	r2, [pc, #20]	@ (8004e10 <prvInitialiseTaskLists+0x64>)
 8004dfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004e28 <prvInitialiseTaskLists+0x7c>)
 8004dfe:	4a05      	ldr	r2, [pc, #20]	@ (8004e14 <prvInitialiseTaskLists+0x68>)
 8004e00:	601a      	str	r2, [r3, #0]
}
 8004e02:	bf00      	nop
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000870 	.word	0x20000870
 8004e10:	20000cd0 	.word	0x20000cd0
 8004e14:	20000ce4 	.word	0x20000ce4
 8004e18:	20000d00 	.word	0x20000d00
 8004e1c:	20000d14 	.word	0x20000d14
 8004e20:	20000d2c 	.word	0x20000d2c
 8004e24:	20000cf8 	.word	0x20000cf8
 8004e28:	20000cfc 	.word	0x20000cfc

08004e2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e32:	e019      	b.n	8004e68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e34:	f000 fd72 	bl	800591c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004e38:	4b10      	ldr	r3, [pc, #64]	@ (8004e7c <prvCheckTasksWaitingTermination+0x50>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fe fd2b 	bl	80038a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e80 <prvCheckTasksWaitingTermination+0x54>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	4a0b      	ldr	r2, [pc, #44]	@ (8004e80 <prvCheckTasksWaitingTermination+0x54>)
 8004e52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e54:	4b0b      	ldr	r3, [pc, #44]	@ (8004e84 <prvCheckTasksWaitingTermination+0x58>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e84 <prvCheckTasksWaitingTermination+0x58>)
 8004e5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e5e:	f000 fd8d 	bl	800597c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f810 	bl	8004e88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e68:	4b06      	ldr	r3, [pc, #24]	@ (8004e84 <prvCheckTasksWaitingTermination+0x58>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e1      	bne.n	8004e34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e70:	bf00      	nop
 8004e72:	bf00      	nop
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000d14 	.word	0x20000d14
 8004e80:	20000d40 	.word	0x20000d40
 8004e84:	20000d28 	.word	0x20000d28

08004e88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d108      	bne.n	8004eac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 ff06 	bl	8005cb0 <vPortFree>
				vPortFree( pxTCB );
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 ff03 	bl	8005cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004eaa:	e019      	b.n	8004ee0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d103      	bne.n	8004ebe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fefa 	bl	8005cb0 <vPortFree>
	}
 8004ebc:	e010      	b.n	8004ee0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d00b      	beq.n	8004ee0 <prvDeleteTCB+0x58>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	60fb      	str	r3, [r7, #12]
}
 8004eda:	bf00      	nop
 8004edc:	bf00      	nop
 8004ede:	e7fd      	b.n	8004edc <prvDeleteTCB+0x54>
	}
 8004ee0:	bf00      	nop
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eee:	4b0e      	ldr	r3, [pc, #56]	@ (8004f28 <prvResetNextTaskUnblockTime+0x40>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <prvResetNextTaskUnblockTime+0x14>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e000      	b.n	8004efe <prvResetNextTaskUnblockTime+0x16>
 8004efc:	2300      	movs	r3, #0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d004      	beq.n	8004f0c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f02:	4b0a      	ldr	r3, [pc, #40]	@ (8004f2c <prvResetNextTaskUnblockTime+0x44>)
 8004f04:	f04f 32ff 	mov.w	r2, #4294967295
 8004f08:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f0a:	e008      	b.n	8004f1e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f0c:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <prvResetNextTaskUnblockTime+0x40>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	4a04      	ldr	r2, [pc, #16]	@ (8004f2c <prvResetNextTaskUnblockTime+0x44>)
 8004f1c:	6013      	str	r3, [r2, #0]
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr
 8004f28:	20000cf8 	.word	0x20000cf8
 8004f2c:	20000d60 	.word	0x20000d60

08004f30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f36:	4b0b      	ldr	r3, [pc, #44]	@ (8004f64 <xTaskGetSchedulerState+0x34>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d102      	bne.n	8004f44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	607b      	str	r3, [r7, #4]
 8004f42:	e008      	b.n	8004f56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f44:	4b08      	ldr	r3, [pc, #32]	@ (8004f68 <xTaskGetSchedulerState+0x38>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	607b      	str	r3, [r7, #4]
 8004f50:	e001      	b.n	8004f56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f52:	2300      	movs	r3, #0
 8004f54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f56:	687b      	ldr	r3, [r7, #4]
	}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000d4c 	.word	0x20000d4c
 8004f68:	20000d68 	.word	0x20000d68

08004f6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d058      	beq.n	8005034 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f82:	4b2f      	ldr	r3, [pc, #188]	@ (8005040 <xTaskPriorityDisinherit+0xd4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d00b      	beq.n	8004fa4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	60fb      	str	r3, [r7, #12]
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	e7fd      	b.n	8004fa0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	60bb      	str	r3, [r7, #8]
}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	e7fd      	b.n	8004fc0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc8:	1e5a      	subs	r2, r3, #1
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d02c      	beq.n	8005034 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d128      	bne.n	8005034 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe fc5a 	bl	80038a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005004:	4b0f      	ldr	r3, [pc, #60]	@ (8005044 <xTaskPriorityDisinherit+0xd8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d903      	bls.n	8005014 <xTaskPriorityDisinherit+0xa8>
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005010:	4a0c      	ldr	r2, [pc, #48]	@ (8005044 <xTaskPriorityDisinherit+0xd8>)
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4a09      	ldr	r2, [pc, #36]	@ (8005048 <xTaskPriorityDisinherit+0xdc>)
 8005022:	441a      	add	r2, r3
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	3304      	adds	r3, #4
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f7fe fbdd 	bl	80037ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005030:	2301      	movs	r3, #1
 8005032:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005034:	697b      	ldr	r3, [r7, #20]
	}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	2000086c 	.word	0x2000086c
 8005044:	20000d48 	.word	0x20000d48
 8005048:	20000870 	.word	0x20000870

0800504c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005056:	4b21      	ldr	r3, [pc, #132]	@ (80050dc <prvAddCurrentTaskToDelayedList+0x90>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800505c:	4b20      	ldr	r3, [pc, #128]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3304      	adds	r3, #4
 8005062:	4618      	mov	r0, r3
 8005064:	f7fe fc1c 	bl	80038a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	d10a      	bne.n	8005086 <prvAddCurrentTaskToDelayedList+0x3a>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005076:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4819      	ldr	r0, [pc, #100]	@ (80050e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005080:	f7fe fbb3 	bl	80037ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005084:	e026      	b.n	80050d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4413      	add	r3, r2
 800508c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800508e:	4b14      	ldr	r3, [pc, #80]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	429a      	cmp	r2, r3
 800509c:	d209      	bcs.n	80050b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800509e:	4b12      	ldr	r3, [pc, #72]	@ (80050e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b0f      	ldr	r3, [pc, #60]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3304      	adds	r3, #4
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f7fe fbc0 	bl	8003830 <vListInsert>
}
 80050b0:	e010      	b.n	80050d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050b2:	4b0e      	ldr	r3, [pc, #56]	@ (80050ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b0a      	ldr	r3, [pc, #40]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f7fe fbb6 	bl	8003830 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050c4:	4b0a      	ldr	r3, [pc, #40]	@ (80050f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d202      	bcs.n	80050d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050ce:	4a08      	ldr	r2, [pc, #32]	@ (80050f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	6013      	str	r3, [r2, #0]
}
 80050d4:	bf00      	nop
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	20000d44 	.word	0x20000d44
 80050e0:	2000086c 	.word	0x2000086c
 80050e4:	20000d2c 	.word	0x20000d2c
 80050e8:	20000cfc 	.word	0x20000cfc
 80050ec:	20000cf8 	.word	0x20000cf8
 80050f0:	20000d60 	.word	0x20000d60

080050f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08a      	sub	sp, #40	@ 0x28
 80050f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050fe:	f000 fad9 	bl	80056b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005102:	4b1d      	ldr	r3, [pc, #116]	@ (8005178 <xTimerCreateTimerTask+0x84>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d021      	beq.n	800514e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005112:	1d3a      	adds	r2, r7, #4
 8005114:	f107 0108 	add.w	r1, r7, #8
 8005118:	f107 030c 	add.w	r3, r7, #12
 800511c:	4618      	mov	r0, r3
 800511e:	f7fe fb1f 	bl	8003760 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	9202      	str	r2, [sp, #8]
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	2302      	movs	r3, #2
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	2300      	movs	r3, #0
 8005132:	460a      	mov	r2, r1
 8005134:	4911      	ldr	r1, [pc, #68]	@ (800517c <xTimerCreateTimerTask+0x88>)
 8005136:	4812      	ldr	r0, [pc, #72]	@ (8005180 <xTimerCreateTimerTask+0x8c>)
 8005138:	f7ff f8d2 	bl	80042e0 <xTaskCreateStatic>
 800513c:	4603      	mov	r3, r0
 800513e:	4a11      	ldr	r2, [pc, #68]	@ (8005184 <xTimerCreateTimerTask+0x90>)
 8005140:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005142:	4b10      	ldr	r3, [pc, #64]	@ (8005184 <xTimerCreateTimerTask+0x90>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800514a:	2301      	movs	r3, #1
 800514c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10b      	bne.n	800516c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	613b      	str	r3, [r7, #16]
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800516c:	697b      	ldr	r3, [r7, #20]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000d9c 	.word	0x20000d9c
 800517c:	08005f9c 	.word	0x08005f9c
 8005180:	080052a9 	.word	0x080052a9
 8005184:	20000da0 	.word	0x20000da0

08005188 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	@ 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005196:	2300      	movs	r3, #0
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10b      	bne.n	80051b8 <xTimerGenericCommand+0x30>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	623b      	str	r3, [r7, #32]
}
 80051b2:	bf00      	nop
 80051b4:	bf00      	nop
 80051b6:	e7fd      	b.n	80051b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051b8:	4b19      	ldr	r3, [pc, #100]	@ (8005220 <xTimerGenericCommand+0x98>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d02a      	beq.n	8005216 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b05      	cmp	r3, #5
 80051d0:	dc18      	bgt.n	8005204 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051d2:	f7ff fead 	bl	8004f30 <xTaskGetSchedulerState>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d109      	bne.n	80051f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051dc:	4b10      	ldr	r3, [pc, #64]	@ (8005220 <xTimerGenericCommand+0x98>)
 80051de:	6818      	ldr	r0, [r3, #0]
 80051e0:	f107 0110 	add.w	r1, r7, #16
 80051e4:	2300      	movs	r3, #0
 80051e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051e8:	f7fe fc8e 	bl	8003b08 <xQueueGenericSend>
 80051ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80051ee:	e012      	b.n	8005216 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005220 <xTimerGenericCommand+0x98>)
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	f107 0110 	add.w	r1, r7, #16
 80051f8:	2300      	movs	r3, #0
 80051fa:	2200      	movs	r2, #0
 80051fc:	f7fe fc84 	bl	8003b08 <xQueueGenericSend>
 8005200:	6278      	str	r0, [r7, #36]	@ 0x24
 8005202:	e008      	b.n	8005216 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005204:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <xTimerGenericCommand+0x98>)
 8005206:	6818      	ldr	r0, [r3, #0]
 8005208:	f107 0110 	add.w	r1, r7, #16
 800520c:	2300      	movs	r3, #0
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	f7fe fd7c 	bl	8003d0c <xQueueGenericSendFromISR>
 8005214:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005218:	4618      	mov	r0, r3
 800521a:	3728      	adds	r7, #40	@ 0x28
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	20000d9c 	.word	0x20000d9c

08005224 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af02      	add	r7, sp, #8
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800522e:	4b1d      	ldr	r3, [pc, #116]	@ (80052a4 <prvProcessExpiredTimer+0x80>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	3304      	adds	r3, #4
 800523c:	4618      	mov	r0, r3
 800523e:	f7fe fb2f 	bl	80038a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d123      	bne.n	8005292 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	18d1      	adds	r1, r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	6978      	ldr	r0, [r7, #20]
 8005258:	f000 f8cc 	bl	80053f4 <prvInsertTimerInActiveList>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d017      	beq.n	8005292 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005262:	2300      	movs	r3, #0
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	2300      	movs	r3, #0
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	2100      	movs	r1, #0
 800526c:	6978      	ldr	r0, [r7, #20]
 800526e:	f7ff ff8b 	bl	8005188 <xTimerGenericCommand>
 8005272:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10b      	bne.n	8005292 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	60fb      	str	r3, [r7, #12]
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	e7fd      	b.n	800528e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005296:	6978      	ldr	r0, [r7, #20]
 8005298:	4798      	blx	r3
}
 800529a:	bf00      	nop
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20000d94 	.word	0x20000d94

080052a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052b0:	f107 0308 	add.w	r3, r7, #8
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 f859 	bl	800536c <prvGetNextExpireTime>
 80052ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4619      	mov	r1, r3
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f805 	bl	80052d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052c6:	f000 f8d7 	bl	8005478 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052ca:	bf00      	nop
 80052cc:	e7f0      	b.n	80052b0 <prvTimerTask+0x8>
	...

080052d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052da:	f7ff fa3b 	bl	8004754 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052de:	f107 0308 	add.w	r3, r7, #8
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 f866 	bl	80053b4 <prvSampleTimeNow>
 80052e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d130      	bne.n	8005352 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10a      	bne.n	800530c <prvProcessTimerOrBlockTask+0x3c>
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d806      	bhi.n	800530c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80052fe:	f7ff fa37 	bl	8004770 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005302:	68f9      	ldr	r1, [r7, #12]
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7ff ff8d 	bl	8005224 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800530a:	e024      	b.n	8005356 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d008      	beq.n	8005324 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005312:	4b13      	ldr	r3, [pc, #76]	@ (8005360 <prvProcessTimerOrBlockTask+0x90>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	bf0c      	ite	eq
 800531c:	2301      	moveq	r3, #1
 800531e:	2300      	movne	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005324:	4b0f      	ldr	r3, [pc, #60]	@ (8005364 <prvProcessTimerOrBlockTask+0x94>)
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	4619      	mov	r1, r3
 8005332:	f7fe ffa1 	bl	8004278 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005336:	f7ff fa1b 	bl	8004770 <xTaskResumeAll>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005340:	4b09      	ldr	r3, [pc, #36]	@ (8005368 <prvProcessTimerOrBlockTask+0x98>)
 8005342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	f3bf 8f6f 	isb	sy
}
 8005350:	e001      	b.n	8005356 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005352:	f7ff fa0d 	bl	8004770 <xTaskResumeAll>
}
 8005356:	bf00      	nop
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000d98 	.word	0x20000d98
 8005364:	20000d9c 	.word	0x20000d9c
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005374:	4b0e      	ldr	r3, [pc, #56]	@ (80053b0 <prvGetNextExpireTime+0x44>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	bf0c      	ite	eq
 800537e:	2301      	moveq	r3, #1
 8005380:	2300      	movne	r3, #0
 8005382:	b2db      	uxtb	r3, r3
 8005384:	461a      	mov	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d105      	bne.n	800539e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005392:	4b07      	ldr	r3, [pc, #28]	@ (80053b0 <prvGetNextExpireTime+0x44>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	e001      	b.n	80053a2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053a2:	68fb      	ldr	r3, [r7, #12]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	20000d94 	.word	0x20000d94

080053b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053bc:	f7ff fa76 	bl	80048ac <xTaskGetTickCount>
 80053c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053c2:	4b0b      	ldr	r3, [pc, #44]	@ (80053f0 <prvSampleTimeNow+0x3c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d205      	bcs.n	80053d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053cc:	f000 f910 	bl	80055f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	e002      	b.n	80053de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053de:	4a04      	ldr	r2, [pc, #16]	@ (80053f0 <prvSampleTimeNow+0x3c>)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053e4:	68fb      	ldr	r3, [r7, #12]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000da4 	.word	0x20000da4

080053f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d812      	bhi.n	8005440 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	1ad2      	subs	r2, r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	429a      	cmp	r2, r3
 8005426:	d302      	bcc.n	800542e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005428:	2301      	movs	r3, #1
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	e01b      	b.n	8005466 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800542e:	4b10      	ldr	r3, [pc, #64]	@ (8005470 <prvInsertTimerInActiveList+0x7c>)
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3304      	adds	r3, #4
 8005436:	4619      	mov	r1, r3
 8005438:	4610      	mov	r0, r2
 800543a:	f7fe f9f9 	bl	8003830 <vListInsert>
 800543e:	e012      	b.n	8005466 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d206      	bcs.n	8005456 <prvInsertTimerInActiveList+0x62>
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d302      	bcc.n	8005456 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005450:	2301      	movs	r3, #1
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e007      	b.n	8005466 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005456:	4b07      	ldr	r3, [pc, #28]	@ (8005474 <prvInsertTimerInActiveList+0x80>)
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3304      	adds	r3, #4
 800545e:	4619      	mov	r1, r3
 8005460:	4610      	mov	r0, r2
 8005462:	f7fe f9e5 	bl	8003830 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005466:	697b      	ldr	r3, [r7, #20]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20000d98 	.word	0x20000d98
 8005474:	20000d94 	.word	0x20000d94

08005478 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08e      	sub	sp, #56	@ 0x38
 800547c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800547e:	e0a5      	b.n	80055cc <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	da19      	bge.n	80054ba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005486:	1d3b      	adds	r3, r7, #4
 8005488:	3304      	adds	r3, #4
 800548a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800548c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10b      	bne.n	80054aa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	61fb      	str	r3, [r7, #28]
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	e7fd      	b.n	80054a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054b0:	6850      	ldr	r0, [r2, #4]
 80054b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054b4:	6892      	ldr	r2, [r2, #8]
 80054b6:	4611      	mov	r1, r2
 80054b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f2c0 8085 	blt.w	80055cc <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d004      	beq.n	80054d8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d0:	3304      	adds	r3, #4
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fe f9e4 	bl	80038a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054d8:	463b      	mov	r3, r7
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff ff6a 	bl	80053b4 <prvSampleTimeNow>
 80054e0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b09      	cmp	r3, #9
 80054e6:	d86c      	bhi.n	80055c2 <prvProcessReceivedCommands+0x14a>
 80054e8:	a201      	add	r2, pc, #4	@ (adr r2, 80054f0 <prvProcessReceivedCommands+0x78>)
 80054ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ee:	bf00      	nop
 80054f0:	08005519 	.word	0x08005519
 80054f4:	08005519 	.word	0x08005519
 80054f8:	08005519 	.word	0x08005519
 80054fc:	080055c3 	.word	0x080055c3
 8005500:	08005577 	.word	0x08005577
 8005504:	080055b1 	.word	0x080055b1
 8005508:	08005519 	.word	0x08005519
 800550c:	08005519 	.word	0x08005519
 8005510:	080055c3 	.word	0x080055c3
 8005514:	08005577 	.word	0x08005577
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	18d1      	adds	r1, r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005524:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005526:	f7ff ff65 	bl	80053f4 <prvInsertTimerInActiveList>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d04a      	beq.n	80055c6 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005534:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005536:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d142      	bne.n	80055c6 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	441a      	add	r2, r3
 8005548:	2300      	movs	r3, #0
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	2300      	movs	r3, #0
 800554e:	2100      	movs	r1, #0
 8005550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005552:	f7ff fe19 	bl	8005188 <xTimerGenericCommand>
 8005556:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d133      	bne.n	80055c6 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	61bb      	str	r3, [r7, #24]
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	e7fd      	b.n	8005572 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800557c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10b      	bne.n	800559c <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	617b      	str	r3, [r7, #20]
}
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	e7fd      	b.n	8005598 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800559c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a2:	18d1      	adds	r1, r2, r3
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055aa:	f7ff ff23 	bl	80053f4 <prvInsertTimerInActiveList>
					break;
 80055ae:	e00d      	b.n	80055cc <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80055b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d107      	bne.n	80055ca <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80055ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055bc:	f000 fb78 	bl	8005cb0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80055c0:	e003      	b.n	80055ca <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80055c2:	bf00      	nop
 80055c4:	e002      	b.n	80055cc <prvProcessReceivedCommands+0x154>
					break;
 80055c6:	bf00      	nop
 80055c8:	e000      	b.n	80055cc <prvProcessReceivedCommands+0x154>
					break;
 80055ca:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055cc:	4b07      	ldr	r3, [pc, #28]	@ (80055ec <prvProcessReceivedCommands+0x174>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	1d39      	adds	r1, r7, #4
 80055d2:	2200      	movs	r2, #0
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fe fc35 	bl	8003e44 <xQueueReceive>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f47f af4f 	bne.w	8005480 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80055e2:	bf00      	nop
 80055e4:	bf00      	nop
 80055e6:	3730      	adds	r7, #48	@ 0x30
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	20000d9c 	.word	0x20000d9c

080055f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055f6:	e046      	b.n	8005686 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055f8:	4b2c      	ldr	r3, [pc, #176]	@ (80056ac <prvSwitchTimerLists+0xbc>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005602:	4b2a      	ldr	r3, [pc, #168]	@ (80056ac <prvSwitchTimerLists+0xbc>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	3304      	adds	r3, #4
 8005610:	4618      	mov	r0, r3
 8005612:	f7fe f945 	bl	80038a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d12f      	bne.n	8005686 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	4413      	add	r3, r2
 800562e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	429a      	cmp	r2, r3
 8005636:	d90e      	bls.n	8005656 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005644:	4b19      	ldr	r3, [pc, #100]	@ (80056ac <prvSwitchTimerLists+0xbc>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3304      	adds	r3, #4
 800564c:	4619      	mov	r1, r3
 800564e:	4610      	mov	r0, r2
 8005650:	f7fe f8ee 	bl	8003830 <vListInsert>
 8005654:	e017      	b.n	8005686 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005656:	2300      	movs	r3, #0
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	2300      	movs	r3, #0
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	2100      	movs	r1, #0
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f7ff fd91 	bl	8005188 <xTimerGenericCommand>
 8005666:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10b      	bne.n	8005686 <prvSwitchTimerLists+0x96>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	603b      	str	r3, [r7, #0]
}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	e7fd      	b.n	8005682 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005686:	4b09      	ldr	r3, [pc, #36]	@ (80056ac <prvSwitchTimerLists+0xbc>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1b3      	bne.n	80055f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005690:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <prvSwitchTimerLists+0xbc>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005696:	4b06      	ldr	r3, [pc, #24]	@ (80056b0 <prvSwitchTimerLists+0xc0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a04      	ldr	r2, [pc, #16]	@ (80056ac <prvSwitchTimerLists+0xbc>)
 800569c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800569e:	4a04      	ldr	r2, [pc, #16]	@ (80056b0 <prvSwitchTimerLists+0xc0>)
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	6013      	str	r3, [r2, #0]
}
 80056a4:	bf00      	nop
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20000d94 	.word	0x20000d94
 80056b0:	20000d98 	.word	0x20000d98

080056b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056ba:	f000 f92f 	bl	800591c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056be:	4b15      	ldr	r3, [pc, #84]	@ (8005714 <prvCheckForValidListAndQueue+0x60>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d120      	bne.n	8005708 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80056c6:	4814      	ldr	r0, [pc, #80]	@ (8005718 <prvCheckForValidListAndQueue+0x64>)
 80056c8:	f7fe f864 	bl	8003794 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80056cc:	4813      	ldr	r0, [pc, #76]	@ (800571c <prvCheckForValidListAndQueue+0x68>)
 80056ce:	f7fe f861 	bl	8003794 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80056d2:	4b13      	ldr	r3, [pc, #76]	@ (8005720 <prvCheckForValidListAndQueue+0x6c>)
 80056d4:	4a10      	ldr	r2, [pc, #64]	@ (8005718 <prvCheckForValidListAndQueue+0x64>)
 80056d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80056d8:	4b12      	ldr	r3, [pc, #72]	@ (8005724 <prvCheckForValidListAndQueue+0x70>)
 80056da:	4a10      	ldr	r2, [pc, #64]	@ (800571c <prvCheckForValidListAndQueue+0x68>)
 80056dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80056de:	2300      	movs	r3, #0
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	4b11      	ldr	r3, [pc, #68]	@ (8005728 <prvCheckForValidListAndQueue+0x74>)
 80056e4:	4a11      	ldr	r2, [pc, #68]	@ (800572c <prvCheckForValidListAndQueue+0x78>)
 80056e6:	2110      	movs	r1, #16
 80056e8:	200a      	movs	r0, #10
 80056ea:	f7fe f96d 	bl	80039c8 <xQueueGenericCreateStatic>
 80056ee:	4603      	mov	r3, r0
 80056f0:	4a08      	ldr	r2, [pc, #32]	@ (8005714 <prvCheckForValidListAndQueue+0x60>)
 80056f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80056f4:	4b07      	ldr	r3, [pc, #28]	@ (8005714 <prvCheckForValidListAndQueue+0x60>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d005      	beq.n	8005708 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056fc:	4b05      	ldr	r3, [pc, #20]	@ (8005714 <prvCheckForValidListAndQueue+0x60>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	490b      	ldr	r1, [pc, #44]	@ (8005730 <prvCheckForValidListAndQueue+0x7c>)
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fd90 	bl	8004228 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005708:	f000 f938 	bl	800597c <vPortExitCritical>
}
 800570c:	bf00      	nop
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20000d9c 	.word	0x20000d9c
 8005718:	20000d6c 	.word	0x20000d6c
 800571c:	20000d80 	.word	0x20000d80
 8005720:	20000d94 	.word	0x20000d94
 8005724:	20000d98 	.word	0x20000d98
 8005728:	20000e48 	.word	0x20000e48
 800572c:	20000da8 	.word	0x20000da8
 8005730:	08005fa4 	.word	0x08005fa4

08005734 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3b04      	subs	r3, #4
 8005744:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800574c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	3b04      	subs	r3, #4
 8005752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f023 0201 	bic.w	r2, r3, #1
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3b04      	subs	r3, #4
 8005762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005764:	4a08      	ldr	r2, [pc, #32]	@ (8005788 <pxPortInitialiseStack+0x54>)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3b14      	subs	r3, #20
 800576e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3b20      	subs	r3, #32
 800577a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800577c:	68fb      	ldr	r3, [r7, #12]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr
 8005788:	0800578d 	.word	0x0800578d

0800578c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005792:	2300      	movs	r3, #0
 8005794:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005796:	4b12      	ldr	r3, [pc, #72]	@ (80057e0 <prvTaskExitError+0x54>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579e:	d00b      	beq.n	80057b8 <prvTaskExitError+0x2c>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	60fb      	str	r3, [r7, #12]
}
 80057b2:	bf00      	nop
 80057b4:	bf00      	nop
 80057b6:	e7fd      	b.n	80057b4 <prvTaskExitError+0x28>
	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	60bb      	str	r3, [r7, #8]
}
 80057ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057cc:	bf00      	nop
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0fc      	beq.n	80057ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057d4:	bf00      	nop
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr
 80057e0:	20000024 	.word	0x20000024
	...

080057f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057f0:	4b07      	ldr	r3, [pc, #28]	@ (8005810 <pxCurrentTCBConst2>)
 80057f2:	6819      	ldr	r1, [r3, #0]
 80057f4:	6808      	ldr	r0, [r1, #0]
 80057f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80057fa:	f380 8809 	msr	PSP, r0
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f04f 0000 	mov.w	r0, #0
 8005806:	f380 8811 	msr	BASEPRI, r0
 800580a:	f04e 0e0d 	orr.w	lr, lr, #13
 800580e:	4770      	bx	lr

08005810 <pxCurrentTCBConst2>:
 8005810:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005814:	bf00      	nop
 8005816:	bf00      	nop

08005818 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005818:	4806      	ldr	r0, [pc, #24]	@ (8005834 <prvPortStartFirstTask+0x1c>)
 800581a:	6800      	ldr	r0, [r0, #0]
 800581c:	6800      	ldr	r0, [r0, #0]
 800581e:	f380 8808 	msr	MSP, r0
 8005822:	b662      	cpsie	i
 8005824:	b661      	cpsie	f
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	df00      	svc	0
 8005830:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005832:	bf00      	nop
 8005834:	e000ed08 	.word	0xe000ed08

08005838 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800583e:	4b32      	ldr	r3, [pc, #200]	@ (8005908 <xPortStartScheduler+0xd0>)
 8005840:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	22ff      	movs	r2, #255	@ 0xff
 800584e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	b2db      	uxtb	r3, r3
 8005856:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005860:	b2da      	uxtb	r2, r3
 8005862:	4b2a      	ldr	r3, [pc, #168]	@ (800590c <xPortStartScheduler+0xd4>)
 8005864:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005866:	4b2a      	ldr	r3, [pc, #168]	@ (8005910 <xPortStartScheduler+0xd8>)
 8005868:	2207      	movs	r2, #7
 800586a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800586c:	e009      	b.n	8005882 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800586e:	4b28      	ldr	r3, [pc, #160]	@ (8005910 <xPortStartScheduler+0xd8>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3b01      	subs	r3, #1
 8005874:	4a26      	ldr	r2, [pc, #152]	@ (8005910 <xPortStartScheduler+0xd8>)
 8005876:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	b2db      	uxtb	r3, r3
 8005880:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005882:	78fb      	ldrb	r3, [r7, #3]
 8005884:	b2db      	uxtb	r3, r3
 8005886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800588a:	2b80      	cmp	r3, #128	@ 0x80
 800588c:	d0ef      	beq.n	800586e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800588e:	4b20      	ldr	r3, [pc, #128]	@ (8005910 <xPortStartScheduler+0xd8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f1c3 0307 	rsb	r3, r3, #7
 8005896:	2b04      	cmp	r3, #4
 8005898:	d00b      	beq.n	80058b2 <xPortStartScheduler+0x7a>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	60bb      	str	r3, [r7, #8]
}
 80058ac:	bf00      	nop
 80058ae:	bf00      	nop
 80058b0:	e7fd      	b.n	80058ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058b2:	4b17      	ldr	r3, [pc, #92]	@ (8005910 <xPortStartScheduler+0xd8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	4a15      	ldr	r2, [pc, #84]	@ (8005910 <xPortStartScheduler+0xd8>)
 80058ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058bc:	4b14      	ldr	r3, [pc, #80]	@ (8005910 <xPortStartScheduler+0xd8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80058c4:	4a12      	ldr	r2, [pc, #72]	@ (8005910 <xPortStartScheduler+0xd8>)
 80058c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058d0:	4b10      	ldr	r3, [pc, #64]	@ (8005914 <xPortStartScheduler+0xdc>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a0f      	ldr	r2, [pc, #60]	@ (8005914 <xPortStartScheduler+0xdc>)
 80058d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80058da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <xPortStartScheduler+0xdc>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005914 <xPortStartScheduler+0xdc>)
 80058e2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80058e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058e8:	f000 f8b8 	bl	8005a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005918 <xPortStartScheduler+0xe0>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058f2:	f7ff ff91 	bl	8005818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058f6:	f7ff f8a7 	bl	8004a48 <vTaskSwitchContext>
	prvTaskExitError();
 80058fa:	f7ff ff47 	bl	800578c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	e000e400 	.word	0xe000e400
 800590c:	20000e98 	.word	0x20000e98
 8005910:	20000e9c 	.word	0x20000e9c
 8005914:	e000ed20 	.word	0xe000ed20
 8005918:	20000024 	.word	0x20000024

0800591c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	607b      	str	r3, [r7, #4]
}
 8005934:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005936:	4b0f      	ldr	r3, [pc, #60]	@ (8005974 <vPortEnterCritical+0x58>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3301      	adds	r3, #1
 800593c:	4a0d      	ldr	r2, [pc, #52]	@ (8005974 <vPortEnterCritical+0x58>)
 800593e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005940:	4b0c      	ldr	r3, [pc, #48]	@ (8005974 <vPortEnterCritical+0x58>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d110      	bne.n	800596a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005948:	4b0b      	ldr	r3, [pc, #44]	@ (8005978 <vPortEnterCritical+0x5c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00b      	beq.n	800596a <vPortEnterCritical+0x4e>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	603b      	str	r3, [r7, #0]
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	e7fd      	b.n	8005966 <vPortEnterCritical+0x4a>
	}
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr
 8005974:	20000024 	.word	0x20000024
 8005978:	e000ed04 	.word	0xe000ed04

0800597c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005982:	4b12      	ldr	r3, [pc, #72]	@ (80059cc <vPortExitCritical+0x50>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10b      	bne.n	80059a2 <vPortExitCritical+0x26>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	607b      	str	r3, [r7, #4]
}
 800599c:	bf00      	nop
 800599e:	bf00      	nop
 80059a0:	e7fd      	b.n	800599e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059a2:	4b0a      	ldr	r3, [pc, #40]	@ (80059cc <vPortExitCritical+0x50>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	4a08      	ldr	r2, [pc, #32]	@ (80059cc <vPortExitCritical+0x50>)
 80059aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059ac:	4b07      	ldr	r3, [pc, #28]	@ (80059cc <vPortExitCritical+0x50>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d105      	bne.n	80059c0 <vPortExitCritical+0x44>
 80059b4:	2300      	movs	r3, #0
 80059b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	f383 8811 	msr	BASEPRI, r3
}
 80059be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bc80      	pop	{r7}
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	20000024 	.word	0x20000024

080059d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059d0:	f3ef 8009 	mrs	r0, PSP
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	4b0d      	ldr	r3, [pc, #52]	@ (8005a10 <pxCurrentTCBConst>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80059e0:	6010      	str	r0, [r2, #0]
 80059e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80059e6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80059ea:	f380 8811 	msr	BASEPRI, r0
 80059ee:	f7ff f82b 	bl	8004a48 <vTaskSwitchContext>
 80059f2:	f04f 0000 	mov.w	r0, #0
 80059f6:	f380 8811 	msr	BASEPRI, r0
 80059fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80059fe:	6819      	ldr	r1, [r3, #0]
 8005a00:	6808      	ldr	r0, [r1, #0]
 8005a02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005a06:	f380 8809 	msr	PSP, r0
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	4770      	bx	lr

08005a10 <pxCurrentTCBConst>:
 8005a10:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop

08005a18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	607b      	str	r3, [r7, #4]
}
 8005a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a32:	f7fe ff49 	bl	80048c8 <xTaskIncrementTick>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a3c:	4b06      	ldr	r3, [pc, #24]	@ (8005a58 <SysTick_Handler+0x40>)
 8005a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	2300      	movs	r3, #0
 8005a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	f383 8811 	msr	BASEPRI, r3
}
 8005a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	e000ed04 	.word	0xe000ed04

08005a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a60:	4b0a      	ldr	r3, [pc, #40]	@ (8005a8c <vPortSetupTimerInterrupt+0x30>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a66:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <vPortSetupTimerInterrupt+0x34>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a6c:	4b09      	ldr	r3, [pc, #36]	@ (8005a94 <vPortSetupTimerInterrupt+0x38>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a09      	ldr	r2, [pc, #36]	@ (8005a98 <vPortSetupTimerInterrupt+0x3c>)
 8005a72:	fba2 2303 	umull	r2, r3, r2, r3
 8005a76:	099b      	lsrs	r3, r3, #6
 8005a78:	4a08      	ldr	r2, [pc, #32]	@ (8005a9c <vPortSetupTimerInterrupt+0x40>)
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a7e:	4b03      	ldr	r3, [pc, #12]	@ (8005a8c <vPortSetupTimerInterrupt+0x30>)
 8005a80:	2207      	movs	r2, #7
 8005a82:	601a      	str	r2, [r3, #0]
}
 8005a84:	bf00      	nop
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr
 8005a8c:	e000e010 	.word	0xe000e010
 8005a90:	e000e018 	.word	0xe000e018
 8005a94:	20000018 	.word	0x20000018
 8005a98:	10624dd3 	.word	0x10624dd3
 8005a9c:	e000e014 	.word	0xe000e014

08005aa0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005aa6:	f3ef 8305 	mrs	r3, IPSR
 8005aaa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b0f      	cmp	r3, #15
 8005ab0:	d915      	bls.n	8005ade <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ab2:	4a17      	ldr	r2, [pc, #92]	@ (8005b10 <vPortValidateInterruptPriority+0x70>)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005abc:	4b15      	ldr	r3, [pc, #84]	@ (8005b14 <vPortValidateInterruptPriority+0x74>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	7afa      	ldrb	r2, [r7, #11]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d20b      	bcs.n	8005ade <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	607b      	str	r3, [r7, #4]
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	e7fd      	b.n	8005ada <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ade:	4b0e      	ldr	r3, [pc, #56]	@ (8005b18 <vPortValidateInterruptPriority+0x78>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b1c <vPortValidateInterruptPriority+0x7c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d90b      	bls.n	8005b06 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	603b      	str	r3, [r7, #0]
}
 8005b00:	bf00      	nop
 8005b02:	bf00      	nop
 8005b04:	e7fd      	b.n	8005b02 <vPortValidateInterruptPriority+0x62>
	}
 8005b06:	bf00      	nop
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr
 8005b10:	e000e3f0 	.word	0xe000e3f0
 8005b14:	20000e98 	.word	0x20000e98
 8005b18:	e000ed0c 	.word	0xe000ed0c
 8005b1c:	20000e9c 	.word	0x20000e9c

08005b20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08a      	sub	sp, #40	@ 0x28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b2c:	f7fe fe12 	bl	8004754 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b30:	4b5a      	ldr	r3, [pc, #360]	@ (8005c9c <pvPortMalloc+0x17c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b38:	f000 f916 	bl	8005d68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b3c:	4b58      	ldr	r3, [pc, #352]	@ (8005ca0 <pvPortMalloc+0x180>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4013      	ands	r3, r2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f040 8090 	bne.w	8005c6a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01e      	beq.n	8005b8e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005b50:	2208      	movs	r2, #8
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4413      	add	r3, r2
 8005b56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d015      	beq.n	8005b8e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f023 0307 	bic.w	r3, r3, #7
 8005b68:	3308      	adds	r3, #8
 8005b6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00b      	beq.n	8005b8e <pvPortMalloc+0x6e>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	617b      	str	r3, [r7, #20]
}
 8005b88:	bf00      	nop
 8005b8a:	bf00      	nop
 8005b8c:	e7fd      	b.n	8005b8a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d06a      	beq.n	8005c6a <pvPortMalloc+0x14a>
 8005b94:	4b43      	ldr	r3, [pc, #268]	@ (8005ca4 <pvPortMalloc+0x184>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d865      	bhi.n	8005c6a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b9e:	4b42      	ldr	r3, [pc, #264]	@ (8005ca8 <pvPortMalloc+0x188>)
 8005ba0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ba2:	4b41      	ldr	r3, [pc, #260]	@ (8005ca8 <pvPortMalloc+0x188>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ba8:	e004      	b.n	8005bb4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d903      	bls.n	8005bc6 <pvPortMalloc+0xa6>
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f1      	bne.n	8005baa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bc6:	4b35      	ldr	r3, [pc, #212]	@ (8005c9c <pvPortMalloc+0x17c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d04c      	beq.n	8005c6a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2208      	movs	r2, #8
 8005bd6:	4413      	add	r3, r2
 8005bd8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	1ad2      	subs	r2, r2, r3
 8005bea:	2308      	movs	r3, #8
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d920      	bls.n	8005c34 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	f003 0307 	and.w	r3, r3, #7
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00b      	beq.n	8005c1c <pvPortMalloc+0xfc>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	613b      	str	r3, [r7, #16]
}
 8005c16:	bf00      	nop
 8005c18:	bf00      	nop
 8005c1a:	e7fd      	b.n	8005c18 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	1ad2      	subs	r2, r2, r3
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c2e:	69b8      	ldr	r0, [r7, #24]
 8005c30:	f000 f8fc 	bl	8005e2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c34:	4b1b      	ldr	r3, [pc, #108]	@ (8005ca4 <pvPortMalloc+0x184>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	4a19      	ldr	r2, [pc, #100]	@ (8005ca4 <pvPortMalloc+0x184>)
 8005c40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c42:	4b18      	ldr	r3, [pc, #96]	@ (8005ca4 <pvPortMalloc+0x184>)
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	4b19      	ldr	r3, [pc, #100]	@ (8005cac <pvPortMalloc+0x18c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d203      	bcs.n	8005c56 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c4e:	4b15      	ldr	r3, [pc, #84]	@ (8005ca4 <pvPortMalloc+0x184>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a16      	ldr	r2, [pc, #88]	@ (8005cac <pvPortMalloc+0x18c>)
 8005c54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	4b11      	ldr	r3, [pc, #68]	@ (8005ca0 <pvPortMalloc+0x180>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c6a:	f7fe fd81 	bl	8004770 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00b      	beq.n	8005c90 <pvPortMalloc+0x170>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	60fb      	str	r3, [r7, #12]
}
 8005c8a:	bf00      	nop
 8005c8c:	bf00      	nop
 8005c8e:	e7fd      	b.n	8005c8c <pvPortMalloc+0x16c>
	return pvReturn;
 8005c90:	69fb      	ldr	r3, [r7, #28]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3728      	adds	r7, #40	@ 0x28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20001aa8 	.word	0x20001aa8
 8005ca0:	20001ab4 	.word	0x20001ab4
 8005ca4:	20001aac 	.word	0x20001aac
 8005ca8:	20001aa0 	.word	0x20001aa0
 8005cac:	20001ab0 	.word	0x20001ab0

08005cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d04a      	beq.n	8005d58 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cc2:	2308      	movs	r3, #8
 8005cc4:	425b      	negs	r3, r3
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4413      	add	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	4b22      	ldr	r3, [pc, #136]	@ (8005d60 <vPortFree+0xb0>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10b      	bne.n	8005cf6 <vPortFree+0x46>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	60fb      	str	r3, [r7, #12]
}
 8005cf0:	bf00      	nop
 8005cf2:	bf00      	nop
 8005cf4:	e7fd      	b.n	8005cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00b      	beq.n	8005d16 <vPortFree+0x66>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	60bb      	str	r3, [r7, #8]
}
 8005d10:	bf00      	nop
 8005d12:	bf00      	nop
 8005d14:	e7fd      	b.n	8005d12 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	4b11      	ldr	r3, [pc, #68]	@ (8005d60 <vPortFree+0xb0>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d019      	beq.n	8005d58 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d115      	bne.n	8005d58 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	4b0b      	ldr	r3, [pc, #44]	@ (8005d60 <vPortFree+0xb0>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	43db      	mvns	r3, r3
 8005d36:	401a      	ands	r2, r3
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d3c:	f7fe fd0a 	bl	8004754 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	4b07      	ldr	r3, [pc, #28]	@ (8005d64 <vPortFree+0xb4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4413      	add	r3, r2
 8005d4a:	4a06      	ldr	r2, [pc, #24]	@ (8005d64 <vPortFree+0xb4>)
 8005d4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d4e:	6938      	ldr	r0, [r7, #16]
 8005d50:	f000 f86c 	bl	8005e2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005d54:	f7fe fd0c 	bl	8004770 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d58:	bf00      	nop
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	20001ab4 	.word	0x20001ab4
 8005d64:	20001aac 	.word	0x20001aac

08005d68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d6e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005d72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d74:	4b27      	ldr	r3, [pc, #156]	@ (8005e14 <prvHeapInit+0xac>)
 8005d76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f003 0307 	and.w	r3, r3, #7
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00c      	beq.n	8005d9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3307      	adds	r3, #7
 8005d86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0307 	bic.w	r3, r3, #7
 8005d8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	4a1f      	ldr	r2, [pc, #124]	@ (8005e14 <prvHeapInit+0xac>)
 8005d98:	4413      	add	r3, r2
 8005d9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005da0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e18 <prvHeapInit+0xb0>)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005da6:	4b1c      	ldr	r3, [pc, #112]	@ (8005e18 <prvHeapInit+0xb0>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	4413      	add	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005db4:	2208      	movs	r2, #8
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	1a9b      	subs	r3, r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0307 	bic.w	r3, r3, #7
 8005dc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4a15      	ldr	r2, [pc, #84]	@ (8005e1c <prvHeapInit+0xb4>)
 8005dc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005dca:	4b14      	ldr	r3, [pc, #80]	@ (8005e1c <prvHeapInit+0xb4>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dd2:	4b12      	ldr	r3, [pc, #72]	@ (8005e1c <prvHeapInit+0xb4>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	1ad2      	subs	r2, r2, r3
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005de8:	4b0c      	ldr	r3, [pc, #48]	@ (8005e1c <prvHeapInit+0xb4>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	4a0a      	ldr	r2, [pc, #40]	@ (8005e20 <prvHeapInit+0xb8>)
 8005df6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	4a09      	ldr	r2, [pc, #36]	@ (8005e24 <prvHeapInit+0xbc>)
 8005dfe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e00:	4b09      	ldr	r3, [pc, #36]	@ (8005e28 <prvHeapInit+0xc0>)
 8005e02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005e06:	601a      	str	r2, [r3, #0]
}
 8005e08:	bf00      	nop
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000ea0 	.word	0x20000ea0
 8005e18:	20001aa0 	.word	0x20001aa0
 8005e1c:	20001aa8 	.word	0x20001aa8
 8005e20:	20001ab0 	.word	0x20001ab0
 8005e24:	20001aac 	.word	0x20001aac
 8005e28:	20001ab4 	.word	0x20001ab4

08005e2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e34:	4b27      	ldr	r3, [pc, #156]	@ (8005ed4 <prvInsertBlockIntoFreeList+0xa8>)
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	e002      	b.n	8005e40 <prvInsertBlockIntoFreeList+0x14>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d8f7      	bhi.n	8005e3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	4413      	add	r3, r2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d108      	bne.n	8005e6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	441a      	add	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	441a      	add	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d118      	bne.n	8005eb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	4b14      	ldr	r3, [pc, #80]	@ (8005ed8 <prvInsertBlockIntoFreeList+0xac>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d00d      	beq.n	8005eaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	441a      	add	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	e008      	b.n	8005ebc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed8 <prvInsertBlockIntoFreeList+0xac>)
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	e003      	b.n	8005ebc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d002      	beq.n	8005eca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eca:	bf00      	nop
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bc80      	pop	{r7}
 8005ed2:	4770      	bx	lr
 8005ed4:	20001aa0 	.word	0x20001aa0
 8005ed8:	20001aa8 	.word	0x20001aa8

08005edc <memset>:
 8005edc:	4603      	mov	r3, r0
 8005ede:	4402      	add	r2, r0
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d100      	bne.n	8005ee6 <memset+0xa>
 8005ee4:	4770      	bx	lr
 8005ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eea:	e7f9      	b.n	8005ee0 <memset+0x4>

08005eec <__libc_init_array>:
 8005eec:	b570      	push	{r4, r5, r6, lr}
 8005eee:	2600      	movs	r6, #0
 8005ef0:	4d0c      	ldr	r5, [pc, #48]	@ (8005f24 <__libc_init_array+0x38>)
 8005ef2:	4c0d      	ldr	r4, [pc, #52]	@ (8005f28 <__libc_init_array+0x3c>)
 8005ef4:	1b64      	subs	r4, r4, r5
 8005ef6:	10a4      	asrs	r4, r4, #2
 8005ef8:	42a6      	cmp	r6, r4
 8005efa:	d109      	bne.n	8005f10 <__libc_init_array+0x24>
 8005efc:	f000 f828 	bl	8005f50 <_init>
 8005f00:	2600      	movs	r6, #0
 8005f02:	4d0a      	ldr	r5, [pc, #40]	@ (8005f2c <__libc_init_array+0x40>)
 8005f04:	4c0a      	ldr	r4, [pc, #40]	@ (8005f30 <__libc_init_array+0x44>)
 8005f06:	1b64      	subs	r4, r4, r5
 8005f08:	10a4      	asrs	r4, r4, #2
 8005f0a:	42a6      	cmp	r6, r4
 8005f0c:	d105      	bne.n	8005f1a <__libc_init_array+0x2e>
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}
 8005f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f14:	4798      	blx	r3
 8005f16:	3601      	adds	r6, #1
 8005f18:	e7ee      	b.n	8005ef8 <__libc_init_array+0xc>
 8005f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f1e:	4798      	blx	r3
 8005f20:	3601      	adds	r6, #1
 8005f22:	e7f2      	b.n	8005f0a <__libc_init_array+0x1e>
 8005f24:	08006024 	.word	0x08006024
 8005f28:	08006024 	.word	0x08006024
 8005f2c:	08006024 	.word	0x08006024
 8005f30:	08006028 	.word	0x08006028

08005f34 <memcpy>:
 8005f34:	440a      	add	r2, r1
 8005f36:	4291      	cmp	r1, r2
 8005f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f3c:	d100      	bne.n	8005f40 <memcpy+0xc>
 8005f3e:	4770      	bx	lr
 8005f40:	b510      	push	{r4, lr}
 8005f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f46:	4291      	cmp	r1, r2
 8005f48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f4c:	d1f9      	bne.n	8005f42 <memcpy+0xe>
 8005f4e:	bd10      	pop	{r4, pc}

08005f50 <_init>:
 8005f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f52:	bf00      	nop
 8005f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f56:	bc08      	pop	{r3}
 8005f58:	469e      	mov	lr, r3
 8005f5a:	4770      	bx	lr

08005f5c <_fini>:
 8005f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5e:	bf00      	nop
 8005f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f62:	bc08      	pop	{r3}
 8005f64:	469e      	mov	lr, r3
 8005f66:	4770      	bx	lr
